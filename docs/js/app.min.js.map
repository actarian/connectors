{"version":3,"sources":["docs/js/app.js"],"names":["angular","module","DEBUG","HELPER","JOINTS","MODELS","ANGLE","SCALE","Math","PI","I","flipQuaternion","THREE","Quaternion","setFromAxisAngle","Vector3","CombinerItem","item","this","size","box","Box3","group","Group","outer","inner","prototype","enter","callback","position","x","TweenLite","to","ease","Power2","easeOut","overwrite","onComplete","load","geometry","materials","minx","Number","POSITIVE_INFINITY","maxx","NEGATIVE_INFINITY","v","vertices","length","y","z","min","max","dx","console","log","model","Mesh","setFromObject","getSize","joints","getJoints","quaternionL","quaternion","clone","quaternionD","setFromUnitVectors","left","normal","multiplyScalar","right","quaternionR","multiplyQuaternions","multiply","inverse","positionL","positionR","origin","sub","applyQuaternion","mergeVertices","GeometryUtils","computeVertexNormals","verticesNeedUpdate","uvsNeedUpdate","Curvature","setEdges","color","Color","BoxGeometry","material","MeshStandardMaterial","wireframe","transparent","opacity","key","joint","euler","Euler","atan2","sqrt","rotation","copy","add","helper","MeshBasicMaterial","set","flip","flipped","animation","pow","onUpdate","slerp","lerpVectors","face","ids","names","colors","filter","index","i","indexOf","name","faces","String","materialIndex","push","a","b","c","center","reduce","divideScalar","setFlip","updateMatrixWorld","Combiner","scene","combiner","flags","rotate","flipping","entering","items","hittables","boxhelper","Box3Helper","originhelper","centerhelper","unselect","map","adjust","combine","fit","busy","setRotationFromQuaternion","getWorldQuaternion","getWorldPosition","getCenter","selection","flipItem","setTimeout","hitAndFlip","raycaster","hitted","intersectObjects","object","prev","pop","parent","remove","next","splice","select","selectedItem","selectedModel","update","first","window","factory","setGeometry","positions","normals","px","py","pz","nx","ny","nz","sx","sy","sz","pyx","pyz","pzx","yx","yz","zx","xy","zy","xz","dict","attributes","array","count","normalize","toArray","toString","subVectors","dot","curvatures","Object","keys","forEach","sum","val","abs","range","p","s","f","attribute","Float32Array","clamp","smoothstep","addAttribute","BufferAttribute","angleThresold","centroid","BufferGeometry","fromGeometry","edge","ia","ib","ic","va","vb","vc","pa","pb","pc","sa","sb","sc","na","ma","mb","angle","dEdge","addKey","ca","undefined","fa","fb","nb","cb","FaceUtils","computeCentroid","Array","fill","edges","matches","dVert","acos","RAD2DEG","mid","averages","toFixed","Effects","camera","renderer","w","h","renderPass","RenderPass","outlinePass","OutlinePass","Vector2","visibleEdgeColor","hiddenEdgeColor","edgeStrength","edgeGlow","edgeThickness","pulsePeriod","usePatternTexture","fxaaPass","ShaderPass","FXAAShader","uniforms","resolution","value","renderToScreen","composer","EffectComposer","addPass","render","resize","setSize","selectedObjects","RAD","Fitter","controls","fitter","dummy","projector","Projector","target","distance","endTarget","distanceMin","distanceMax","rotationAngle","dragAngle","zoom","offset","up","lookAt","updateProjectionMatrix","toScreen","applyMatrix4","matrixWorldInverse","aspect","dim","sin","fov","distanceTo","vfrom","vto","qfrom","qto","innerWidth","innerHeight","screen","project","toWorld","world","unprojectVector","cos","Forge","loader","JSONLoader","service","options","o","method","responseType","url","onload","req","XMLHttpRequest","open","status","response","onerror","onprogress","send","http","data","replace","RegExp","parse","JSON","Library","FINISHES","randomFinish","floor","random","randomSecondaryFinish","BASE","ANISOTROPY","capabilities","getMaxAnisotropy","replaceShader","manager","LoadingManager","textures","getTextures","getMaterials","getWeatheredNode","StandardNodeMaterial","curvature","AttributeNode","colorA","ColorNode","colorB","TextureNode","brushed","Math3Node","MIX","roughnessA","FloatNode","roughnessB","roughness","metalness","environment","CubeTextureNode","env","build","MeshPhongMaterial","visible","top","bottom","bumpMap","bumpScale","envMap","wrap","specular","shininess","reflectivity","specularMap","leatherLight","leatherBump","bronze","roughnessMap","silver","metalnessMap","weathered","envMapIntensity","gold","green","red","standard","black","sand","_silver","weatheredInverted","_black","light","off","on6","emissive","on12","glare","MeshLambertMaterial","blending","AdditiveBlending","MixOperation","emitterGlare","getTextureCube","anisotropy","format","RGBFormat","getTexture","wrapS","RepeatWrapping","wrapT","repeat","bump","reptileBump","reptileLight","stingrayBump","stingrayLight","TextureLoader","texture","loaded","total","e","CubeTextureLoader","setPath","getTextureCubeHdr","urls","HDRCubeTextureLoader","UnsignedByteType","cubemap","gammaInput","gammaOutput","toneMapping","LinearToneMapping","toneMappingExposure","generator","PMREMGenerator","packer","PMREMCubeUVPacker","cubeLods","CubeUVRenderTarget","dispose","needsUpdate","fragment","ShaderChunk","meshphong_frag","setFinish","finish","library","setNextFloor","FLOOR","from","r","g","materialTween","updateMaterials","secondaryFinish","hexToRgb","hex","result","exec","parseInt","MIN","Orbiter","orbiter","values","tween","friction","defineProperty","TypeError","O","len","relativeStart","arguments","k","end","relativeEnd","final","Element","hasClass","test","className","addClass","removeClass","split","join","isDescendant","node","parentNode","getBounds","bounds","width","offsetWidth","height","offsetHeight","getTouch","t","relativeTo","rect","getBoundingClientRect","scrollX","pageXOffset","document","documentElement","scrollLeft","scrollY","pageYOffset","scrollTop","pinchSize","type","touch","second","touches","originalEvent","changedTouches","pageX","pageY","calcNormal","n","angleTo","computeFaceNormals","vertexNormals","normalsNeedUpdate","directive","Polyfills","Prototypes","ThreeUtils","restrict","link","scope","element","container","Detector","webgl","down","moved","Raycaster","forge","WebGLRenderer","alpha","antialias","setClearColor","setPixelRatio","devicePixelRatio","appendChild","domElement","PerspectiveCamera","Scene","lights","AmbientLight","light1","DirectionalLight","light2","addLights","PlaneBufferGeometry","effects","btnAdd","querySelector","btnRemove","btnFlip","btnFinish","btnFloor","animate","addEventListener","onMouseDown","onTouchDown","onWheel","onKeyUp","onResize","onAdd","onRemove","onFlip","onFinish","onFloor","addGetWebGLMessage","snapshot","requestId","requestAnimationFrame","onDown","mx","startDragAngle","startDistance","setFromCamera","onMove","stopPropagation","preventDefault","move","diff","onUp","removeEventListener","event","delta","wheelDelta","detail","keyCode"],"mappings":"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","file":"app.min.js","sourcesContent":["/* global angular */\n\n(function () {\n    \"use strict\";\n\n    var app = angular.module('app', ['jsonFormatter']);\n\n}());\n/* global angular, window, document, console, TweenLite */\n\n(function () {\n    'use strict';\n\n    var DEBUG = {\n        HELPER: false,\n        JOINTS: false,\n        MODELS: true,\n        ANGLE: false,\n    };\n\n    var RAD = Math.PI / 180;\n    var SCALE = 0.025;\n    var I = 0;\n\n    function rad(degree) {\n        return degree * RAD;\n    }\n\n    var flipQuaternion = new THREE.Quaternion();\n    flipQuaternion.setFromAxisAngle(new THREE.Vector3(0, 1, 0), Math.PI);\n\n    var CombinerItem = function () {\n\n        function CombinerItem() {\n            var item = this;\n            item.size = new THREE.Vector3();\n            item.box = new THREE.Box3();\n            item.group = new THREE.Group();\n            item.outer = new THREE.Group();\n            item.inner = new THREE.Group();\n        }\n\n        CombinerItem.prototype = {\n            enter: enter,\n            load: load,\n            flip: flip,\n            getJoints: getJoints,\n            setFlip: setFlip,\n        };\n\n        function enter(callback) {\n            var item = this;\n            item.outer.position.x = item.size.x;\n            TweenLite.to(item.outer.position, 0.6, {\n                x: 0,\n                ease: Power2.easeOut,\n                overwrite: 'all',\n                // ease: Elastic.easeOut, \n                onComplete: function () {\n                    if (typeof callback === 'function') {\n                        callback();\n                    }\n                }\n            });\n        }\n\n        function flip(callback) {\n            var item = this,\n                inner = item.inner;\n            // console.log('flip()');\n            item.flipped = !item.flipped;\n            var animation = {\n                pow: item.flipped ? 0 : 1\n            };\n            TweenLite.to(animation, 0.3, {\n                pow: item.flipped ? 1 : 0,\n                ease: Power2.easeOut,\n                overwrite: 'all',\n                // ease: Elastic.easeOut,\n                onUpdate: function () {\n                    THREE.Quaternion.slerp(item.quaternionL, item.quaternionR, item.model.quaternion, animation.pow);\n                    item.model.position.lerpVectors(item.positionL, item.positionR, animation.pow);\n                },\n                onComplete: function () {\n                    // console.log('flipped');\n                    // item.setFlip();\n                    if (typeof callback === 'function') {\n                        callback();\n                    }\n                },\n            });\n            /*\n            TweenLite.to(inner.rotation, 0.3, {\n                y: item.flipped ? Math.PI : 0,\n                ease: Power2.easeOut,\n                overwrite: 'all',\n                // ease: Elastic.easeOut,\n                // onUpdate: function() { },\n                onComplete: function () {\n                    // console.log('flipped');\n                    item.setFlip();\n                    if (typeof callback === 'function') {\n                        callback();\n                    }\n                },\n            });\n            */\n        }\n\n        function getCentroid(vertices) {\n            var center = vertices.reduce(function (a, b) {\n                return {\n                    x: a.x + b.x,\n                    y: a.y + b.y,\n                    z: a.z + b.z\n                };\n            });\n            return new THREE.Vector3().add(center).divideScalar(vertices.length);\n        }\n\n        function getJoints(geometry, materials, size) {\n            var joints = {},\n                ids = {},\n                /*\n                diffs = [\n                    new THREE.Vector3(-size.x / 2, 0, 0), // left\n                    new THREE.Vector3(size.x / 2, 0, 0), // right\n                    new THREE.Vector3(0, -size.y / 2, 0), // top\n                    new THREE.Vector3(0, size.y / 2, 0), // bottom\n                ],\n                */\n                names = ['left', 'right', 'top', 'bottom'],\n                colors = [0xff0000, 0x00ff00, 0x0000ff, 0xffff00],\n                index, joint, face;\n            materials.filter(function (material, index) {\n                // console.log(material);\n                var i = names.indexOf(material.name);\n                if (i !== -1) {\n                    var joint = new THREE.Group();\n                    // joint.diff = diffs[i];\n                    joint.name = names[i];\n                    joint.color = colors[i];\n                    joint.vertices = [];\n                    joints[material.name] = joint;\n                    ids[index] = joint;\n                }\n            });\n            for (var i = 0; i < geometry.faces.length; i++) {\n                face = geometry.faces[i];\n                joint = ids[String(face.materialIndex)];\n                if (joint) {\n                    joint.normal = joint.normal || face.normal; // assume all faces point toward direction;\n                    joint.vertices.push(geometry.vertices[face.a]);\n                    joint.vertices.push(geometry.vertices[face.b]);\n                    joint.vertices.push(geometry.vertices[face.c]);\n                    // console.log(joint.name, joint.normal);\n                }\n            }\n            for (var key in joints) {\n                joint = joints[key];\n                joint.position.copy(getCentroid(joint.vertices));\n                joint.origin = joint.position.clone();\n                // joint.diff.sub(joint.position);\n                joint.vertices = null;\n            }\n            if (!joints.left) {\n                joints.left = new THREE.Group();\n                joints.left.position.set(-size.x / 2, 0, 0);\n                joints.left.origin = joints.left.position.clone();\n                joints.left.normal = new THREE.Vector3(-1, 0, 0);\n                joints.left.c = colors[0];\n            }\n            if (!joints.right) {\n                joints.right = new THREE.Group();\n                joints.right.position.set(size.x / 2, 0, 0);\n                joints.right.origin = joints.right.position.clone();\n                joints.right.normal = new THREE.Vector3(1, 0, 0);\n                joints.right.c = colors[1];\n            }\n            if (DEBUG.ANGLE) {\n                joints.right.normal.y += 0.2;\n            }\n            // console.log('item.getJoints', joints, size);\n            return joints;\n        }\n\n        function load(geometry, materials) {\n            var item = this,\n                box = item.box,\n                size = item.size,\n                group = item.group,\n                outer = item.outer,\n                inner = item.inner;\n            var minx = Number.POSITIVE_INFINITY,\n                maxx = Number.NEGATIVE_INFINITY;\n            for (var v = 0; v < geometry.vertices.length; v++) {\n                geometry.vertices[v].x *= SCALE;\n                geometry.vertices[v].y *= SCALE;\n                geometry.vertices[v].z *= SCALE;\n                minx = Math.min(minx, geometry.vertices[v].x);\n                maxx = Math.max(maxx, geometry.vertices[v].x);\n            }\n            // var buffergeometry = new THREE.BufferGeometry();\n            // buffergeometry.fromGeometry(geometry);\n            var dx = (maxx + minx) / 2;\n            inner.position.x = dx;\n            console.log(minx, maxx, dx);\n            var model = new THREE.Mesh(geometry, materials);\n            box.setFromObject(model);\n            box.getSize(size);\n            var joints = item.getJoints(geometry, materials, size);\n            item.quaternionL = model.quaternion.clone();\n            var quaternionD = new THREE.Quaternion().setFromUnitVectors(joints.left.normal.clone().multiplyScalar(-1), joints.right.normal);\n            item.quaternionR = new THREE.Quaternion().multiplyQuaternions(item.quaternionL, flipQuaternion).multiply(quaternionD.inverse());\n            item.positionL = new THREE.Vector3();\n            item.positionR = joints.left.origin.clone().sub(joints.right.origin.clone().applyQuaternion(item.quaternionR));\n            model.geometry.mergeVertices();\n            THREE.GeometryUtils.computeVertexNormals(model.geometry, 20);\n            // model.geometry.computeFaceNormals();\n            // model.geometry.computeVertexNormals();\n            model.geometry.verticesNeedUpdate = true;\n            model.geometry.uvsNeedUpdate = true;\n            // setEdges\n            model.geometry = Curvature.setEdges(model.geometry);\n            /*\n            // setGeometry\n            model.geometry = new THREE.BufferGeometry().fromGeometry(model.geometry);\n            Curvature.setGeometry(model.geometry);\n            */\n            // model.geometry.mergeVertices();\n            // model.geometry.computeFaceNormals();\n            // model.geometry.normalsNeedUpdate = true;\n            // model.geometry.uvsNeedUpdate = true;\n            // model.geometry.computeMorphNormals();\n            /*           \n            model.geometry.computeFaceNormals();\n            model.geometry.computeVertexNormals();\n            model.geometry.computeBoundingBox();\n            */\n            // console.log(model);\n            if (DEBUG.MODELS) {\n                // geometry = new THREE.CylinderGeometry(2, 2, 10, 10);            \n                materials[1].color = new THREE.Color(0x000000);\n                geometry = new THREE.BoxGeometry(size.x, size.y, size.z);\n                var material = new THREE.MeshStandardMaterial({\n                    color: new THREE.Color(0.2 * ++I, 0, 0),\n                    wireframe: false,\n                    transparent: false,\n                    opacity: 1.0,\n                });\n                model = new THREE.Mesh(geometry, material);\n            }\n            for (var key in joints) {\n                var joint = joints[key];\n                var x = joint.normal.x,\n                    y = joint.normal.y,\n                    z = -joint.normal.z;\n                var euler = new THREE.Euler(\n                    0,\n                    Math.atan2(z, x),\n                    Math.atan2(y, Math.sqrt(x * x + z * z))\n                );\n                joint.rotation.copy(euler);\n                model.add(joint);\n                // joint.oquaternion = new THREE.Quaternion().multiplyQuaternions(joint.quaternion, flipQuaternion);\n                if (DEBUG.JOINTS) {\n                    var helper = new THREE.Mesh(\n                        new THREE.BoxGeometry(0.1, 0.1, 0.1),\n                        new THREE.MeshBasicMaterial({\n                            color: joint.color,\n                        })\n                    );\n                    joint.add(helper);\n                    /*\n                    var s = size.x / 10;\n                    var arrow = new THREE.ArrowHelper(new THREE.Vector3(1, 0, 0), new THREE.Vector3(), s, joint.color, s / 2, s / 2);\n                    joint.add(arrow);\n                    */\n                }\n            }\n            inner.position.set(size.x / 2 - dx, 0, 0);\n            inner.add(model);\n            outer.add(inner);\n            group.add(outer);\n            item.joints = joints;\n            item.model = model;\n        }\n\n        function setFlip() {\n            var item = this,\n                model = item.model;\n            // THREE.Quaternion.slerp(item.quaternionL, item.quaternionR, item.model.quaternion, item.flipped ? 1 : 0);\n            model.quaternion.copy(item.flipped ? item.quaternionR : item.quaternionL);\n            model.position.copy(item.flipped ? item.positionR : item.positionL);\n            item.group.updateMatrixWorld();\n            /*\n            var position = new THREE.Vector3();\n            if (item.flipped) {\n                // model.quaternion.copy(item.joints.right.quaternion.conjugate());\n                // item.joints.right.localToWorld(position);\n                // item.pivot.worldToLocal(position);\n                // item.model.setRotationFromQuaternion(item.joints.right.quaternion.conjugate());\n                // item.model.position.set(0, 0, 0).sub(item.joints.right.origin);\n                // position.x -= item.size.x / 2;\n                // item.model.quaternion.setFromUnitVectors(item.joints.left.normal, item.joints.right.normal);\n            } else {\n                // model.quaternion.copy(item.joints.left.quaternion.conjugate());\n                // item.joints.left.localToWorld(position);\n                // item.pivot.worldToLocal(position);\n                // item.model.setRotationFromQuaternion(item.joints.left.quaternion.conjugate());\n                // item.model.position.set(0, 0, 0).sub(item.joints.left.origin);\n                // position.x += item.size.x / 2;\n                // item.model.setRotationFromQuaternion(new THREE.Quaternion());\n            }\n            item.model.updateMatrixWorld();\n            // console.log('setFlip', item.flipped, item.joints.left.quaternion);\n            */\n        }\n\n        return CombinerItem;\n\n    }();\n\n    var Combiner = function () {\n\n        function Combiner(scene) {\n            var combiner = this;\n            combiner.flags = {\n                rotate: false,\n            };\n            combiner.scene = scene;\n            combiner.flipping = 0;\n            combiner.entering = 0;\n            combiner.items = [];\n            combiner.hittables = [];\n            combiner.center = new THREE.Vector3();\n            combiner.size = new THREE.Vector3();\n            combiner.group = new THREE.Group();\n            combiner.box = new THREE.Box3();\n            if (DEBUG.HELPER) {\n                combiner.boxhelper = new THREE.Box3Helper(combiner.box, 0xff00ff);\n                combiner.originhelper = new THREE.Mesh(\n                    new THREE.BoxGeometry(0.1, 0.1, 0.1),\n                    new THREE.MeshBasicMaterial({\n                        color: 0xaa00ff\n                    })\n                );\n                combiner.centerhelper = new THREE.Mesh(\n                    new THREE.BoxGeometry(0.1, 0.1, 0.1),\n                    new THREE.MeshBasicMaterial({\n                        color: 0xff00ff\n                    })\n                );\n                combiner.group.add(combiner.originhelper);\n                scene.add(combiner.boxhelper);\n                scene.add(combiner.centerhelper);\n            }\n            scene.add(combiner.group);\n        }\n\n        Combiner.prototype = {\n            add: add,\n            adjust: adjust,\n            busy: busy,\n            combine: combine,\n            fit: fit,\n            flip: flip,\n            flipItem: flipItem,\n            hitAndFlip: hitAndFlip,\n            prev: prev,\n            pop: pop,\n            next: next,\n            remove: remove,\n            rotate: rotate,\n            select: select,\n            selectedItem: selectedItem,\n            selectedModel: selectedModel,\n            unselect: unselect,\n            update: update,\n        };\n\n        function add(geometry, materials) {\n            var combiner = this,\n                box = combiner.box,\n                size = combiner.size,\n                items = combiner.items,\n                hittables = combiner.hittables,\n                group = combiner.group;\n\n            combiner.unselect();\n            var item = new CombinerItem();\n            item.load(geometry, materials);\n            items.push(item);\n            combiner.hittables = items.map(function (item) {\n                return item.model;\n            });\n            group.add(item.group);\n            item.setFlip();\n            combiner.adjust();\n            return item;\n        }\n\n        function adjust() {\n            var combiner = this;\n            combiner.combine();\n            combiner.fit();\n            // combiner.fitCamera();\n        }\n\n        function busy() {\n            var combiner = this;\n            return combiner.entering || combiner.flipping;\n        }\n\n        function combine() {\n            var combiner = this,\n                items = combiner.items,\n                group = combiner.group;\n            // var quaternionL = new THREE.Quaternion();\n            var quaternionR = new THREE.Quaternion();\n            var positionL = new THREE.Vector3();\n            var positionR = new THREE.Vector3();\n            var left, right;\n            // var groupPosition = new THREE.Vector3();\n            // var lquaternion;\n\n            function combineItem(item, i) {\n                if (item.flipped) {\n                    // lquaternion = item.joints.right.quaternion;\n                    left = item.joints.right;\n                    right = item.joints.left;\n                } else {\n                    // lquaternion = item.joints.left.oquaternion;\n                    left = item.joints.left;\n                    right = item.joints.right;\n                }\n                if (i > 0) {\n                    //\n                    item.group.setRotationFromQuaternion(quaternionR);\n                    item.group.position.copy(positionR);\n                    //\n                    // positionL = left.position.clone();\n                    // item.model.localToWorld(positionL);\n                    // \n                    if (false) {\n                        left.getWorldPosition(positionL);\n                        item.group.worldToLocal(positionL);\n                        item.group.position.sub(positionL);\n                    }\n                    //\n                    // console.log('left.position', positionL);\n                    // item.group.position.set(0, 0, 0);\n                    // left.getWorldQuaternion(quaternionL);\n                    /*\n                    positionR.sub(groupPosition);\n                    item.group.position.copy(positionR);\n                    // item.group.setRotationFromQuaternion(quaternionR.multiply(lquaternion));\n                    item.group.setRotationFromQuaternion(quaternionR);\n                    */\n                }\n                //} else {\n                //    item.group.rotation.z = rad(30);\n                //}\n                // console.log(left.origin);\n                // right.updateMatrixWorld();\n                right.getWorldQuaternion(quaternionR);\n                right.getWorldPosition(positionR);\n            }\n            if (items.length) {\n                // group.getWorldPosition(groupPosition);\n                items.filter(combineItem);\n            }\n        }\n\n        function fit() {\n            var combiner = this,\n                box = combiner.box,\n                size = combiner.size,\n                center = combiner.center,\n                centerhelper = combiner.centerhelper,\n                group = combiner.group;\n            box.setFromObject(group);\n            box.getCenter(center);\n            box.getSize(size);\n            if (DEBUG.HELPER) {\n                centerhelper.position.copy(center);\n            }\n            /*\n            group.worldToLocal(center);\n            group.position.x = -center.x;\n            group.position.y = -center.y;\n            group.position.z = -center.z;\n            */\n            return size;\n        }\n\n        function flip(callback) {\n            var combiner = this;\n            if (combiner.selection) {\n                combiner.flipItem(combiner.selection.item, callback);\n            }\n        }\n\n        function flipItem(item, callback) {\n            var combiner = this;\n            combiner.flipping++;\n            item.flip(function () {\n                combiner.flipping--;\n                combiner.adjust();\n                // combiner.unselect(); ???\n                if (typeof (callback) === 'function') {\n                    setTimeout(function () {\n                        callback();\n                    }, 100);\n                }\n            });\n        }\n\n        function hitAndFlip(raycaster, callback) {\n            var combiner = this,\n                items = combiner.items,\n                hittables = combiner.hittables;\n            var hitted = raycaster.intersectObjects(hittables);\n            if (hitted.length) {\n                var index = hittables.indexOf(hitted[0].object);\n                var item = items[index];\n                combiner.flipItem(item, callback);\n            }\n        }\n\n        function next() {\n            var combiner = this,\n                items = combiner.items;\n            var selection = null;\n\n            if (items.length) {\n                var index = combiner.selection ? combiner.selection.index : -1;\n                index = index + 1 >= items.length ? 0 : index + 1;\n                var item = items[index];\n                var rotation = item.outer.rotation.clone();\n                selection = {\n                    index: index,\n                    item: item,\n                    rotation: rotation,\n                };\n                combiner.selection = selection;\n            }\n            return selection;\n        }\n\n        function pop() {\n            var combiner = this,\n                items = combiner.items,\n                hittables = combiner.hittables,\n                group = combiner.group;\n            if (items.length) {\n                var item = items.pop();\n                if (item.group.parent) {\n                    group.remove(item.group);\n                }\n                combiner.hittables = items.map(function (item) {\n                    return item.model;\n                });\n                combiner.adjust();\n                return item;\n            }\n        }\n\n        function prev() {\n            var combiner = this,\n                items = combiner.items;\n            var selection = null;\n\n            if (items.length) {\n                var index = combiner.selection ? combiner.selection.index : 0;\n                index = index - 1 < 0 ? items.length - 1 : index - 1;\n                var item = items[index];\n                var rotation = item.outer.rotation.clone();\n                selection = {\n                    index: index,\n                    item: item,\n                    rotation: rotation,\n                };\n                combiner.selection = selection;\n            }\n            return selection;\n        }\n\n        function remove() {\n            var combiner = this,\n                items = combiner.items,\n                hittables = combiner.hittables,\n                group = combiner.group;\n            if (combiner.selection) {\n                var selection = combiner.selection;\n                var item = selection.item;\n                items.splice(selection.index, 1);\n                if (item.group.parent) {\n                    group.remove(item.group);\n                }\n                combiner.hittables = items.map(function (item) {\n                    return item.model;\n                });\n                combiner.unselect();\n                combiner.adjust();\n                if (items.length > selection.index) {\n                    combiner.entering++;\n                    items[selection.index].enter(function () {\n                        combiner.entering--;\n                    });\n                }\n                return item;\n            } else {\n                return combiner.pop();\n            }\n        }\n\n        function rotate(y) {\n            var combiner = this;\n            combiner.selection.item.outer.rotation.x = combiner.selection.rotation.x + y;\n            combiner.selection.item.group.updateMatrixWorld();\n            combiner.adjust();\n        }\n\n        function select(raycaster) {\n            var combiner = this,\n                items = combiner.items,\n                hittables = combiner.hittables;\n\n            combiner.unselect();\n            var hitted = raycaster.intersectObjects(hittables);\n            var selection = null;\n            if (hitted.length) {\n                var index = hittables.indexOf(hitted[0].object);\n                var item = items[index];\n                var rotation = item.outer.rotation.clone();\n                /*\n                item.outline(true, combiner.library);\n                // item.model.material.emissive = new THREE.Color(0x888888);\n                */\n                // item.model.material.needsUpdate = true;\n                selection = {\n                    index: index,\n                    item: item,\n                    rotation: rotation,\n                };\n                combiner.selection = selection;\n            }\n            return selection;\n        }\n\n        function selectedItem(callback) {\n            var combiner = this;\n            if (combiner.selection && typeof callback === 'function') {\n                callback(combiner.selection.item);\n            }\n        }\n\n        function selectedModel(callback) {\n            var combiner = this;\n            if (combiner.selection && typeof callback === 'function') {\n                callback(combiner.selection.item.model);\n            }\n        }\n\n        function unselect() {\n            var combiner = this;\n            if (combiner.selection) {\n                /*\n                combiner.selection.item.outline(false, combiner.library);\n                // combiner.selection.item.model.material.emissive = new THREE.Color(0x000000);\n                */\n                // combiner.selection.item.model.material.needsUpdate = true;\n                combiner.selection = null;\n            }\n        }\n\n        function update() {\n            var combiner = this,\n                flags = combiner.flags;\n            if (!combiner.busy()) {\n                if (flags.rotate) {\n                    if (combiner.items.length) {\n                        var first = combiner.items[0];\n                        first.outer.rotation.x += 0.01;\n                        combiner.adjust();\n                    }\n                } else {\n                    // combiner.combine();\n                    combiner.fit();\n                }\n            }\n        }\n\n        return Combiner;\n\n    }();\n\n    window.Combiner = Combiner;\n\n    var app = angular.module('app');\n\n    app.factory('Combiner', [function () {\n        return Combiner;\n    }]);\n\n}());\n/* global angular, window, document, console, TweenLite */\n\n(function () {\n    'use strict';\n\n    var Curvature = function () {\n\n        function Curvature() {\n\n        }\n\n        // statics\n        Curvature.setGeometry = setGeometry;\n        Curvature.setEdges = setEdges;\n\n        function setGeometry(geometry) {\n            // geometry.center();\n            var i, positions, normals, px, py, pz, nx, ny, nz, sx, sy, sz, pyx, pyz, pzx, nyx, nyz, nzx, yx, yz, zx, xy, zy, xz;\n            var dict = {};\n            positions = geometry.attributes.position.array;\n            normals = geometry.attributes.normal.array;\n            for (i = 0; i < geometry.attributes.position.count; i += 3) {\n                px = new THREE.Vector3(positions[3 * i], positions[3 * i + 1], positions[3 * i + 2]);\n                py = new THREE.Vector3(positions[3 * (i + 1)], positions[3 * (i + 1) + 1], positions[3 * (i + 1) + 2]);\n                pz = new THREE.Vector3(positions[3 * (i + 2)], positions[3 * (i + 2) + 1], positions[3 * (i + 2) + 2]);\n                nx = new THREE.Vector3(normals[3 * i], normals[3 * i + 1], normals[3 * i + 2]).normalize();\n                ny = new THREE.Vector3(normals[3 * (i + 1)], normals[3 * (i + 1) + 1], normals[3 * (i + 1) + 2]).normalize();\n                nz = new THREE.Vector3(normals[3 * (i + 2)], normals[3 * (i + 2) + 1], normals[3 * (i + 2) + 2]).normalize();\n                sx = px.toArray().toString();\n                sy = py.toArray().toString();\n                sz = pz.toArray().toString();\n                pyx = new THREE.Vector3().subVectors(py, px);\n                pyz = new THREE.Vector3().subVectors(py, pz);\n                pzx = new THREE.Vector3().subVectors(pz, px);\n                nyx = new THREE.Vector3().subVectors(ny, nx);\n                nyz = new THREE.Vector3().subVectors(ny, nz);\n                nzx = new THREE.Vector3().subVectors(nz, nx);\n                yx = ny.dot(pyx.normalize());\n                yz = ny.dot(pyz.normalize());\n                zx = nz.dot(pzx.normalize());\n                xy = -nx.dot(pyx.normalize());\n                zy = -nz.dot(pyz.normalize());\n                xz = -nx.dot(pzx.normalize());\n                dict[sx] = dict[sx] || {};\n                dict[sx][sy] = xy;\n                dict[sx][sz] = xz;\n                dict[sy] = dict[sy] || {};\n                dict[sy][sx] = yx;\n                dict[sy][sz] = yz;\n                dict[sz] = dict[sz] || {};\n                dict[sz][sx] = zx;\n                dict[sz][sy] = zy;\n            }\n\n            var curvatures = {};\n            var min = 1000,\n                max = 0;\n\n            Object.keys(dict).forEach(function (key) {\n                curvatures[key] = average(dict[key]);\n            });\n\n            /*\n            var smoothed = Object.create(curvatures);\n            Object.keys(dict).forEach(function (key) {\n                var count = 0;\n                var sum = 0;\n                Object.keys(dict[key]).forEach(function (key2) {\n                    sum += smoothed[key2];\n                    count++;\n                });\n                smoothed[key] = sum / count;\n            });\n            curvatures = smoothed;\n            */\n\n            Object.keys(curvatures).forEach(function (key) {\n                var val = Math.abs(curvatures[key]);\n                if (val < min) min = val;\n                if (val > max) max = val;\n            });\n\n            var range = (max - min);\n            console.log('range', range);\n\n            Object.keys(curvatures).forEach(function (key) {\n                var val = Math.abs(curvatures[key]);\n                if (curvatures[key] < 0) {\n                    curvatures[key] = (min - val) / range;\n                } else {\n                    curvatures[key] = (val - min) / range;\n                }\n            });\n\n            var attribute = new Float32Array(geometry.attributes.position.count);\n\n            var p, s, f;\n            for (i = 0; i < geometry.attributes.position.count; i++) {\n                positions = geometry.attributes.position.array;\n                p = new THREE.Vector3(positions[3 * i], positions[3 * i + 1], positions[3 * i + 2]);\n                s = p.toArray().toString();\n                f = curvatures[s];\n                f = THREE.Math.clamp(THREE.Math.smoothstep(f, 0.0, 1.0) * 2.0, 0.0, 1.0);\n                attribute[i] = f;\n            }\n\n            geometry.addAttribute('curvature', new THREE.BufferAttribute(attribute, 1));\n        }\n\n        function setEdges(geometry, angleThresold) {\n            angleThresold = angleThresold || 95;\n\n            var faces = geometry.faces,\n                vertices = geometry.vertices,\n                face, centroid;\n            geometry = new THREE.BufferGeometry().fromGeometry(geometry);\n            var dEdge = {},\n                edge, key, i, ia, ib, ic, va, vb, vc, pa, pb, pc, sa, sb, sc, na, nb, nc, ma, mb,\n                dot, cross, angle;\n            var positions = geometry.attributes.position.array;\n            var normals = geometry.attributes.normal.array;\n\n            function addKey(ia, ib, sa, sb, pa, pb, i, ca) {\n                ma = Math.min(ia, ib); // minimun vertex index\n                mb = Math.max(ia, ib); // maximum vertex index\n                key = ma + '-' + mb;\n                if (dEdge[key] === undefined) {\n                    dEdge[key] = {\n                        sa: sa, // string key vertex a\n                        sb: sb, // string key vertex b\n                        na: pa, // index normal a\n                        ca: ca, // centroid face a\n                        fa: i, // index face a\n                        fb: undefined\n                    };\n                } else {\n                    dEdge[key].nb = pa; // index normal b (pa or pb should be indifferently)\n                    dEdge[key].fb = i; // index face b\n                    dEdge[key].cb = ca; // centroid face b\n                }\n            }\n\n            for (var f = 0; f < faces.length; f++) {\n                face = faces[f];\n                centroid = THREE.FaceUtils.computeCentroid(face, vertices);\n                // vertex indices\n                ia = face.a;\n                ib = face.b;\n                ic = face.c;\n                // vertices\n                va = vertices[ia];\n                vb = vertices[ib];\n                vc = vertices[ic];\n                // dVert keys\n                sa = va.toArray().toString();\n                sb = vb.toArray().toString();\n                sc = vc.toArray().toString();\n                i = f * 9; // position face index                \n                pa = i; // position vert a index\n                pb = i + 3; // position vert b index\n                pc = i + 6; // position vert c index\n                // dEdge keys\n                addKey(ia, ib, sa, sb, pa, pb, i, centroid); // key edge a-b\n                addKey(ib, ic, sb, sc, pb, pc, i, centroid); // key edge b-c\n                addKey(ic, ia, sc, sa, pc, pa, i, centroid); // key edge c-a\n            }\n\n            var curvatures = new Array(geometry.attributes.position.count).fill(0.0);\n\n            var edges = Object.keys(dEdge);\n            var matches = 0;\n\n            var dVert = {};\n\n            for (key in dEdge) {\n                edge = dEdge[key];\n                if (edge.nb) {\n                    na = edge.na;\n                    nb = edge.nb;\n                    va = new THREE.Vector3(normals[na], normals[na + 1], normals[na + 2]);\n                    // vb = new THREE.Vector3(normals[nb], normals[nb + 1], normals[nb + 2]);\n                    vb = new THREE.Vector3().subVectors(edge.cb, edge.ca).normalize();\n                    dot = va.dot(vb);\n                    angle = Math.acos(dot) * THREE.Math.RAD2DEG;\n                    if (angle >= angleThresold) {\n                        sa = edge.sa;\n                        sb = edge.sb;\n                        dVert[sa] = dot;\n                        dVert[sb] = dot;\n                        matches++;\n                    }\n                }\n            }\n\n            // apply curvature\n            for (i = 0; i < curvatures.length; i++) {\n                va = new THREE.Vector3(positions[3 * i], positions[3 * i + 1], positions[3 * i + 2]);\n                sa = va.toArray().toString();\n                curvatures[i] = dVert[sa];\n            }\n\n            var averages = new Array(curvatures.length);\n            var min = 10,\n                max = 0,\n                mid, abs;\n\n            for (i = 0; i < curvatures.length; i += 3) {\n                mid = (curvatures[i] + curvatures[i + 1] + curvatures[i + 2]) / 3;\n                abs = Math.abs(mid);\n                min = Math.min(min, abs);\n                max = Math.max(max, abs);\n                averages[i] = mid;\n                averages[i + 1] = mid;\n                averages[i + 2] = mid;\n            }\n\n            var range = (max - min);\n            for (i = 0; i < averages.length; i++) {\n                mid = averages[i];\n                abs = Math.abs(mid);\n                if (mid < 0) {\n                    averages[i] = (min - abs) / range;\n                } else {\n                    averages[i] = (abs - min) / range;\n                }\n            }\n\n            curvatures = new Float32Array(curvatures); // averages\n            geometry.addAttribute('curvature', new THREE.BufferAttribute(curvatures, 1));\n            console.log('faces', faces.length, 'vertex', geometry.attributes.position.count);\n            console.log('edges', edges.length, 'matches', matches, (matches / edges.length * 100).toFixed(2) + '%', 'angle', angleThresold + '°');\n\n            // faces 13754 vertex 41262\n            // edges 20368 matches 3089 15.17% angle 95° \n            return geometry;\n        }\n\n        function setEdges1(geometry, minThresholdAngle, maxThresholdAngle) {\n            var min = minThresholdAngle || 265,\n                max = maxThresholdAngle || 275;\n            /*\n            var convexMinDot = Math.cos(THREE.Math.DEG2RAD * (minThresholdAngle || 265));\n            var convexMaxDot = Math.cos(THREE.Math.DEG2RAD * (maxThresholdAngle || 275));\n            var convexMinDotNeg = Math.cos(THREE.Math.DEG2RAD * (minThresholdAngle || 265) - 180);\n            var convexMaxDotNeg = Math.cos(THREE.Math.DEG2RAD * (maxThresholdAngle || 275) - 180);\n            */\n\n            var faces = geometry.faces,\n                vertices = geometry.vertices,\n                face, vert;\n            geometry = new THREE.BufferGeometry().fromGeometry(geometry);\n            var dEdge = {},\n                edge, key, i, ia, ib, ic, va, vb, vc, pa, pb, pc, sa, sb, sc, na, nb, nc, ma, mb,\n                dot, cross, angle;\n            var positions = geometry.attributes.position.array;\n            var normals = geometry.attributes.normal.array;\n\n            function addKey(ia, ib, sa, sb, pa, pb, i) {\n                ma = Math.min(ia, ib); // minimun vertex index\n                mb = Math.max(ia, ib); // maximum vertex index\n                key = ma + '-' + mb;\n                if (dEdge[key] === undefined) {\n                    dEdge[key] = {\n                        sa: sa, // string key vertex a\n                        sb: sb, // string key vertex b\n                        na: pa, // index normal a\n                        fa: i, // index face a\n                        fb: undefined\n                    };\n                } else {\n                    dEdge[key].nb = pa; // index normal b (pa or pb should be indifferently)\n                    dEdge[key].fb = i; // index face b\n                }\n            }\n\n            for (var f = 0; f < faces.length; f++) {\n                face = faces[f];\n                // vertex indices\n                ia = face.a;\n                ib = face.b;\n                ic = face.c;\n                // vertices\n                va = vertices[ia];\n                vb = vertices[ib];\n                vc = vertices[ic];\n                // dVert keys\n                sa = va.toArray().toString();\n                sb = vb.toArray().toString();\n                sc = vc.toArray().toString();\n                i = f * 9; // position face index                \n                pa = i; // position vert a index\n                pb = i + 3; // position vert b index\n                pc = i + 6; // position vert c index\n                // dEdge keys\n                addKey(ia, ib, sa, sb, pa, pb, i); // key edge a-b\n                addKey(ib, ic, sb, sc, pb, pc, i); // key edge b-c\n                addKey(ic, ia, sc, sa, pc, pa, i); // key edge c-a\n            }\n\n            var curvatures = new Array(geometry.attributes.position.count).fill(0.0);\n            curvatures = new Float32Array(curvatures);\n\n            var edges = Object.keys(dEdge);\n            var matches = 0;\n\n            var dVert = {};\n\n            for (key in dEdge) {\n                edge = dEdge[key];\n                if (edge.nb) {\n                    na = edge.na;\n                    nb = edge.nb;\n                    va = new THREE.Vector3(normals[na], normals[na + 1], normals[na + 2]);\n                    vb = new THREE.Vector3(normals[nb], normals[nb + 1], normals[nb + 2]);\n                    dot = va.dot(vb);\n                    angle = Math.acos(dot) * THREE.Math.RAD2DEG;\n                    cross = new THREE.Vector3().crossVectors(va, vb);\n                    if (cross.x < 0 || cross.y < 0 || cross.z < 0) {\n                        angle += 180;\n                    }\n                    if (angle >= min && angle <= max) {\n                        sa = edge.sa;\n                        sb = edge.sb;\n                        dVert[sa] = dot;\n                        dVert[sb] = dot;\n                    }\n                }\n            }\n            // apply curvature\n            for (i = 0; i < curvatures.length; i++) {\n                va = new THREE.Vector3(positions[3 * i], positions[3 * i + 1], positions[3 * i + 2]);\n                sa = va.toArray().toString();\n                curvatures[i] = dVert[sa];\n            }\n            geometry.addAttribute('curvature', new THREE.BufferAttribute(curvatures, 1));\n            console.log('faces', faces.length, 'vertex', geometry.attributes.position.count);\n            console.log('edges', edges.length, 'matches', matches, (matches / edges.length * 100).toFixed(2) + '%');\n\n            // faces 13754 vertex 41262\n            // edges 20368 matches 0 0.00%\n            return geometry;\n        }\n\n        function setEdges2(geometry, thresholdAngle) {\n            thresholdAngle = thresholdAngle || 90;\n            var thresholdDot = Math.cos(THREE.Math.DEG2RAD * thresholdAngle);\n\n            var faces = geometry.faces,\n                face;\n            geometry = new THREE.BufferGeometry().fromGeometry(geometry);\n            var dEdge = {},\n                edge, key, ea, eb, i, ia, ib, ic, va, vb, vc, na, nb, nc;\n            // var positions = geometry.attributes.position.array;\n            var normals = geometry.attributes.normal.array;\n\n            function addKey(va, vb, ia, ib, i) {\n                ea = Math.min(va, vb);\n                eb = Math.max(va, vb);\n                key = ea + '-' + eb;\n                if (dEdge[key] === undefined) {\n                    dEdge[key] = {\n                        a: ia,\n                        b: ib,\n                        c: ia,\n                        d: ib,\n                        fa: i,\n                        fb: undefined\n                    };\n                } else {\n                    dEdge[key].fb = i;\n                    dEdge[key].c = ia;\n                    dEdge[key].d = ib;\n                }\n            }\n            for (var f = 0; f < faces.length; f++) {\n                face = faces[f];\n                i = f * 9;\n                va = face.a;\n                vb = face.b;\n                vc = face.c;\n                ia = i;\n                ib = i + 3;\n                ic = i + 6;\n                addKey(va, vb, ia, ib, i);\n                addKey(vb, vc, ib, ic, i);\n                addKey(vc, va, ic, ia, i);\n            }\n\n            var attribute = new Float32Array(geometry.attributes.position.count);\n            for (i = 0; i < geometry.attributes.position.count; i++) {\n                attribute[i] = 1.0;\n            }\n            var edges = Object.keys(dEdge);\n            console.log(edges.length);\n            var matches = 0;\n\n            function fillEdge(e) {\n                attribute[e.a / 3] = 0.0;\n                attribute[e.b / 3] = 0.0;\n                attribute[e.c / 3] = 0.0;\n                attribute[e.d / 3] = 0.0;\n                matches++;\n            }\n            for (key in dEdge) {\n                edge = dEdge[key];\n                if (edge.fb === undefined) {\n                    fillEdge(edge);\n                } else {\n                    ia = edge.fa;\n                    ib = edge.fb;\n                    na = new THREE.Vector3(normals[ia], normals[ia + 1], normals[ia + 2]);\n                    nb = new THREE.Vector3(normals[ib], normals[ib + 1], normals[ib + 2]);\n                    if (na.dot(nb) <= thresholdDot) {\n                        fillEdge(edge);\n                    }\n                }\n            }\n            geometry.addAttribute('curvature', new THREE.BufferAttribute(attribute, 1));\n            console.log('matches', matches, (matches / edges.length * 100).toFixed(2));\n            return geometry;\n        }\n\n        function setEdges3(geometry, thresholdAngle) {\n            thresholdAngle = thresholdAngle || 90;\n            var thresholdDot = Math.cos(THREE.Math.DEG2RAD * thresholdAngle);\n            var edge = [0, 0],\n                dEdge = {},\n                edge1, edge2;\n            var key, keys = ['a', 'b', 'c'];\n            /*\n            var geometry2;\n            if (geometry.isBufferGeometry) {\n                geometry2 = new THREE.Geometry();\n                geometry2.fromBufferGeometry(geometry);\n            } else {\n                geometry2 = geometry.clone();\n            }\n            */\n            // geometry2.mergeVertices();\n            // geometry2.computeFaceNormals();\n            var faces = geometry.faces;\n            // now create a data structure where each entry represents an edge with its adjoining faces\n            for (var i = 0; i < faces.length; i++) {\n                var face = faces[i];\n                for (var j = 0; j < 3; j++) {\n                    edge1 = face[keys[j]];\n                    edge2 = face[keys[(j + 1) % 3]];\n                    edge[0] = Math.min(edge1, edge2);\n                    edge[1] = Math.max(edge1, edge2);\n                    key = edge[0] + ',' + edge[1];\n                    if (dEdge[key] === undefined) {\n                        dEdge[key] = {\n                            a: edge[0],\n                            b: edge[1],\n                            fa: i,\n                            fb: undefined\n                        };\n                    } else {\n                        dEdge[key].fb = i;\n                    }\n                }\n            }\n            var vertices = geometry.vertices;\n            var attribute = new Float32Array(vertices.length * 3);\n            for (var i = 0; i < vertices.length * 3; i++) {\n                attribute[i] = 1.0;\n            }\n            var edges = Object.keys(dEdge);\n            console.log(edges.length);\n            var matches = 0;\n            for (key in dEdge) {\n                var e = dEdge[key];\n                // an edge is only rendered if the angle (in degrees) between the face normals of the adjoining faces exceeds this value. default = 1 degree.\n                if (e.fb === undefined || faces[e.fa].normal.dot(faces[e.fb].normal) <= thresholdDot) {\n                    /*\n                    var vertex = vertices[e.a];\n                    vertices.push(vertex.x, vertex.y, vertex.z);\n                    vertex = vertices[e.b];\n                    vertices.push(vertex.x, vertex.y, vertex.z);\n                    */\n                    attribute[e.a * 3] = 0.0;\n                    attribute[e.a * 3 + 1] = 0.0;\n                    attribute[e.a * 3 + 2] = 0.0;\n                    attribute[e.b * 3] = 0.0;\n                    attribute[e.b * 3 + 1] = 0.0;\n                    attribute[e.b * 3 + 2] = 0.0;\n                    matches++;\n                }\n            }\n            console.log(geometry.normals.length);\n            console.log('matches', matches, (matches / edges.length * 100).toFixed(2));\n            geometry = new THREE.BufferGeometry().fromDirectGeometry(geometry);\n            geometry.addAttribute('curvature', new THREE.BufferAttribute(attribute, 1));\n            console.log('verts', vertices.length, geometry.attributes.position.count);\n            // build geometry\n            // this.addAttribute('position', new Float32BufferAttribute(vertices, 3));\n            return geometry;\n        }\n\n        function average(dict) {\n            var sum = 0;\n            var length = 0;\n            Object.keys(dict).forEach(function (key) {\n                sum += dict[key];\n                length++;\n            });\n            return sum / length;\n        }\n\n        function filterConcave(curvature) {\n            for (var i = 0; i < curvature.length; i++) {\n                curvature[i] = Math.abs(THREE.Math.clamp(curvature[i], -1, 0));\n            }\n        }\n\n        function filterConvex(curvature) {\n            for (var i = 0; i < curvature.length; i++) {\n                curvature[i] = THREE.Math.smoothstep(curvature[i], 0.0, 0.7);\n                // curvature[i] = THREE.Math.clamp(curvature[i], 0, 1);\n            }\n        }\n\n        function filterBoth(curvature) {\n            for (var i = 0; i < curvature.length; i++) {\n                curvature[i] = Math.abs(curvature[i]);\n            }\n        }\n\n        return Curvature;\n\n    }();\n\n    window.Curvature = Curvature;\n\n    var app = angular.module('app');\n\n    app.factory('Curvature', [function () {\n        return Curvature;\n    }]);\n\n}());\n/* global angular, window, document, console, TweenLite */\n\n(function () {\n    'use strict';\n\n    var Effects = function () {\n\n        function Effects(scene, camera, renderer, w, h) {\n            var effects = this;\n            //\n            var renderPass = new THREE.RenderPass(scene, camera);\n            //\n            var outlinePass = new THREE.OutlinePass(new THREE.Vector2(w, h), scene, camera);\n            outlinePass.visibleEdgeColor.set(0x00ff00);\n            outlinePass.hiddenEdgeColor.set(0x000000);\n            outlinePass.edgeStrength = 5.0;\n            outlinePass.edgeGlow = 0.0;\n            outlinePass.edgeThickness = 1.0;\n            outlinePass.pulsePeriod = 2;\n            outlinePass.rotate = false;\n            outlinePass.usePatternTexture = false;\n            //\n            var fxaaPass = new THREE.ShaderPass(THREE.FXAAShader);\n            fxaaPass.uniforms.resolution.value.set(1 / w, 1 / h);\n            fxaaPass.renderToScreen = true;\n            //\n            var composer = new THREE.EffectComposer(renderer);\n            composer.addPass(renderPass);\n            composer.addPass(outlinePass);\n            composer.addPass(fxaaPass);\n            //\n            effects.renderPass = renderPass;\n            effects.outlinePass = outlinePass;\n            effects.fxaaPass = fxaaPass;\n            effects.composer = composer;\n        }\n\n        Effects.prototype = {\n            update: update,\n            resize: resize,\n            select: select,\n            unselect: unselect,\n        };\n\n        function update() {\n            var effects = this;\n            effects.composer.render();\n        }\n\n        function resize(w, h) {\n            var effects = this;\n            effects.composer.setSize(w, h);\n            effects.fxaaPass.uniforms.resolution.value.set(1 / w, 1 / h);\n        }\n\n        function select(object) {\n            var effects = this;\n            effects.outlinePass.selectedObjects = [object];\n        }\n\n        function unselect() {\n            var effects = this;\n            effects.outlinePass.selectedObjects = [];\n        }\n\n        return Effects;\n\n    }();\n\n    window.Effects = Effects;\n\n    var app = angular.module('app');\n\n    app.factory('Effects', [function () {\n        return Effects;\n    }]);\n\n}());\n/* global angular, window, document, console, TweenLite */\n\n(function () {\n    'use strict';\n\n    var DEBUG = true;\n    var RAD = Math.PI / 180;\n    var I = 0;\n\n    function rad(degree) {\n        return degree * RAD;\n    }\n\n    var Fitter = function () {\n\n        function Fitter(scene, camera, controls) {\n            var fitter = this;\n            fitter.scene = scene;\n            fitter.camera = camera;\n            fitter.dummy = camera.clone();\n            fitter.controls = controls;\n            fitter.projector = new THREE.Projector();\n            fitter.position = new THREE.Vector3();\n            fitter.target = new THREE.Vector3();\n            fitter.center = new THREE.Vector3();\n            fitter.size = new THREE.Vector3();\n            fitter.box = new THREE.Box3();\n            fitter.boxhelper = new THREE.Box3Helper(fitter.box, 0xff0000);\n\n            fitter.rotate = false;\n\n            fitter.target = new THREE.Vector3(0, 0, 0);\n            fitter.distance = 22;\n            fitter.angle = 0;\n\n            fitter.endTarget = new THREE.Vector3(0, 0, 0);\n            fitter.position = new THREE.Vector3(0, 0, 0);\n            fitter.distanceMin = 10;\n            fitter.distanceMax = 34;\n            fitter.rotationAngle = 1;\n            fitter.dragAngle = 0;\n            fitter.zoom = 1; // eliminabili ??\n            fitter.pow = 0; // eliminabili ??\n            /*\n            if (combiner.selected.item.type === APP.Parts.typeEnum.BladePlug) {\n                fitter.pow = 1;\n            } else {\n                fitter.pow = 0;\n            }\n            */\n            if (DEBUG) {\n                fitter.scene.add(fitter.boxhelper);\n            }\n        }\n\n        Fitter.prototype = {\n            fit: fit,\n            toScreen: toScreen,\n            toWorld: toWorld,\n            update: update,\n        };\n\n        function fit(combiner, offset, up) {\n            if (!offset) {\n                offset = 1.3;\n            }\n            if (!up) {\n                up = new THREE.Vector3(0, 1, 0);\n            }\n            var fitter = this,\n                projector = fitter.projector,\n                box = fitter.box,\n                size = fitter.size,\n                center = fitter.center,\n                camera = fitter.camera,\n                controls = fitter.controls,\n                dummy = fitter.dummy;\n            var object = combiner.selection ? combiner.selection.item.group : combiner.group;\n            box.setFromObject(object);\n            box.getCenter(center);\n            dummy.position.copy(camera.position);\n            dummy.quaternion.copy(camera.quaternion);\n            dummy.up = up;\n            dummy.lookAt(center);\n            dummy.updateProjectionMatrix();\n            var min = fitter.toScreen(box.min);\n            var max = fitter.toScreen(box.max);\n            var sc = fitter.toScreen(center);\n            box.applyMatrix4(dummy.matrixWorldInverse);\n            box.getSize(size);\n            var aspect = size.x / size.y;\n            var dim = (camera.aspect > aspect) ? size.y : size.x;\n            if (camera.aspect < aspect) {\n                dim /= camera.aspect;\n            }\n            dim *= offset;\n            var z = dim / 2 / Math.sin(camera.fov / 2 * RAD);\n            dummy.position.normalize().multiplyScalar(z);\n            fitter.distance = dummy.position.distanceTo(center);\n            // camera.far = distance + dim;\n            dummy.updateProjectionMatrix();\n            var vfrom = camera.position.clone();\n            var vto = dummy.position;\n            var qfrom = camera.quaternion.clone();\n            var qto = dummy.quaternion;\n            var animation = {\n                pow: 0,\n            };\n            TweenLite.to(animation, 0.6, {\n                pow: 1,\n                ease: Power2.easeOut,\n                overwrite: 'all',\n                // ease: Elastic.easeOut,\n                onUpdate: function () {\n                    camera.position.lerpVectors(vfrom, vto, animation.pow);\n                    THREE.Quaternion.slerp(qfrom, qto, camera.quaternion, animation.pow);\n                    camera.updateProjectionMatrix();\n                },\n                onComplete: function () {\n                    if (controls) {\n                        // controls.maxDistance = distance + dim;\n                        controls.target.copy(center);\n                        controls.update();\n                    }\n                }\n            });\n        }\n\n        function toWorld(v) {\n            var fitter = this,\n                projector = fitter.projector,\n                camera = fitter.camera,\n                w = window.innerWidth / 2,\n                h = window.innerHeight / 2;\n            var world = v.clone();\n            world.x = world.x / w - 1;\n            world.y = -world.y / h + 1;\n            projector.unprojectVector(world, camera);\n            return world;\n        }\n\n        function toScreen(v) {\n            var fitter = this,\n                camera = fitter.camera,\n                w = window.innerWidth / 2,\n                h = window.innerHeight / 2;\n            var screen = v.clone();\n            screen.project(camera);\n            screen.x = (screen.x + 1) * w;\n            screen.y = (-screen.y + 1) * h;\n            return screen;\n        }\n\n        function update() {\n            var fitter = this,\n                target = fitter.target,\n                endTarget = fitter.endTarget,\n                position = fitter.position,\n                distance = fitter.distance,\n                zoom = fitter.zoom,\n                dragAngle = fitter.dragAngle,\n                rotationAngle = fitter.rotationAngle,\n                pow = fitter.pow,\n                camera = fitter.camera;\n            if (fitter.rotate) {\n                rotationAngle = fitter.rotationAngle += 0.0002;\n            }\n\n            target.x += (endTarget.x - target.x) / 40;\n            target.y += (endTarget.y - target.y) / 40;\n            target.z += (endTarget.z - target.z) / 40;\n\n            position.x = target.x + distance * zoom * Math.cos(dragAngle + rotationAngle);\n            position.y = target.y + distance * zoom; // * (0.5 + 1.5 * (1 - pow));\n            position.z = target.z + distance * zoom * Math.sin(dragAngle + rotationAngle);\n\n            camera.position.x += (position.x - camera.position.x) / 13;\n            camera.position.y += (position.y - camera.position.y) / 13;\n            camera.position.z += (position.z - camera.position.z) / 13;\n            // camera.up = new THREE.Vector3(0, 0, -1);\n\n            camera.lookAt(target);\n        }\n\n        return Fitter;\n\n    }();\n\n    window.Fitter = Fitter;\n\n    var app = angular.module('app');\n\n    app.factory('Fitter', [function () {\n        return Fitter;\n    }]);\n\n}());\n/* global angular, window, document, console  */\n\n(function () {\n    'use strict';\n\n    var Forge = function () {\n\n        function Forge() {\n            var service = this;\n            service.loader = new THREE.JSONLoader();\n        }\n\n        Forge.prototype = {\n            load: load,\n        };\n\n        var i = 0;\n\n        function load(callback) {\n            var service = this;\n            http({\n                url: i % 2 === 0 ? 'img/Curved Body 1.js' : 'img/Angled Emitter 1.js',\n                onload: function (data) {\n                    data = data.replace(new RegExp('transparency', 'g'), 'opacity');\n                    data = data.replace(new RegExp('.#QNAN0', 'g'), '.0');\n                    var model = service.loader.parse(JSON.parse(data));\n                    callback(model.geometry, model.materials);\n                }\n            });\n            i++;\n        }\n\n        function http(options) {\n            var o = {\n                method: 'GET',\n                responseType: 'text',\n            };\n            if (!options || !options.url || !options.onload) {\n                return;\n            }\n            for (var p in options) {\n                o[p] = options[p];\n            }\n            var req = new XMLHttpRequest();\n            req.open(o.method, o.url, true);\n            req.responseType = o.responseType; // 'blob';\n            req.onload = function () {\n                if (this.status === 200) {\n                    // var blob = this.response;\n                    // var image = URL.createObjectURL(blob); // IE10+\n                    o.onload(this.response);\n                }\n            };\n            if (o.onerror) {\n                req.onerror = o.onerror;\n            }\n            if (o.onprogress) {\n                req.onerror = o.onprogress;\n            }\n            req.send();\n        }\n\n        return Forge;\n\n    }();\n\n    window.Forge = Forge;\n\n    var app = angular.module('app');\n\n    app.factory('Forge', [function () {\n        return Forge;\n    }]);\n\n}());\n/* global angular, window, document, console, TweenLite */\n\n(function () {\n    'use strict';\n\n    var Library = function () {\n\n        var DEBUG = {\n            FINISHES: ['standard', 'black', 'weathered'],\n            randomFinish: function () {\n                // return DEBUG.FINISHES[2];\n                return {\n                    key: DEBUG.FINISHES[Math.floor(Math.random() * DEBUG.FINISHES.length)],\n                    color: null\n                };\n            },\n            randomSecondaryFinish: function () {\n                // return DEBUG.FINISHES[2];\n                return {\n                    key: DEBUG.FINISHES[Math.floor(Math.random() * DEBUG.FINISHES.length)],\n                    color: null\n                };\n            }\n        };\n\n        var BASE = 'img/textures/';\n        var ANISOTROPY = 1;\n        var USE_PHONG = false;\n\n        function Library(renderer) {\n            ANISOTROPY = renderer.capabilities.getMaxAnisotropy();\n            this.replaceShader();\n            var manager = new THREE.LoadingManager();\n            /*\n            manager.onProgress = function (item, loaded, total) {\n                console.log('Library.manager.onProgress', item, loaded, total);\n            };\n            */\n            this.renderer = renderer;\n            this.manager = manager;\n            this.textures = this.getTextures();\n            this.materials = this.getMaterials();\n        }\n\n        // publics\n        Library.prototype = {\n            getMaterials: getMaterials,\n            getTextures: getTextures,\n            getTexture: getTexture,\n            getTextureCube: getTextureCube,\n            getTextureCubeHdr: getTextureCubeHdr,\n            replaceShader: replaceShader,\n            setFinish: setFinish,\n            setNextFloor: setNextFloor,\n            updateMaterials: updateMaterials,\n        };\n\n        // statics\n        Library.hexToRgb = hexToRgb;\n        Library.FLOOR = 0;\n\n        function getMaterials() {\n            var service = this,\n                manager = this.manager,\n                loader = this.loader,\n                textures = this.textures;\n\n            var materials = {\n                left: new THREE.MeshPhongMaterial({\n                    name: 'left',\n                    color: new THREE.Color(0xff0000),\n                    visible: false,\n                }),\n                right: new THREE.MeshPhongMaterial({\n                    name: 'right',\n                    color: new THREE.Color(0x00ff00),\n                    visible: false,\n                }),\n                top: new THREE.MeshPhongMaterial({\n                    name: 'top',\n                    color: new THREE.Color(0x0000ff),\n                    visible: false,\n                }),\n                bottom: new THREE.MeshPhongMaterial({\n                    name: 'bottom',\n                    color: new THREE.Color(0xffff00),\n                    visible: false,\n                }),\n                floor: new THREE.MeshStandardMaterial({\n                    name: 'floor',\n                    color: 0x101010, // 0xaeb7c1, // 0x101010,\n                    roughness: 0.5, // 0.4,\n                    metalness: 0.1, // 0.99,\n                    bumpMap: textures.floor,\n                    bumpScale: 0.05,\n                    envMap: textures.env,\n                }),\n                wrap: new THREE.MeshPhongMaterial({\n                    name: 'wrap',\n                    color: 0x101010,\n                    specular: 0x444444,\n                    shininess: 7,\n                    reflectivity: 0.75,\n                    specularMap: textures.leatherLight,\n                    bumpMap: textures.leatherBump,\n                    bumpScale: 0.15,\n                    // metal: true,\n                }),\n                bronze: new THREE.MeshStandardMaterial({\n                    name: 'bronze',\n                    color: 0xc07f5d,\n                    roughness: 0.5,\n                    roughnessMap: textures.silver,\n                    metalness: 0.9,\n                    metalnessMap: textures.weathered,\n                    envMap: textures.env,\n                    envMapIntensity: 0.15,\n                    // bumpMap: textures.silver,\n                    // bumpScale: 0.003,\n                }),\n                gold: new THREE.MeshStandardMaterial({\n                    name: 'gold',\n                    color: 0xc8ad60,\n                    roughness: 0.5,\n                    roughnessMap: textures.silver,\n                    metalness: 0.9,\n                    metalnessMap: textures.weathered,\n                    envMap: textures.env,\n                    envMapIntensity: 0.15,\n                    // bumpMap: textures.silver,\n                    // bumpScale: 0.003,\n                }),\n                green: new THREE.MeshPhongMaterial({\n                    name: 'green',\n                    color: 0x00aa00,\n                    specular: 0x333333,\n                    specularMap: textures.silver,\n                    shininess: 30,\n                    reflectivity: 0.10,\n                    envMap: textures.env,\n                    // combine: THREE.MixOperation,\n                    bumpMap: textures.silver,\n                    bumpScale: 0.003,\n                    // metal: true,\n                }),\n                red: new THREE.MeshPhongMaterial({\n                    name: 'red',\n                    color: 0xdd0000,\n                    specular: 0x333333,\n                    specularMap: textures.silver,\n                    shininess: 30,\n                    reflectivity: 0.10,\n                    envMap: textures.env,\n                    bumpMap: textures.silver,\n                    bumpScale: 0.003,\n                    // metal: true,\n                }),\n                standard: {\n                    silver: new THREE.MeshStandardMaterial({\n                        name: 'silver',\n                        color: 0x888888,\n                        roughness: 0.4,\n                        // roughnessMap: textures.brushed,\n                        metalness: 0.99,\n                        metalnessMap: textures.brushed,\n                        envMap: textures.env,\n                        envMapIntensity: 1.0,\n                        bumpMap: textures.brushed,\n                        bumpScale: 0.01,\n                    }),\n                    black: new THREE.MeshStandardMaterial({\n                        name: 'black',\n                        color: 0x101010,\n                        roughness: 0.5,\n                        // roughnessMap: textures.sand,\n                        metalness: 0.99,\n                        metalnessMap: textures.sand,\n                        envMap: textures.env,\n                        envMapIntensity: 1.0,\n                        bumpMap: textures.sand,\n                        bumpScale: 0.015,\n                    }),\n                },\n                weathered: {\n                    silver: getWeatheredNode('silver', textures),\n                    black: getWeatheredNode('black', textures),\n                    _silver: new THREE.MeshStandardMaterial({\n                        name: 'silver',\n                        color: 0x555555,\n                        map: textures.brushed,\n                        roughness: 0.6,\n                        roughnessMap: textures.weatheredInverted,\n                        metalness: 0.99,\n                        // metalnessMap: textures.weathered,\n                        envMap: textures.env,\n                        envMapIntensity: 1.0,\n                        // bumpMap: textures.sand,\n                        // bumpScale: 0.01,\n                    }),\n                    _black: new THREE.MeshStandardMaterial({\n                        name: 'black',\n                        color: 0x444444,\n                        map: textures.brushed,\n                        roughness: 0.6,\n                        roughnessMap: textures.weatheredInverted,\n                        metalness: 0.99,\n                        // metalnessMap: textures.weathered,\n                        envMap: textures.env,\n                        envMapIntensity: 1.0,\n                        // bumpMap: textures.sand,\n                        // bumpScale: 0.01,\n                    }),\n                },\n                black: {\n                    silver: new THREE.MeshStandardMaterial({\n                        name: 'silver',\n                        color: 0x131313,\n                        roughness: 0.5,\n                        // roughnessMap: textures.sand,\n                        metalness: 0.99,\n                        metalnessMap: textures.sand,\n                        envMap: textures.env,\n                        envMapIntensity: 1.0,\n                        bumpMap: textures.sand,\n                        bumpScale: 0.015,\n                    }),\n                    black: new THREE.MeshStandardMaterial({\n                        name: 'black',\n                        color: 0x101010,\n                        roughness: 0.5,\n                        // roughnessMap: textures.sand,\n                        metalness: 0.99,\n                        metalnessMap: textures.sand,\n                        envMap: textures.env,\n                        envMapIntensity: 1.0,\n                        bumpMap: textures.sand,\n                        bumpScale: 0.015,\n                    }),\n                },\n                light: {\n                    off: new THREE.MeshPhongMaterial({\n                        name: 'light',\n                        opacity: 0.98,\n                        transparent: true,\n                        color: 0x444444,\n                        specular: 0x888888,\n                        shininess: 20,\n                        reflectivity: 0.3\n                    }),\n                    on6: new THREE.MeshPhongMaterial({\n                        name: 'light',\n                        opacity: 0.98,\n                        transparent: true,\n                        color: 0x444444,\n                        emissive: 0x444444,\n                        specular: 0x888888,\n                        shininess: 20,\n                        reflectivity: 0.3\n                    }),\n                    on12: new THREE.MeshPhongMaterial({\n                        name: 'light',\n                        color: 0xffffff,\n                        emissive: 0x888888,\n                        specular: 0xffffff,\n                        shininess: 100,\n                        reflectivity: 0.3\n                    }),\n                },\n                glare: {\n                    off: new THREE.MeshLambertMaterial({\n                        name: 'glare',\n                        opacity: 0,\n                        transparent: true,\n                        color: 0x000000,\n                    }),\n                    on6: new THREE.MeshLambertMaterial({\n                        name: 'glare',\n                        opacity: 0.6,\n                        transparent: true,\n                        color: 0xecf4fb,\n                        map: textures.glare,\n                        blending: THREE.AdditiveBlending,\n                        specular: 0x000000,\n                        shininess: 0,\n                        combine: THREE.MixOperation,\n                        reflectivity: 0\n                    }),\n                    on12: new THREE.MeshLambertMaterial({\n                        name: 'glare',\n                        opacity: 0.85,\n                        transparent: true,\n                        color: 0xecf4fb,\n                        map: textures.glare,\n                        blending: THREE.AdditiveBlending,\n                        specular: 0x000000,\n                        shininess: 0,\n                        combine: THREE.MixOperation,\n                        reflectivity: 0\n                    }),\n                },\n                emitterGlare: {\n                    off: new THREE.MeshLambertMaterial({\n                        name: 'glare',\n                        opacity: 0,\n                        transparent: true,\n                        color: 0x000000,\n                    }),\n                    on6: new THREE.MeshLambertMaterial({\n                        name: 'glare',\n                        opacity: 0.6,\n                        transparent: true,\n                        color: 0xecf4fb,\n                        map: textures.emitterGlare,\n                        blending: THREE.AdditiveBlending,\n                        specular: 0x000000,\n                        shininess: 0,\n                        combine: THREE.MixOperation,\n                        reflectivity: 0\n                    }),\n                    on12: new THREE.MeshLambertMaterial({\n                        name: 'glare',\n                        opacity: 0.85,\n                        transparent: true,\n                        color: 0xecf4fb,\n                        map: textures.emitterGlare,\n                        blending: THREE.AdditiveBlending,\n                        specular: 0x000000,\n                        shininess: 100,\n                        combine: THREE.MixOperation,\n                        reflectivity: 0\n                    }),\n                },\n            };\n            return materials;\n        }\n\n        function getTexture(url) {\n            var service = this,\n                manager = this.manager,\n                textures = this.textures;\n            // scope.loader.add('texture-silver');\n            return new THREE.TextureLoader(manager).load(BASE + url,\n                function onLoad(texture) {\n                    // scope.loader.remove('texture-silver');            \n                },\n                function onProgress(loaded, total) {\n\n                },\n                function onError(e) {\n                    // scope.loader.remove('texture-silver');\n                });\n        }\n\n        function getTextureCube(url) {\n            var service = this,\n                manager = this.manager,\n                textures = this.textures;\n            // scope.loader.add('texture-silver');\n            return new THREE.CubeTextureLoader(manager).setPath(BASE + url).load([\n                    'px.jpg', 'nx.jpg', 'py.jpg', 'ny.jpg', 'pz.jpg', 'nz.jpg'\n                ],\n                function onLoad(texture) {\n                    // scope.loader.remove('texture-silver');\n                },\n                function onProgress(loaded, total) {\n\n                },\n                function onError(e) {\n                    // scope.loader.remove('texture-silver');\n                });\n        }\n\n        function getTextureCubeHdr(url, key) {\n            var service = this,\n                renderer = this.renderer,\n                manager = this.manager,\n                textures = this.textures;\n            var urls = [\n                BASE + url + 'px.hdr', BASE + url + 'nx.hdr',\n                BASE + url + 'py.hdr', BASE + url + 'ny.hdr',\n                BASE + url + 'pz.hdr', BASE + url + 'nz.hdr'\n            ];\n            return new THREE.HDRCubeTextureLoader().load(THREE.UnsignedByteType, urls, function (cubemap) {\n                renderer.gammaInput = true; // ???\n                renderer.gammaOutput = true;\n                renderer.toneMapping = THREE.LinearToneMapping;\n                renderer.toneMappingExposure = 1.3;\n                var generator = new THREE.PMREMGenerator(cubemap);\n                generator.update(renderer);\n                var packer = new THREE.PMREMCubeUVPacker(generator.cubeLods);\n                packer.update(renderer);\n                textures[key] = packer.CubeUVRenderTarget;\n                cubemap.dispose();\n                service.materials.weathered.silver.envMap = packer.CubeUVRenderTarget;\n                service.materials.weathered.silver.needsUpdate = true;\n                service.materials.weathered.black.envMap = packer.CubeUVRenderTarget;\n                service.materials.weathered.black.needsUpdate = true;\n                // generator.dispose();\n                // packer.dispose();\n                // scope.loader.remove('texture-silver');\n            });\n        }\n\n        function getTextures() {\n            var service = this,\n                manager = this.manager,\n                textures = {};\n            //\n            textures.env = service.getTextureCube('env/');\n            // textures.env = service.getTextureCubeHdr('env/pisa/', 'env');\n            textures.env.anisotropy = ANISOTROPY;\n            textures.env.format = THREE.RGBFormat;\n            // \n            textures.floor = service.getTexture('floor.jpg');\n            textures.floor.anisotropy = ANISOTROPY;\n            textures.floor.wrapS = THREE.RepeatWrapping;\n            textures.floor.wrapT = THREE.RepeatWrapping;\n            textures.floor.repeat.set(40, 40);\n            //\n            textures.silver = service.getTexture('brushed-light.jpg');\n            textures.silver.anisotropy = ANISOTROPY;\n            // textures.silver.wrapS = THREE.RepeatWrapping;\n            textures.silver.wrapT = THREE.RepeatWrapping;\n            // textures.silver.repeat.set(1, 1);\n            //\n            /*\n            textures.weathered = service.getTexture('brushed-dark.jpg');\n            textures.weathered.anisotropy = ANISOTROPY;\n            // textures.weathered.wrapS = THREE.RepeatWrapping;\n            textures.weathered.wrapT = THREE.RepeatWrapping;\n            // textures.weathered.repeat.set(1, 1);\n            */\n            // \n            // textures.weathered = service.getTexture('brushed-dark.jpg');\n            textures.weathered = service.getTexture('weathered-512-tile.jpg');\n            // textures.weathered = service.getTexture('weathered-tile-sm.jpg');\n            textures.weathered.anisotropy = ANISOTROPY;\n            textures.weathered.wrapS = THREE.RepeatWrapping;\n            textures.weathered.wrapT = THREE.RepeatWrapping;\n            textures.weathered.repeat.set(2, 8);\n            //\n            textures.weatheredInverted = service.getTexture('weathered-512-inverted.jpg');\n            textures.weatheredInverted.anisotropy = ANISOTROPY;\n            textures.weatheredInverted.wrapS = THREE.RepeatWrapping;\n            textures.weatheredInverted.wrapT = THREE.RepeatWrapping;\n            textures.weatheredInverted.repeat.set(2, 8);\n            //\n            textures.sand = service.getTexture('sand.bump.jpg');\n            textures.sand.anisotropy = ANISOTROPY;\n            textures.sand.wrapS = THREE.RepeatWrapping;\n            textures.sand.wrapT = THREE.RepeatWrapping;\n            textures.sand.repeat.set(2, 6);\n            //\n            textures.brushed = service.getTexture('brushed-512-tile.jpg');\n            textures.brushed.anisotropy = ANISOTROPY;\n            textures.brushed.wrapS = THREE.RepeatWrapping;\n            textures.brushed.wrapT = THREE.RepeatWrapping;\n            textures.brushed.repeat.set(2, 2);\n            //\n            textures.bump = service.getTexture('brushed-dark.jpg');\n            textures.bump.anisotropy = ANISOTROPY;\n            textures.bump.wrapS = THREE.RepeatWrapping;\n            textures.bump.wrapT = THREE.RepeatWrapping;\n            textures.bump.repeat.set(5, 5);\n            //\n            textures.glare = service.getTexture('glare.jpg');\n            textures.glare.anisotropy = ANISOTROPY;\n            //\n            textures.emitterGlare = service.getTexture('emitter-glare.jpg');\n            textures.emitterGlare.anisotropy = ANISOTROPY;\n            //\n            textures.leatherBump = service.getTexture('leather-bump.jpg');\n            textures.leatherBump.anisotropy = ANISOTROPY;\n            textures.leatherBump.wrapS = THREE.RepeatWrapping;\n            textures.leatherBump.wrapT = THREE.RepeatWrapping;\n            // textures.leatherBump.repeat.set(1, 1);\n            //\n            textures.leatherLight = service.getTexture('leather-light.jpg');\n            textures.leatherLight.anisotropy = ANISOTROPY;\n            textures.leatherLight.wrapS = THREE.RepeatWrapping;\n            textures.leatherLight.wrapT = THREE.RepeatWrapping;\n            // textures.leatherLight.repeat.set(1, 1);\n            //\n            textures.reptileBump = service.getTexture('reptile-bump.jpg');\n            textures.reptileBump.anisotropy = ANISOTROPY;\n            textures.reptileBump.wrapS = THREE.RepeatWrapping;\n            textures.reptileBump.wrapT = THREE.RepeatWrapping;\n            // textures.reptileBump.repeat.set(1, 1);\n            //\n            textures.reptileLight = service.getTexture('reptile-light.jpg');\n            textures.reptileLight.anisotropy = ANISOTROPY;\n            textures.reptileLight.wrapS = THREE.RepeatWrapping;\n            textures.reptileLight.wrapT = THREE.RepeatWrapping;\n            // textures.reptileLight.repeat.set(1, 1);\n            //\n            textures.stingrayBump = service.getTexture('stingray-bump.jpg');\n            textures.stingrayBump.anisotropy = ANISOTROPY;\n            textures.stingrayBump.wrapS = THREE.RepeatWrapping;\n            textures.stingrayBump.wrapT = THREE.RepeatWrapping;\n            // textures.stingrayBump.repeat.set(1, 1);\n            //\n            textures.stingrayLight = service.getTexture('stingray-light.jpg');\n            textures.stingrayLight.anisotropy = ANISOTROPY;\n            textures.stingrayLight.wrapS = THREE.RepeatWrapping;\n            textures.stingrayLight.wrapT = THREE.RepeatWrapping;\n            // textures.stingrayLight.repeat.set(1, 1);\n            return textures;\n        }\n\n        function replaceShader() {\n            var fragment = THREE.ShaderChunk.meshphong_frag;\n            // console.log('Library.replaceShader THREE.ShaderChunk.meshphong_frag', fragment);\n            var outgoingLightA = \"vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\";\n            var outgoingLightB = \"vec3 outgoingLight = (reflectedLight.directDiffuse + reflectedLight.indirectDiffuse) * specular + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveLight;\";\n            // console.log('MAterials.replacing meshphong_frag', fragment.indexOf(outgoingLightA));\n            THREE.ShaderChunk.meshphong_frag = fragment.replace(outgoingLightA, outgoingLightB);\n        }\n\n        function setFinish(materials, finish) {\n            finish = finish || DEBUG.randomFinish();\n            materials = materials.length ? materials : [materials];\n            console.log('library.setFinish', materials, finish);\n            var library = this;\n            return materials.map(function (material, index) {\n                switch (material.name) {\n                    case 'silver':\n                    case 'black':\n                        material = library.materials[finish.key][material.name];\n                        break;\n                }\n                return material;\n            });\n        }\n\n        function setSecondaryFinish(materials, finish) {\n            finish = finish || DEBUG.randomSecondaryFinish();\n            materials = materials.length ? materials : [materials];\n            console.log('library.setSecondaryFinish', materials, finish);\n            var library = this,\n                textures = this.textures,\n                key, color, map;\n            return materials.map(function (material, index) {\n                switch (material.name) {\n                    case 'wrap':\n                        key = finish.key;\n                        color = finish.color;\n                        material = library.materials.wrap.clone();\n                        if (key.indexOf('Leather') != -1) {\n                            map = 'leather';\n                        } else if (key.indexOf('Reptile') != -1) {\n                            map = 'reptile';\n                        } else if (key.indexOf('Stingray') != -1) {\n                            map = 'stingray';\n                        }\n                        color = Library.hexToRgb(color);\n                        material.color.r = color.r / 255;\n                        material.color.g = color.g / 255;\n                        material.color.b = color.b / 255;\n                        material.specularMap = textures[map + 'Light'];\n                        material.bumpMap = textures[map + 'Bump'];\n                        break;\n                }\n                return material;\n            });\n        }\n\n        function materialTween(from, to, callback) {\n            var options = {\n                onComplete: function () {\n                    if (typeof callback === 'function') {\n                        callback();\n                    }\n                }\n            };\n            for (var p in to) {\n                if (p === 'color') {\n                    var color = new THREE.Color(to.color);\n                    options[p] = {\n                        r: color.r,\n                        g: color.g,\n                        b: color.b\n                    };\n                } else {\n                    options[p] = to[p];\n                }\n            }\n            TweenLite.to(from, 0.4, options);\n        }\n\n        function setNextFloor() {\n            var service = this,\n                materials = this.materials,\n                floor = this.materials.floor;\n            Library.FLOOR = (Library.FLOOR + 1) % 4;\n            var to = {};\n            switch (Library.FLOOR) {\n                case 0:\n                    to.color = 0x101010;\n                    to.roughness = 0.5;\n                    to.metalness = 0.1;\n                    to.bumpScale = 0.05;\n                    break;\n                case 1:\n                    to.color = 0xaeb7c1;\n                    to.roughness = 0.5;\n                    to.metalness = 0.1;\n                    to.bumpScale = 0.05;\n                    break;\n                case 2:\n                    to.color = 0x101010;\n                    to.roughness = 0.5;\n                    to.metalness = 0.1;\n                    to.bumpScale = 0.0001;\n                    break;\n                case 3:\n                    to.color = 0xaeb7c1;\n                    to.roughness = 0.5;\n                    to.metalness = 0.1;\n                    to.bumpScale = 0.0001;\n                    break;\n            }\n            console.log('library.setNextFloor', Library.FLOOR);\n            materialTween(floor, to, function () {\n                console.log('materialTween.completed');\n            });\n            // floor.needsUpdate = true;\n        }\n\n        function updateMaterials(materials, finish, secondaryFinish) {\n            finish = finish || DEBUG.randomFinish();\n            var library = this,\n                textures = this.textures,\n                key, color, map;\n            return materials.map(function (material, index) {\n                material.name = material.name.replace('chrome', 'silver');\n                switch (material.name) {\n                    case 'silver':\n                    case 'black':\n                        key = finish.key;\n                        material = library.materials[key][material.name];\n                        break;\n                    case 'wrap':\n                        key = secondaryFinish.key;\n                        color = secondaryFinish.color;\n                        material = library.materials.wrap.clone();\n                        if (key.indexOf('Leather') != -1) {\n                            map = 'leather';\n                        } else if (key.indexOf('Reptile') != -1) {\n                            map = 'reptile';\n                        } else if (key.indexOf('Stingray') != -1) {\n                            map = 'stingray';\n                        }\n                        color = Library.hexToRgb(color);\n                        material.color.r = color.r / 255;\n                        material.color.g = color.g / 255;\n                        material.color.b = color.b / 255;\n                        material.specularMap = textures[map + 'Light'];\n                        material.bumpMap = textures[map + 'Bump'];\n                        break;\n                    case 'bronze':\n                    case 'gold':\n                    case 'red':\n                    case 'green':\n                    case 'left':\n                    case 'right':\n                    case 'top':\n                    case 'bottom':\n                        material = library.materials[material.name];\n                        break;\n                }\n                return material;\n            });\n            /*\n            var finish = part.currentFinish;\n            if (finish && materials[finish.key]) {\n                // console.log(finish.key);\n                replaceMaterial(_materials, 'chrome', materials[finish.key].silver);\n                replaceMaterial(_materials, 'black', materials[finish.key].black);\n            }\n            replaceMaterial(_materials, 'bronze', materials.bronze);\n            replaceMaterial(_materials, 'gold', materials.gold);\n            replaceMaterial(_materials, 'red', materials.red);\n            replaceMaterial(_materials, 'green', materials.green);\n            if (part.hasSecondaryFinishes) {\n                var secondaryFinish = part.currentSecondaryFinish;\n                replaceMaterial(_materials, 'wrap', materials.wrap.clone());\n                onUpdateSecondaryFinish(_materials, secondaryFinish);\n            }\n            part.materials = _materials;\n            if (part.isLedReceiver) {\n                onUpdateLed([part], part.led);\n            }\n            */\n        }\n\n        function updateLedMaterials(receivers, led) {\n            var ledType, ledFinish = null;\n            if (led) {\n                ledType = led.ledType;\n                ledFinish = led.currentFinish;\n            } else {\n                ledType = APP.Parts.ledTypeEnum.OFF;\n            }\n            angular.forEach(receivers, function (part, key) {\n                // console.log('onUpdateLed', part.key, ledType, ledFinish);\n                switch (ledType) {\n                    case APP.Parts.ledTypeEnum.OFF:\n                        replaceMaterial(part.materials, 'light', materials.light.off);\n                        replaceMaterial(part.materials, 'glare', materials.glare.off.clone());\n                        replaceMaterial(part.materials, 'emitterGlare', materials.emitterGlare.off.clone());\n                        // replaceMaterial(part.materials, 'emitter', materials.emitter.off.clone());\n                        break;\n                    case APP.Parts.ledTypeEnum.ON6:\n                        replaceMaterial(part.materials, 'light', materials.light.on6);\n                        replaceMaterial(part.materials, 'glare', materials.glare.on6.clone());\n                        replaceMaterial(part.materials, 'emitterGlare', materials.emitterGlare.on6.clone());\n                        // replaceMaterial(part.materials, 'emitter', materials.emitter.on6.clone());\n                        onUpdateColor(part.materials, ledFinish);\n                        break;\n                    case APP.Parts.ledTypeEnum.ON12:\n                        replaceMaterial(part.materials, 'light', materials.light.on12);\n                        replaceMaterial(part.materials, 'glare', materials.glare.on12.clone());\n                        replaceMaterial(part.materials, 'emitterGlare', materials.emitterGlare.on12.clone());\n                        // replaceMaterial(part.materials, 'emitter', materials.emitter.on12.clone());\n                        onUpdateColor(part.materials, ledFinish);\n                        break;\n                }\n            });\n        }\n\n        function hexToRgb(hex) {\n            var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n            return result ? {\n                r: parseInt(result[1], 16),\n                g: parseInt(result[2], 16),\n                b: parseInt(result[3], 16)\n            } : null;\n        }\n\n        function getWeatheredNode(name, textures) {\n            var material = new THREE.StandardNodeMaterial();\n            // material.color = // albedo (vec3)\n            // material.alpha = // opacity (float)\n            // material.roughness = // roughness (float)\n            // material.metalness = // metalness (float)\n            // material.normal = // normalmap (vec3)\n            // material.normalScale = // normalmap scale (vec2)\n            // material.emissive = // emissive color (vec3)\n            // material.ambient = // ambient color (vec3)\n            // material.shadow = // shadowmap (vec3)\n            // material.light = // custom-light (vec3)\n            // material.ao = // ambient occlusion (float)\n            // material.environment = // reflection/refraction (vec3)\n            // material.transform = // vertex transformation (vec3)\n            var curvature = new THREE.AttributeNode('curvature', 'float');\n            /*\n            var hard = new THREE.FloatNode(20.0);\n            var curvature = new THREE.OperatorNode(\n                _curvature,\n                hard,\n                THREE.OperatorNode.ADD\n            );\n            */\n            var colorA = new THREE.ColorNode(0x040404);\n            var colorB = new THREE.TextureNode(textures.brushed);\n            // var colorB = new THREE.ColorNode(0xffffff);\n            var color = new THREE.Math3Node(\n                colorA,\n                colorB,\n                curvature,\n                THREE.Math3Node.MIX\n            );\n            material.color = color;\n            // material.roughness = new THREE.FloatNode(0.5);\n            var roughnessA = new THREE.FloatNode(0.6);\n            var roughnessB = new THREE.FloatNode(0.5);\n            var roughness = new THREE.Math3Node(\n                roughnessA,\n                roughnessB,\n                curvature,\n                THREE.Math3Node.MIX\n            );\n            material.roughness = roughness;\n            material.metalness = new THREE.FloatNode(0.7);\n            /*\n            // var roughnessA = new THREE.TextureNode(textures.weatheredInverted);\n            var metalnessA = new THREE.FloatNode(0.7);\n            var metalnessB = new THREE.FloatNode(0.7);\n            var metalness = new THREE.Math3Node(\n                metalnessA,\n                metalnessB,\n                curvature,\n                THREE.Math3Node.MIX\n            );\n            material.metalness = metalness;\n            */\n            // var environment = new THREE.CubeTextureNode(textures.env);\n            var environment = new THREE.Math3Node(\n                new THREE.ColorNode(0x040404),\n                new THREE.CubeTextureNode(textures.env),\n                curvature,\n                THREE.Math3Node.MIX\n            );\n            material.environment = environment;\n            /*\n            var environmentAlpha = new THREE.OperatorNode(\n                curvature,\n                new THREE.FloatNode(0.1),\n                THREE.OperatorNode.MUL\n            );\n            material.environmentAlpha = environmentAlpha;\n            */\n            // material.environment = textures.env;\n            /*\n            addGui('color', material.color.value.getHex(), function (val) {\n                material.color.value.setHex(val);\n            }, true);\n            addGui('roughnessA', roughnessA.number, function (val) {\n                roughnessA.number = val;\n            }, false, 0, 1);\n            */\n            material.name = name;\n            material.build();\n            return material;\n        }\n\n        return Library;\n\n    }();\n\n    window.Library = Library;\n\n    var app = angular.module('app');\n\n    app.factory('Library', [function () {\n        return Library;\n    }]);\n\n}());\n/* global angular, window, document, console, TweenLite */\n\n(function () {\n    'use strict';\n\n    var DEBUG = false;\n    var RAD = Math.PI / 180;\n    var I = 0;\n    var MIN = 11;\n\n    function rad(degree) {\n        return degree * RAD;\n    }\n\n    var Orbiter = function () {\n\n        function Orbiter(scene, camera, controls) {\n            var orbiter = this;\n            orbiter.scene = scene;\n            orbiter.camera = camera;\n            orbiter.dummy = camera.clone();\n            orbiter.controls = controls;\n            orbiter.projector = new THREE.Projector();\n            orbiter.center = new THREE.Vector3();\n            orbiter.size = new THREE.Vector3();\n            orbiter.box = new THREE.Box3();\n            orbiter.boxhelper = new THREE.Box3Helper(orbiter.box, 0xff0000);\n\n            orbiter.rotate = true;\n\n            orbiter.target = new THREE.Vector3(0, 0, 0);\n            orbiter.distance = MIN * 2;\n            orbiter.rotationAngle = 1;\n            orbiter.dragAngle = 0;\n            orbiter.zoom = 1; // eliminabili ??\n            orbiter.pow = 0; // eliminabili ??\n\n            orbiter.values = {\n                target: new THREE.Vector3(0, 0, 0),\n                distance: MIN * 2,\n                rotationAngle: 0,\n                dragAngle: 0,\n                zoom: 0,\n                pow: 0,\n            };\n\n            orbiter.distanceMin = MIN;\n            orbiter.distanceMax = MIN * 3;\n            /*\n            if (combiner.selected.item.type === APP.Parts.typeEnum.BladePlug) {\n                orbiter.pow = 1;\n            } else {\n                orbiter.pow = 0;\n            }\n            */\n            orbiter.set(orbiter.camera, orbiter.target);\n            //\n            if (DEBUG) {\n                orbiter.scene.add(orbiter.boxhelper);\n            }\n        }\n\n        Orbiter.prototype = {\n            fit: fit,\n            set: set,\n            toScreen: toScreen,\n            toWorld: toWorld,\n            tween: tween,\n            update: update,\n        };\n\n        function set(camera, target) {\n            var orbiter = this,\n                values = orbiter.values;\n\n            camera.position.x = target.x + values.distance * values.zoom * Math.cos(values.dragAngle + values.rotationAngle);\n            camera.position.y = target.y + values.distance * values.zoom; // * (0.5 + 1.5 * (1 - values.pow));\n            camera.position.z = target.z + values.distance * values.zoom * Math.sin(values.dragAngle + values.rotationAngle);\n            // camera.up = new THREE.Vector3(0, 0, -1);\n            camera.lookAt(target);\n        }\n\n        function fit(combiner, offset, up) {\n            if (!offset) {\n                offset = 1.3;\n            }\n            if (!up) {\n                up = new THREE.Vector3(0, 1, 0);\n            }\n            var orbiter = this,\n                projector = orbiter.projector,\n                box = orbiter.box,\n                size = orbiter.size,\n                center = orbiter.center,\n                camera = orbiter.camera,\n                controls = orbiter.controls,\n                dummy = orbiter.dummy;\n\n            var object = combiner.selection ? combiner.selection.item.group : combiner.group;\n            box.setFromObject(object);\n            box.getCenter(center);\n            box.getSize(size);\n            if (combiner.items.length > 0) {\n                orbiter.set(dummy, center);\n                /*\n                dummy.position.copy(camera.position);\n                dummy.quaternion.copy(camera.quaternion);\n                dummy.up = up;\n                dummy.lookAt(center);\n                */\n                dummy.fov = camera.fov;\n                dummy.aspect = camera.aspect;\n                /*\n                dummy.updateProjectionMatrix();\n                var min = orbiter.toScreen(box.min);\n                var max = orbiter.toScreen(box.max);\n                var sc = orbiter.toScreen(center);\n                */\n                // dummy.matrixWorldNeedsUpdate = true;\n                // dummy.matrixWorldInverse.getInverse(dummy.matrixWorld);\n                size.applyMatrix4(dummy.matrixWorldInverse);\n                var aspect = size.x / size.y;\n                var dim = (camera.aspect > aspect) ? size.y : size.x;\n                if (camera.aspect < aspect) {\n                    dim /= camera.aspect;\n                }\n                dim *= offset;\n                var z = dim / 2 / Math.sin(camera.fov / 2 * RAD);\n                orbiter.distance = z;\n            } else {\n                orbiter.distance = MIN;\n            }\n            orbiter.distanceMin = orbiter.distance * 0.5;\n            orbiter.distanceMax = orbiter.distance * 1.5;\n            //\n            orbiter.target.copy(center);\n        }\n\n        function tween() {\n            var orbiter = this,\n                target = orbiter.target,\n                values = orbiter.values;\n\n            if (orbiter.rotate) {\n                orbiter.rotationAngle += 0.0002;\n            }\n            var friction = 1 / 15;\n            values.target.x += (target.x - values.target.x) * friction;\n            values.target.y += (target.y - values.target.y) * friction;\n            values.target.z += (target.z - values.target.z) * friction;\n            values.distance += (orbiter.distance - values.distance) * friction;\n            values.rotationAngle += (orbiter.rotationAngle - values.rotationAngle) * friction;\n            values.dragAngle += (orbiter.dragAngle - values.dragAngle) * friction;\n            values.zoom += (orbiter.zoom - values.zoom) * friction;\n            values.pow += (orbiter.pow - values.pow) * friction;\n        }\n\n        function update() {\n            var orbiter = this;\n            orbiter.tween();\n            orbiter.set(orbiter.camera, orbiter.values.target);\n        }\n\n        function toWorld(v) {\n            var orbiter = this,\n                projector = orbiter.projector,\n                camera = orbiter.camera,\n                w = window.innerWidth / 2,\n                h = window.innerHeight / 2;\n            var world = v.clone();\n            world.x = world.x / w - 1;\n            world.y = -world.y / h + 1;\n            projector.unprojectVector(world, camera);\n            return world;\n        }\n\n        function toScreen(v) {\n            var orbiter = this,\n                camera = orbiter.camera,\n                w = window.innerWidth / 2,\n                h = window.innerHeight / 2;\n            var screen = v.clone();\n            screen.project(camera);\n            screen.x = (screen.x + 1) * w;\n            screen.y = (-screen.y + 1) * h;\n            return screen;\n        }\n\n        return Orbiter;\n\n    }();\n\n    window.Orbiter = Orbiter;\n\n    var app = angular.module('app');\n\n    app.factory('Orbiter', [function () {\n        return Orbiter;\n    }]);\n\n}());\n/* global angular, window, document, console, TweenLite */\n\n(function () {\n    'use strict';\n\n    function Polyfills() {\n\n        if (!Array.prototype.fill) {\n            Object.defineProperty(Array.prototype, 'fill', {\n                value: function (value) {\n                    if (this === null) {\n                        throw new TypeError('this is null or not defined');\n                    }\n                    var O = Object(this);\n                    var len = O.length >>> 0;\n                    var start = arguments[1];\n                    var relativeStart = start >> 0;\n                    var k = relativeStart < 0 ?\n                        Math.max(len + relativeStart, 0) :\n                        Math.min(relativeStart, len);\n                    var end = arguments[2];\n                    var relativeEnd = end === undefined ?\n                        len : end >> 0;\n                    var final = relativeEnd < 0 ?\n                        Math.max(len + relativeEnd, 0) :\n                        Math.min(relativeEnd, len);\n                    while (k < final) {\n                        O[k] = value;\n                        k++;\n                    }\n                    return O;\n                }\n            });\n        }\n\n    }\n\n    // Polyfills();\n\n    var app = angular.module('app');\n\n    app.service('Polyfills', [Polyfills]);\n\n}());\n/* global angular, window, document, console  */\n\n(function () {\n    'use strict';\n\n    function Prototypes() {\n\n        Element.prototype.hasClass = function (name) {\n            return new RegExp(\"(?:^|\\\\s+)\" + name + \"(?:\\\\s+|$)\").test(this.className);\n        };\n\n        Element.prototype.addClass = function (name) {\n            if (!this.hasClass(name)) {\n                this.className = this.className ? (this.className + ' ' + name) : name;\n            }\n        };\n\n        Element.prototype.removeClass = function (name) {\n            if (this.hasClass(name)) {\n                this.className = this.className.split(name).join('').replace(/\\s\\s+/g, ' '); // .replace(new RegExp('(?:^|\\\\s+)' + name + '(?:\\\\s+|$)', 'g'), '');\n            }\n        };\n\n        Element.prototype.isDescendant = function (target) {\n            function isDescendant(node, target) {\n                if (node === target) {\n                    return true;\n                } else if (node.parentNode) {\n                    return isDescendant(node.parentNode, target);\n                } else {\n                    return false;\n                }\n            }\n            return isDescendant(this, target);\n        };\n\n        Element.prototype.getBounds = function () {\n            var bounds = {\n                x: 0,\n                y: 0,\n                width: this.offsetWidth,\n                height: this.offsetHeight,\n                center: {\n                    x: 0,\n                    y: 0\n                },\n            };\n            bounds.center.x = bounds.width / 2;\n            bounds.center.y = bounds.height / 2;\n            return bounds;\n        };\n\n        window.getTouch = function (e) {\n            var t = new THREE.Vector2();\n            t.t = new THREE.Vector2();\n            t.relativeTo = function (node) {\n                var rect = node.getBoundingClientRect();\n                var scrollX = window.pageXOffset || document.documentElement.scrollLeft;\n                var scrollY = window.pageYOffset || document.documentElement.scrollTop;\n                this.x = ((this.x - rect.left - scrollX) / node.offsetWidth) * 2 - 1;\n                this.y = -((this.y - rect.top - scrollY) / node.offsetHeight) * 2 + 1;\n            };\n            t.pinchSize = function () {\n                return Math.sqrt((this.x - this.t.x) * (this.x - this.t.x) + (this.y - this.t.y) * (this.y - this.t.y));\n            };\n            t.count = 1;\n            /*\n            var t = {\n                x: 0,\n                y: 0,\n                t: {\n                    x: 0,\n                    y: 0,\n                },\n                count: 1,\n                dist: function () {\n                    return Math.sqrt((this.x - this.t.x) * (this.x - this.t.x) + (this.y - this.t.y) * (this.y - this.t.y));\n                }\n            };\n            */\n            if (e.type == 'touchstart' || e.type == 'touchmove' || e.type == 'touchend' || e.type == 'touchcancel') {\n                var touch = null,\n                    second = null;\n                var touches = e.originalEvent ? e.originalEvent.touches || e.originalEvent.changedTouches : e.touches || e.changedTouches;\n                if (touches && touches.length) {\n                    touch = touches[0];\n                    if (touches.length > 1) {\n                        second = touches[1];\n                    }\n                }\n                if (touch) {\n                    t.x = touch.pageX;\n                    t.y = touch.pageY;\n                }\n                if (second) {\n                    t.t.x = second.pageX;\n                    t.t.y = second.pageY;\n                    t.count = 2;\n                }\n            } else if (e.type == 'click' || e.type == 'mousedown' || e.type == 'mouseup' || e.type == 'mousemove' || e.type == 'mouseover' || e.type == 'mouseout' || e.type == 'mouseenter' || e.type == 'mouseleave') {\n                t.x = e.pageX;\n                t.y = e.pageY;\n            }\n            return t;\n        };\n\n    }\n\n    // Prototypes();\n\n    var app = angular.module('app');\n\n    app.service('Prototypes', [Prototypes]);\n\n}());\n/* global angular, window, document, console, TweenLite */\n\n(function () {\n    'use strict';\n\n    function calcNormal(normals, normal, angle) {\n        var allowed = normals.filter(function (n) {\n            return n.angleTo(normal) < angle * Math.PI / 180;\n        });\n        return allowed.reduce(function (a, b) {\n            return a.clone().add(b);\n        }).normalize();\n    }\n\n    function ThreeUtils() {\n\n        THREE.GeometryUtils.computeVertexNormals = function (geometry, angle) {\n            geometry.computeFaceNormals();\n            var vertices = geometry.vertices.map(function () {\n                return [];\n            });\n            geometry.faces.map(function (face) {\n                vertices[face.a].push(face.normal);\n                vertices[face.b].push(face.normal);\n                vertices[face.c].push(face.normal);\n            });\n            geometry.faces.map(function (face) {\n                face.vertexNormals[0] = calcNormal(vertices[face.a], face.normal, angle);\n                face.vertexNormals[1] = calcNormal(vertices[face.b], face.normal, angle);\n                face.vertexNormals[2] = calcNormal(vertices[face.c], face.normal, angle);\n            });\n            if (geometry.faces.length > 0) geometry.normalsNeedUpdate = true;\n        };\n\n        THREE.FaceUtils = {\n            computeCentroid: function (face, vertices) {\n                var centroid = new THREE.Vector3();\n                centroid.add(vertices[face.a]);\n                centroid.add(vertices[face.b]);\n                centroid.add(vertices[face.c]);\n                centroid.divideScalar(3);\n                return centroid;\n            }\n        };\n\n    }\n\n    // ThreeUtils();\n\n    var app = angular.module('app');\n\n    app.service('ThreeUtils', [ThreeUtils]);\n\n}());\n/* global angular, window, document, console, TweenLite, Forge, Combiner, Orbiter, Library */\n\n(function () {\n    \"use strict\";\n\n    var app = angular.module('app');\n\n    app.directive('builder', ['Polyfills', 'Prototypes', 'ThreeUtils', function (Polyfills, Prototypes, ThreeUtils) {\n        return {\n            restrict: 'A',\n            link: function (scope, element, attributes) {\n                console.log('app.builder');\n                var container = element[0]; // document.querySelector('.editor');\n\n                if (!Detector.webgl) {\n                    Detector.addGetWebGLMessage();\n                    return;\n                }\n\n                var w = container.offsetWidth,\n                    h = container.offsetHeight;\n\n                var options = {\n                    down: false,\n                    moved: 0,\n                };\n\n                var raycaster = new THREE.Raycaster();\n\n                var forge = new Forge();\n\n                var renderer = addRenderer();\n\n                var library = new Library(renderer);\n\n                var camera = new THREE.PerspectiveCamera(45, w / h, 1, 50000);\n\n                var scene = new THREE.Scene();\n\n                var lights = addLights(scene);\n\n                var floor = addFloor(scene);\n\n                var combiner = new Combiner(scene);\n\n                var orbiter = new Orbiter(scene, camera);\n\n                var effects = new Effects(scene, camera, renderer, w, h);\n\n                function render() {\n                    combiner.update();\n                    //\n                    var y = combiner.center.y - combiner.size.y / 2 - 3;\n                    floor.position.y += (y - floor.position.y) / 8;\n                    // floor.position.x = combiner.center.x;\n                    // floor.position.z = combiner.center.z;\n                    lights.position.x += (combiner.center.x - lights.position.x) / 8;\n                    lights.position.y += (combiner.center.y - lights.position.y) / 8;\n                    lights.position.z += (combiner.center.z - lights.position.z) / 8;\n                    //\n                    orbiter.update();\n                    effects.update();\n                    // renderer.render(scene, camera);\n                }\n\n                function snapshot() {\n                    if (options.snapshot === true) {\n                        options.snapshot = false;\n                        /*\n                        Snapshot.post(scope.saber.code, renderer.domElement.toDataURL('image/jpeg', 0.95)).then(function (share) {\n                            scope.$root.$broadcast('onSocialPictureReady', share);\n                        });\n                        */\n                    }\n                }\n\n                function animate() {\n                    render();\n                    snapshot();\n                    options.requestId = window.requestAnimationFrame(animate, renderer.domElement);\n                }\n\n                function play() {\n                    if (!options.requestId) {\n                        animate();\n                    }\n                }\n\n                function pause() {\n                    if (options.requestId) {\n                        window.cancelAnimationFrame(options.requestId);\n                        options.requestId = false;\n                    }\n                }\n\n                function addRenderer() {\n                    var renderer = new THREE.WebGLRenderer({\n                        alpha: true,\n                        antialias: true,\n                    });\n                    renderer.setClearColor(0x101010);\n                    renderer.setPixelRatio(window.devicePixelRatio);\n                    renderer.setSize(w, h);\n                    container.appendChild(renderer.domElement);\n                    return renderer;\n                }\n\n                function addLights(scene) {\n                    var lights = new THREE.Group();\n                    lights.name = 'pivot';\n                    lights.rotation.y = Math.PI / 180 * 90;\n                    //\n                    var light = new THREE.AmbientLight(0x444444);\n                    scene.add(light);\n                    // \n                    var light1 = new THREE.DirectionalLight(0xeedddd, 1.0, 2000);\n                    light1.name = 'light1';\n                    light1.position.set(-30, 20, 10);\n                    lights.add(light1);\n                    //\n                    var light2 = new THREE.DirectionalLight(0xddddee, 1.0, 2000);\n                    light2.name = 'light2';\n                    light2.position.set(30, 20, -10);\n                    lights.add(light2);\n                    //\n                    /*\n                    var light = new THREE.PointLight(0xddddee, 1, 2000);\n                    light.position.set(0, 200, 0);\n                    scene.add(light);\n                    */\n                    scene.add(lights);\n                    return lights;\n                }\n\n                function addFloor(scene) {\n                    /*\n                    var radius = 200;\n                    var radials = 16;\n                    var circles = 8;\n                    var divisions = 64;\n                    var floor = new THREE.PolarGridHelper(radius, radials, circles, divisions);\n                    */\n                    // var floor = new THREE.GridHelper(500, 500, 0x888888, 0xAAAAAA);\n                    // floor.rotateOnAxis( new THREE.Vector3( 1, 0, 0 ), 90 * ( Math.PI/180 ));\t\n                    var floor = new THREE.Mesh(new THREE.PlaneBufferGeometry(500, 500), library.materials.floor);\n                    floor.name = 'floor';\n                    floor.rotation.x = -Math.PI / 2;\n                    floor.position.y = -3.5;\n                    floor.visible = true;\n                    scene.add(floor);\n                    return floor;\n                }\n\n                function onAdd() {\n                    if (!combiner.busy()) {\n                        forge.load(function (geometry, materials) {\n                            if (effects) effects.unselect();\n                            materials = library.updateMaterials(materials, null, null); // finish, secondaryFinish\n                            var item = combiner.add(geometry, materials);\n                            orbiter.fit(combiner);\n                            combiner.entering++;\n                            item.enter(function () {\n                                combiner.entering--;\n                            });\n                        });\n                    }\n                }\n\n                function onRemove() {\n                    if (!combiner.busy()) {\n                        combiner.remove();\n                        orbiter.fit(combiner);\n                    }\n                }\n\n                function onFlip() {\n                    combiner.flip(function () {\n                        orbiter.fit(combiner);\n                    });\n                }\n\n                function onFinish() {\n                    combiner.selectedModel(function (model) {\n                        model.material = library.setFinish(model.material, null);\n                    });\n                }\n\n                function onFloor() {\n                    library.setNextFloor();\n                }\n\n                function onResize() {\n                    w = container.offsetWidth;\n                    h = container.offsetHeight;\n                    camera.aspect = w / h;\n                    camera.updateProjectionMatrix();\n                    orbiter.fit(combiner);\n                    renderer.setSize(w, h);\n                    if (effects) effects.resize(w, h);\n                }\n\n                function onDown(e) {\n                    var down = getTouch(e);\n                    down.relativeTo(container);\n                    down.mx = down.x;\n                    down.startDragAngle = orbiter.dragAngle;\n                    down.startDistance = orbiter.distance;\n                    // console.log('down', down);\n                    raycaster.setFromCamera(down, camera);\n                    var selection = combiner.select(raycaster);\n                    // console.log('selection', selection);\n                    if (selection) {\n                        /*\n                        if (controls) {\n                            controls.enabled = false;\n                        }\n                        */\n                        down.index = selection.index;\n                        down.item = selection.item;\n                        down.rotation = selection.rotation;\n                        if (effects) effects.select(down.item.model);\n                    } else {\n                        if (effects) effects.unselect();\n                    }\n                    orbiter.fit(combiner);\n                    options.down = down;\n                    /*\n                    down.index = i;\n                    down.item = value;\n                    down.angle = value.coords.angle;\n                    */\n                }\n\n                function onMove(e) {\n                    options.moved++;\n                    var pow = 1; // 0.001;\n                    if (e.type === 'touchmove') {\n                        e.stopPropagation();\n                        e.preventDefault();\n                        pow *= 4;\n                    }\n                    var down = options.down;\n                    if (down) {\n                        var move = getTouch(e);\n                        move.relativeTo(container);\n                        var diff = move.sub(down);\n                        // console.log(diff.x, diff.y);\n                        if (move.count == 2 && down.count == 2) {\n                            // PINCH                   \n                            orbiter.distance = down.startDistance + (down.pinchSize() - move.pinchSize()) * pow * 10;\n                        } else {\n                            if (combiner.selection && combiner.selection.item === down.item) {\n                                // ROTATE ITEM\n                                // down.item.rotation = down.rotation + (move.y - down.y) * pow * 10;\n                                // var index = down.index;\n                                // down.item.outer.rotation.x = down.rotation.x + diff.y * Math.PI;\n                                combiner.rotate(diff.y * pow * 10);\n                            } else {\n                                // DRAG CAMERA\n                                orbiter.dragAngle = down.startDragAngle + diff.x * pow * 10;\n                                orbiter.distance = down.startDistance + diff.y * pow * -10;\n                                /*\n                                // SOUND\n                                if (combiner.selectedItem && combiner.selectedItem.type == APP.Parts.typeEnum.Sound) {\n                                    if (Math.abs(move.x - down.mx) > w / 3) {\n                                        down.mx = move.x;\n                                        scope.$root.$broadcast('onSoundSwing', scope.saber.sound, Math.abs(move.x - down.mx) / 100);\n                                    }\n                                }\n                                */\n                            }\n                        }\n                        // orbiter.update();\n                        orbiter.distance = Math.min(orbiter.distanceMax, Math.max(orbiter.distanceMin, orbiter.distance));\n                        // scope.$root.$broadcast('onControls');\n                    }\n                }\n\n                function onUp(e) {\n                    var down = options.down;\n                    var moved = options.moved;\n                    if (down && moved < 5) {\n                        if (down.item) {\n                            /*\n                            scope.$apply(function () {\n                                selectedIndex = down.index;\n                                onFocus(down.item);\n                            });\n                            */\n                        } else if (combiner.selectedItem) {\n                            /*\n                            scope.$apply(function () {\n                                onBlur();\n                            });\n                            */\n                        }\n                    }\n                    options.down = null;\n                    options.moved = 0;\n                    /*\n                    if (controls) {\n                        controls.enabled = true;\n                    }\n                    */\n                    removeDragListeners();\n                }\n\n                function onWheel(e) {\n                    e = window.event || e; // old IE support\n                    var bounds = container.getBounds();\n                    if (Math.abs(e.pageX - bounds.center.x) < bounds.width / 3) {\n                        var delta = Math.max(-1, Math.min(1, (e.wheelDelta || -e.detail)));\n                        orbiter.distance += delta;\n                        orbiter.distance = Math.min(orbiter.distanceMax, Math.max(orbiter.distanceMin, orbiter.distance));\n                        orbiter.update();\n                        e.preventDefault();\n                        // scope.$root.$broadcast('onControls');\n                    }\n                }\n\n                function onDoubleClick(e) {\n                    // console.log('onDoubleClick');\n                    var touch = getTouch(e);\n                    raycaster.setFromCamera(touch, camera);\n                    combiner.hitAndFlip(raycaster, function () {\n                        orbiter.fit(combiner);\n                    });\n                }\n\n                function onMouseDown(e) {\n                    onDown(e);\n                    addMouseListeners();\n                }\n\n                function onTouchDown(e) {\n                    onDown(e);\n                    addTouchListeners();\n                    e.stopPropagation();\n                    e.preventDefault();\n                }\n\n                function addMouseListeners() {\n                    window.addEventListener('mousemove', onMove);\n                    window.addEventListener('mouseup', onUp);\n                }\n\n                function addTouchListeners() {\n                    window.addEventListener('touchmove', onMove);\n                    window.addEventListener('touchend', onUp);\n                }\n\n                function removeDragListeners() {\n                    window.removeEventListener('touchmove mousemove', onMove);\n                    window.removeEventListener('touchend mouseup', onUp);\n                }\n\n                function onKeyUp(e) {\n                    // console.log(e);\n                    var selection;\n                    switch (e.keyCode) {\n                        case 38:\n                            // up arrow\n                            break;\n                        case 40:\n                            // down arrow\n                            break;\n                        case 37:\n                            // left arrow\n                            selection = combiner.prev();\n                            if (selection) {\n                                if (effects) effects.select(selection.item.model);\n                            } else {\n                                if (effects) effects.unselect();\n                            }\n                            orbiter.fit(combiner);\n                            break;\n                        case 39:\n                            // right arrow\n                            selection = combiner.next();\n                            if (selection) {\n                                if (effects) effects.select(selection.item.model);\n                            } else {\n                                if (effects) effects.unselect();\n                            }\n                            orbiter.fit(combiner);\n                            break;\n                    }\n                }\n\n                var btnAdd = document.querySelector('.btn-add');\n                var btnRemove = document.querySelector('.btn-remove');\n                var btnFlip = document.querySelector('.btn-flip');\n                var btnFinish = document.querySelector('.btn-finish');\n                var btnFloor = document.querySelector('.btn-floor');\n\n                function addListeners() {\n                    // container.addEventListener('dblclick', onDoubleClick);\n                    container.addEventListener('mousedown', onMouseDown);\n                    container.addEventListener('touchstart', onTouchDown);\n                    container.addEventListener('mousewheel', onWheel);\n                    document.addEventListener('keyup', onKeyUp);\n                    window.addEventListener('resize', onResize, false);\n                    btnAdd.addEventListener('click', onAdd);\n                    btnRemove.addEventListener('click', onRemove);\n                    btnFlip.addEventListener('click', onFlip);\n                    btnFinish.addEventListener('click', onFinish);\n                    btnFloor.addEventListener('click', onFloor);\n                }\n\n                function removeListeners() {\n                    // container.removeEventListener('dblclick', onDoubleClick);\n                    container.removeEventListener('mousedown', onMouseDown);\n                    container.removeEventListener('touchstart', onTouchDown);\n                    container.removeEventListener('mousewheel', onWheel);\n                    document.removeEventListener('keyup', onKeyUp);\n                    window.removeEventListener('resize', onResize);\n                    btnAdd.removeEventListener('click', onAdd);\n                    btnRemove.removeEventListener('click', onRemove);\n                    btnFlip.removeEventListener('click', onFlip);\n                    btnFinish.removeEventListener('click', onFinish);\n                    btnFloor.removeEventListener('click', onFloor);\n                }\n\n                animate();\n                addListeners();\n\n                setTimeout(onAdd, 1000);\n\n                /*\n                scope.$on('onSelectPrev', function ($scope) {\n                });    \n                scope.$on('onSelectNext', function ($scope) {\n                });\n                scope.$on('onUpdateLed', function (scope, receivers, led) {\n                });\n                scope.$on('onFinishChange', function ($scope, part, id) {\n                });\n                scope.$on('onSecondaryFinishChange', function ($scope, part, id) {\n                });\n                scope.$on('onItemChange', function ($scope, part, id) {\n                });\n                scope.$on('onAddPart', function ($scope, part, id, counter) {\n                });\n                scope.$on('onPlayPause', function ($scope, pause) {\n                });\n                scope.$on('onRemovePart', function ($scope, part) {\n                });\n                scope.$on('onFlipPart', function ($scope, part) {\n                });\n                scope.$on('onSwapBackground', function ($scope) {\n                });\n                scope.$on('onRotationToggle', function ($scope) {\n                });\n                scope.$on('onSocialPictureGenerationRequest', function ($scope) {\n                    options.snapshot = true;\n                });\n                scope.$on('$destroy', function () {\n                    removeListeners();\n                });\n                */\n            }\n        };\n    }]);\n\n}());"]}