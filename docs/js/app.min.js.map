{"version":3,"sources":["docs/js/app.js"],"names":["Element","prototype","hasClass","name","RegExp","test","this","className","addClass","removeClass","split","join","replace","isDescendant","target","node","parentNode","getBounds","bounds","x","y","width","offsetWidth","height","offsetHeight","center","window","getTouch","e","t","THREE","Vector2","relativeTo","rect","getBoundingClientRect","scrollX","pageXOffset","document","documentElement","scrollLeft","scrollY","pageYOffset","scrollTop","left","top","pinchSize","Math","sqrt","count","type","touch","second","touches","originalEvent","changedTouches","length","pageX","pageY","calcNormal","normals","normal","angle","filter","n","angleTo","PI","reduce","a","b","clone","add","normalize","DEBUG","HELPER","GeometryUtils","computeVertexNormals","geometry","computeFaceNormals","vertices","map","faces","face","push","c","vertexNormals","normalsNeedUpdate","JOINTS","MODELS","ANGLE","SCALE","I","flipQuaternion","Quaternion","setFromAxisAngle","Vector3","CombinerItem","item","size","box","Box3","group","Group","outer","inner","enter","callback","position","TweenLite","to","ease","Power2","easeOut","overwrite","onComplete","load","materials","minx","Number","POSITIVE_INFINITY","maxx","NEGATIVE_INFINITY","v","z","min","max","dx","console","log","model","Mesh","setFromObject","getSize","joints","getJoints","quaternionL","quaternion","quaternionD","setFromUnitVectors","multiplyScalar","right","quaternionR","multiplyQuaternions","multiply","inverse","positionL","positionR","origin","sub","applyQuaternion","mergeVertices","verticesNeedUpdate","uvsNeedUpdate","BufferGeometry","fromGeometry","Curvature","setGeometry","color","Color","BoxGeometry","material","MeshStandardMaterial","wireframe","transparent","opacity","key","joint","euler","Euler","atan2","rotation","copy","helper","MeshBasicMaterial","set","flip","flipped","animation","pow","onUpdate","slerp","lerpVectors","ids","names","colors","index","i","indexOf","String","materialIndex","divideScalar","setFlip","updateMatrixWorld","Combiner","scene","combiner","flags","rotate","flipping","entering","items","hittables","boxhelper","Box3Helper","originhelper","centerhelper","unselect","adjust","combine","fit","busy","setRotationFromQuaternion","getWorldQuaternion","getWorldPosition","getCenter","selection","flipItem","setTimeout","hitAndFlip","raycaster","hitted","intersectObjects","object","prev","pop","parent","remove","next","splice","select","selectedItem","selectedModel","update","first","positions","px","py","pz","nx","ny","nz","sx","sy","sz","pyx","pyz","pzx","yx","yz","zx","xy","zy","xz","dict","attributes","array","toArray","toString","subVectors","dot","curvatures","Object","keys","forEach","sum","val","abs","range","p","s","f","attribute","Float32Array","clamp","smoothstep","addAttribute","BufferAttribute","setEdges","thresholdAngle","thresholdDot","cos","DEG2RAD","edge","ea","eb","ia","ib","ic","va","vb","vc","na","nb","edges","addKey","undefined","d","fa","fb","edgeKeys","edgeMatches","fillEdge","toFixed","Effects","camera","renderer","w","h","renderPass","RenderPass","outlinePass","OutlinePass","visibleEdgeColor","hiddenEdgeColor","edgeStrength","edgeGlow","edgeThickness","pulsePeriod","usePatternTexture","fxaaPass","ShaderPass","FXAAShader","uniforms","resolution","value","renderToScreen","composer","EffectComposer","addPass","render","resize","setSize","selectedObjects","RAD","Fitter","controls","fitter","dummy","projector","Projector","distance","endTarget","distanceMin","distanceMax","rotationAngle","dragAngle","zoom","offset","up","lookAt","updateProjectionMatrix","toScreen","applyMatrix4","matrixWorldInverse","aspect","dim","sin","fov","distanceTo","vfrom","vto","qfrom","qto","innerWidth","innerHeight","screen","project","toWorld","world","unprojectVector","Forge","loader","JSONLoader","service","options","o","method","responseType","url","onload","req","XMLHttpRequest","open","status","response","onerror","onprogress","send","http","data","parse","JSON","Library","FINISHES","randomFinish","floor","random","randomSecondaryFinish","BASE","ANISOTROPY","USE_PHONG","capabilities","getMaxAnisotropy","replaceShader","manager","LoadingManager","textures","getTextures","getMaterials","getWeatheredNode","StandardNodeMaterial","curvature","AttributeNode","colorA","ColorNode","colorB","TextureNode","brushed","Math3Node","MIX","roughnessA","FloatNode","roughnessB","roughness","metalness","environment","CubeTextureNode","env","build","MeshPhongMaterial","bumpMap","bumpScale","specular","reflectivity","shininess","wrap","specularMap","leatherLight","leatherBump","MixOperation","bronze","silver","envMap","gold","green","red","standard","black","MultiplyOperation","weathered","metalnessMap","roughnessMap","light","off","on6","emissive","on12","glare","MeshLambertMaterial","blending","AdditiveBlending","emitterGlare","envMapIntensity","sand","_silver","weatheredInverted","_black","visible","bottom","getTextureCube","anisotropy","format","RGBFormat","getTexture","wrapS","RepeatWrapping","wrapT","repeat","bump","reptileBump","reptileLight","stingrayBump","stingrayLight","TextureLoader","texture","loaded","total","CubeTextureLoader","setPath","getTextureCubeHdr","urls","HDRCubeTextureLoader","UnsignedByteType","cubemap","gammaInput","gammaOutput","toneMapping","LinearToneMapping","toneMappingExposure","generator","PMREMGenerator","packer","PMREMCubeUVPacker","cubeLods","CubeUVRenderTarget","dispose","needsUpdate","fragment","ShaderChunk","meshphong_frag","setFinish","finish","library","setNextFloor","FLOOR","updateMaterials","secondaryFinish","hexToRgb","r","g","hex","result","exec","parseInt","MIN","Orbiter","orbiter","values","tween","friction","Detector","webgl","container","querySelector","down","moved","Raycaster","forge","WebGLRenderer","alpha","antialias","setClearColor","setPixelRatio","devicePixelRatio","appendChild","domElement","PerspectiveCamera","Scene","lights","AmbientLight","light1","DirectionalLight","light2","addLights","PlaneBufferGeometry","effects","addEventListener","onDown","onMove","onUp","stopPropagation","preventDefault","event","delta","wheelDelta","detail","keyCode","btnAdd","btnRemove","btnFlip","btnFinish","btnFloor","onAdd","animate","addGetWebGLMessage","snapshot","requestId","requestAnimationFrame","mx","startDragAngle","startDistance","setFromCamera","move","diff","removeEventListener"],"mappings":"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","file":"app.min.js","sourcesContent":["/* global window, document, console  */\n\n(function () {\n    'use strict';\n\n    Element.prototype.hasClass = function (name) {\n        return new RegExp(\"(?:^|\\\\s+)\" + name + \"(?:\\\\s+|$)\").test(this.className);\n    };\n\n    Element.prototype.addClass = function (name) {\n        if (!this.hasClass(name)) {\n            this.className = this.className ? (this.className + ' ' + name) : name;\n        }\n    };\n\n    Element.prototype.removeClass = function (name) {\n        if (this.hasClass(name)) {\n            this.className = this.className.split(name).join('').replace(/\\s\\s+/g, ' '); // .replace(new RegExp('(?:^|\\\\s+)' + name + '(?:\\\\s+|$)', 'g'), '');\n        }\n    };\n\n    Element.prototype.isDescendant = function (target) {\n        function isDescendant(node, target) {\n            if (node === target) {\n                return true;\n            } else if (node.parentNode) {\n                return isDescendant(node.parentNode, target);\n            } else {\n                return false;\n            }\n        }\n        return isDescendant(this, target);\n    };\n\n    Element.prototype.getBounds = function () {\n        var bounds = {\n            x: 0,\n            y: 0,\n            width: this.offsetWidth,\n            height: this.offsetHeight,\n            center: {\n                x: 0,\n                y: 0\n            },\n        };\n        bounds.center.x = bounds.width / 2;\n        bounds.center.y = bounds.height / 2;\n        return bounds;\n    };\n\n    window.getTouch = function (e) {\n        var t = new THREE.Vector2();\n        t.t = new THREE.Vector2();\n        t.relativeTo = function (node) {\n            var rect = node.getBoundingClientRect();\n            var scrollX = window.pageXOffset || document.documentElement.scrollLeft;\n            var scrollY = window.pageYOffset || document.documentElement.scrollTop;\n            this.x = ((this.x - rect.left - scrollX) / node.offsetWidth) * 2 - 1;\n            this.y = -((this.y - rect.top - scrollY) / node.offsetHeight) * 2 + 1;\n        };\n        t.pinchSize = function () {\n            return Math.sqrt((this.x - this.t.x) * (this.x - this.t.x) + (this.y - this.t.y) * (this.y - this.t.y));\n        };\n        t.count = 1;\n        /*\n        var t = {\n            x: 0,\n            y: 0,\n            t: {\n                x: 0,\n                y: 0,\n            },\n            count: 1,\n            dist: function () {\n                return Math.sqrt((this.x - this.t.x) * (this.x - this.t.x) + (this.y - this.t.y) * (this.y - this.t.y));\n            }\n        };\n        */\n        if (e.type == 'touchstart' || e.type == 'touchmove' || e.type == 'touchend' || e.type == 'touchcancel') {\n            var touch = null,\n                second = null;\n            var touches = e.originalEvent ? e.originalEvent.touches || e.originalEvent.changedTouches : e.touches || e.changedTouches;\n            if (touches && touches.length) {\n                touch = touches[0];\n                if (touches.length > 1) {\n                    second = touches[1];\n                }\n            }\n            if (touch) {\n                t.x = touch.pageX;\n                t.y = touch.pageY;\n            }\n            if (second) {\n                t.t.x = second.pageX;\n                t.t.y = second.pageY;\n                t.count = 2;\n            }\n        } else if (e.type == 'click' || e.type == 'mousedown' || e.type == 'mouseup' || e.type == 'mousemove' || e.type == 'mouseover' || e.type == 'mouseout' || e.type == 'mouseenter' || e.type == 'mouseleave') {\n            t.x = e.pageX;\n            t.y = e.pageY;\n        }\n        return t;\n    };\n\n}());\n/* global window, document, console, TweenLite */\n\n(function () {\n    'use strict';\n\n    function calcNormal(normals, normal, angle) {\n        var allowed = normals.filter(function (n) {\n            return n.angleTo(normal) < angle * Math.PI / 180;\n        });\n        return allowed.reduce(function (a, b) {\n            return a.clone().add(b);\n        }).normalize();\n    }\n\n    THREE.GeometryUtils.computeVertexNormals = function (geometry, angle) {\n        geometry.computeFaceNormals();\n        var vertices = geometry.vertices.map(function () {\n            return [];\n        });\n        geometry.faces.map(function (face) {\n            vertices[face.a].push(face.normal);\n            vertices[face.b].push(face.normal);\n            vertices[face.c].push(face.normal);\n        });\n        geometry.faces.map(function (face) {\n            face.vertexNormals[0] = calcNormal(vertices[face.a], face.normal, angle);\n            face.vertexNormals[1] = calcNormal(vertices[face.b], face.normal, angle);\n            face.vertexNormals[2] = calcNormal(vertices[face.c], face.normal, angle);\n        });\n        if (geometry.faces.length > 0) geometry.normalsNeedUpdate = true;\n    };\n\n    var DEBUG = {\n        HELPER: false,\n        JOINTS: false,\n        MODELS: true,\n        ANGLE: false,\n    };\n\n    var RAD = Math.PI / 180;\n    var SCALE = 0.025;\n    var I = 0;\n\n    function rad(degree) {\n        return degree * RAD;\n    }\n\n    var flipQuaternion = new THREE.Quaternion();\n    flipQuaternion.setFromAxisAngle(new THREE.Vector3(0, 1, 0), Math.PI);\n\n    var CombinerItem = function () {\n\n        function CombinerItem() {\n            var item = this;\n            item.size = new THREE.Vector3();\n            item.box = new THREE.Box3();\n            item.group = new THREE.Group();\n            item.outer = new THREE.Group();\n            item.inner = new THREE.Group();\n        }\n\n        CombinerItem.prototype = {\n            enter: enter,\n            load: load,\n            flip: flip,\n            getJoints: getJoints,\n            setFlip: setFlip,\n        };\n\n        function enter(callback) {\n            var item = this;\n            item.outer.position.x = item.size.x;\n            TweenLite.to(item.outer.position, 0.6, {\n                x: 0,\n                ease: Power2.easeOut,\n                overwrite: 'all',\n                // ease: Elastic.easeOut, \n                onComplete: function () {\n                    if (typeof callback === 'function') {\n                        callback();\n                    }\n                }\n            });\n        }\n\n        function flip(callback) {\n            var item = this,\n                inner = item.inner;\n            // console.log('flip()');\n            item.flipped = !item.flipped;\n            var animation = {\n                pow: item.flipped ? 0 : 1\n            };\n            TweenLite.to(animation, 0.3, {\n                pow: item.flipped ? 1 : 0,\n                ease: Power2.easeOut,\n                overwrite: 'all',\n                // ease: Elastic.easeOut,\n                onUpdate: function () {\n                    THREE.Quaternion.slerp(item.quaternionL, item.quaternionR, item.model.quaternion, animation.pow);\n                    item.model.position.lerpVectors(item.positionL, item.positionR, animation.pow);\n                },\n                onComplete: function () {\n                    // console.log('flipped');\n                    // item.setFlip();\n                    if (typeof callback === 'function') {\n                        callback();\n                    }\n                },\n            });\n            /*\n            TweenLite.to(inner.rotation, 0.3, {\n                y: item.flipped ? Math.PI : 0,\n                ease: Power2.easeOut,\n                overwrite: 'all',\n                // ease: Elastic.easeOut,\n                // onUpdate: function() { },\n                onComplete: function () {\n                    // console.log('flipped');\n                    item.setFlip();\n                    if (typeof callback === 'function') {\n                        callback();\n                    }\n                },\n            });\n            */\n        }\n\n        function getCentroid(vertices) {\n            var center = vertices.reduce(function (a, b) {\n                return {\n                    x: a.x + b.x,\n                    y: a.y + b.y,\n                    z: a.z + b.z\n                };\n            });\n            return new THREE.Vector3().add(center).divideScalar(vertices.length);\n        }\n\n        function getJoints(geometry, materials, size) {\n            var joints = {},\n                ids = {},\n                /*\n                diffs = [\n                    new THREE.Vector3(-size.x / 2, 0, 0), // left\n                    new THREE.Vector3(size.x / 2, 0, 0), // right\n                    new THREE.Vector3(0, -size.y / 2, 0), // top\n                    new THREE.Vector3(0, size.y / 2, 0), // bottom\n                ],\n                */\n                names = ['left', 'right', 'top', 'bottom'],\n                colors = [0xff0000, 0x00ff00, 0x0000ff, 0xffff00],\n                index, joint, face;\n            materials.filter(function (material, index) {\n                // console.log(material);\n                var i = names.indexOf(material.name);\n                if (i !== -1) {\n                    var joint = new THREE.Group();\n                    // joint.diff = diffs[i];\n                    joint.name = names[i];\n                    joint.color = colors[i];\n                    joint.vertices = [];\n                    joints[material.name] = joint;\n                    ids[index] = joint;\n                }\n            });\n            for (var i = 0; i < geometry.faces.length; i++) {\n                face = geometry.faces[i];\n                joint = ids[String(face.materialIndex)];\n                if (joint) {\n                    joint.normal = joint.normal || face.normal; // assume all faces point toward direction;\n                    joint.vertices.push(geometry.vertices[face.a]);\n                    joint.vertices.push(geometry.vertices[face.b]);\n                    joint.vertices.push(geometry.vertices[face.c]);\n                    // console.log(joint.name, joint.normal);\n                }\n            }\n            for (var key in joints) {\n                joint = joints[key];\n                joint.position.copy(getCentroid(joint.vertices));\n                joint.origin = joint.position.clone();\n                // joint.diff.sub(joint.position);\n                joint.vertices = null;\n            }\n            if (!joints.left) {\n                joints.left = new THREE.Group();\n                joints.left.position.set(-size.x / 2, 0, 0);\n                joints.left.origin = joints.left.position.clone();\n                joints.left.normal = new THREE.Vector3(-1, 0, 0);\n                joints.left.c = colors[0];\n            }\n            if (!joints.right) {\n                joints.right = new THREE.Group();\n                joints.right.position.set(size.x / 2, 0, 0);\n                joints.right.origin = joints.right.position.clone();\n                joints.right.normal = new THREE.Vector3(1, 0, 0);\n                joints.right.c = colors[1];\n            }\n            if (DEBUG.ANGLE) {\n                joints.right.normal.y += 0.2;\n            }\n            // console.log('item.getJoints', joints, size);\n            return joints;\n        }\n\n        function load(geometry, materials) {\n            var item = this,\n                box = item.box,\n                size = item.size,\n                group = item.group,\n                outer = item.outer,\n                inner = item.inner;\n            var minx = Number.POSITIVE_INFINITY,\n                maxx = Number.NEGATIVE_INFINITY;\n            for (var v = 0; v < geometry.vertices.length; v++) {\n                geometry.vertices[v].x *= SCALE;\n                geometry.vertices[v].y *= SCALE;\n                geometry.vertices[v].z *= SCALE;\n                minx = Math.min(minx, geometry.vertices[v].x);\n                maxx = Math.max(maxx, geometry.vertices[v].x);\n            }\n            // var buffergeometry = new THREE.BufferGeometry();\n            // buffergeometry.fromGeometry(geometry);\n            var dx = (maxx + minx) / 2;\n            inner.position.x = dx;\n            console.log(minx, maxx, dx);\n            var model = new THREE.Mesh(geometry, materials);\n            box.setFromObject(model);\n            box.getSize(size);\n            var joints = item.getJoints(geometry, materials, size);\n            item.quaternionL = model.quaternion.clone();\n            var quaternionD = new THREE.Quaternion().setFromUnitVectors(joints.left.normal.clone().multiplyScalar(-1), joints.right.normal);\n            item.quaternionR = new THREE.Quaternion().multiplyQuaternions(item.quaternionL, flipQuaternion).multiply(quaternionD.inverse());\n            item.positionL = new THREE.Vector3();\n            item.positionR = joints.left.origin.clone().sub(joints.right.origin.clone().applyQuaternion(item.quaternionR));\n            model.geometry.mergeVertices();\n            THREE.GeometryUtils.computeVertexNormals(model.geometry, 20);\n            // model.geometry.computeFaceNormals();\n            // model.geometry.computeVertexNormals();\n            model.geometry.verticesNeedUpdate = true;\n            model.geometry.uvsNeedUpdate = true;\n            // model.geometry = Curvature.setEdges(model.geometry, 40);\n            model.geometry = new THREE.BufferGeometry().fromGeometry(model.geometry);\n            Curvature.setGeometry(model.geometry);\n            // model.geometry.mergeVertices();\n            // model.geometry.computeFaceNormals();\n            // model.geometry.normalsNeedUpdate = true;\n            // model.geometry.uvsNeedUpdate = true;\n            // model.geometry.computeMorphNormals();\n            /*           \n            model.geometry.computeFaceNormals();\n            model.geometry.computeVertexNormals();\n            model.geometry.computeBoundingBox();\n            */\n            // console.log(model);\n            if (DEBUG.MODELS) {\n                // geometry = new THREE.CylinderGeometry(2, 2, 10, 10);            \n                materials[1].color = new THREE.Color(0x000000);\n                geometry = new THREE.BoxGeometry(size.x, size.y, size.z);\n                var material = new THREE.MeshStandardMaterial({\n                    color: new THREE.Color(0.2 * ++I, 0, 0),\n                    wireframe: false,\n                    transparent: false,\n                    opacity: 1.0,\n                });\n                model = new THREE.Mesh(geometry, material);\n            }\n            for (var key in joints) {\n                var joint = joints[key];\n                var x = joint.normal.x,\n                    y = joint.normal.y,\n                    z = -joint.normal.z;\n                var euler = new THREE.Euler(\n                    0,\n                    Math.atan2(z, x),\n                    Math.atan2(y, Math.sqrt(x * x + z * z))\n                );\n                joint.rotation.copy(euler);\n                model.add(joint);\n                // joint.oquaternion = new THREE.Quaternion().multiplyQuaternions(joint.quaternion, flipQuaternion);\n                if (DEBUG.JOINTS) {\n                    var helper = new THREE.Mesh(\n                        new THREE.BoxGeometry(0.1, 0.1, 0.1),\n                        new THREE.MeshBasicMaterial({\n                            color: joint.color,\n                        })\n                    );\n                    joint.add(helper);\n                    /*\n                    var s = size.x / 10;\n                    var arrow = new THREE.ArrowHelper(new THREE.Vector3(1, 0, 0), new THREE.Vector3(), s, joint.color, s / 2, s / 2);\n                    joint.add(arrow);\n                    */\n                }\n            }\n            inner.position.set(size.x / 2 - dx, 0, 0);\n            inner.add(model);\n            outer.add(inner);\n            group.add(outer);\n            item.joints = joints;\n            item.model = model;\n        }\n\n        function setFlip() {\n            var item = this,\n                model = item.model;\n            // THREE.Quaternion.slerp(item.quaternionL, item.quaternionR, item.model.quaternion, item.flipped ? 1 : 0);\n            model.quaternion.copy(item.flipped ? item.quaternionR : item.quaternionL);\n            model.position.copy(item.flipped ? item.positionR : item.positionL);\n            item.group.updateMatrixWorld();\n            /*\n            var position = new THREE.Vector3();\n            if (item.flipped) {\n                // model.quaternion.copy(item.joints.right.quaternion.conjugate());\n                // item.joints.right.localToWorld(position);\n                // item.pivot.worldToLocal(position);\n                // item.model.setRotationFromQuaternion(item.joints.right.quaternion.conjugate());\n                // item.model.position.set(0, 0, 0).sub(item.joints.right.origin);\n                // position.x -= item.size.x / 2;\n                // item.model.quaternion.setFromUnitVectors(item.joints.left.normal, item.joints.right.normal);\n            } else {\n                // model.quaternion.copy(item.joints.left.quaternion.conjugate());\n                // item.joints.left.localToWorld(position);\n                // item.pivot.worldToLocal(position);\n                // item.model.setRotationFromQuaternion(item.joints.left.quaternion.conjugate());\n                // item.model.position.set(0, 0, 0).sub(item.joints.left.origin);\n                // position.x += item.size.x / 2;\n                // item.model.setRotationFromQuaternion(new THREE.Quaternion());\n            }\n            item.model.updateMatrixWorld();\n            // console.log('setFlip', item.flipped, item.joints.left.quaternion);\n            */\n        }\n\n        return CombinerItem;\n\n    }();\n\n    var Combiner = function () {\n\n        function Combiner(scene) {\n            var combiner = this;\n            combiner.flags = {\n                rotate: false,\n            };\n            combiner.scene = scene;\n            combiner.flipping = 0;\n            combiner.entering = 0;\n            combiner.items = [];\n            combiner.hittables = [];\n            combiner.center = new THREE.Vector3();\n            combiner.size = new THREE.Vector3();\n            combiner.group = new THREE.Group();\n            combiner.box = new THREE.Box3();\n            if (DEBUG.HELPER) {\n                combiner.boxhelper = new THREE.Box3Helper(combiner.box, 0xff00ff);\n                combiner.originhelper = new THREE.Mesh(\n                    new THREE.BoxGeometry(0.1, 0.1, 0.1),\n                    new THREE.MeshBasicMaterial({\n                        color: 0xaa00ff\n                    })\n                );\n                combiner.centerhelper = new THREE.Mesh(\n                    new THREE.BoxGeometry(0.1, 0.1, 0.1),\n                    new THREE.MeshBasicMaterial({\n                        color: 0xff00ff\n                    })\n                );\n                combiner.group.add(combiner.originhelper);\n                scene.add(combiner.boxhelper);\n                scene.add(combiner.centerhelper);\n            }\n            scene.add(combiner.group);\n        }\n\n        Combiner.prototype = {\n            add: add,\n            adjust: adjust,\n            busy: busy,\n            combine: combine,\n            fit: fit,\n            flip: flip,\n            flipItem: flipItem,\n            hitAndFlip: hitAndFlip,\n            prev: prev,\n            pop: pop,\n            next: next,\n            remove: remove,\n            rotate: rotate,\n            select: select,\n            selectedItem: selectedItem,\n            selectedModel: selectedModel,\n            unselect: unselect,\n            update: update,\n        };\n\n        function add(geometry, materials) {\n            var combiner = this,\n                box = combiner.box,\n                size = combiner.size,\n                items = combiner.items,\n                hittables = combiner.hittables,\n                group = combiner.group;\n\n            combiner.unselect();\n            var item = new CombinerItem();\n            item.load(geometry, materials);\n            items.push(item);\n            combiner.hittables = items.map(function (item) {\n                return item.model;\n            });\n            group.add(item.group);\n            item.setFlip();\n            combiner.adjust();\n            return item;\n        }\n\n        function adjust() {\n            var combiner = this;\n            combiner.combine();\n            combiner.fit();\n            // combiner.fitCamera();\n        }\n\n        function busy() {\n            var combiner = this;\n            return combiner.entering || combiner.flipping;\n        }\n\n        function combine() {\n            var combiner = this,\n                items = combiner.items,\n                group = combiner.group;\n            // var quaternionL = new THREE.Quaternion();\n            var quaternionR = new THREE.Quaternion();\n            var positionL = new THREE.Vector3();\n            var positionR = new THREE.Vector3();\n            var left, right;\n            // var groupPosition = new THREE.Vector3();\n            // var lquaternion;\n\n            function combineItem(item, i) {\n                if (item.flipped) {\n                    // lquaternion = item.joints.right.quaternion;\n                    left = item.joints.right;\n                    right = item.joints.left;\n                } else {\n                    // lquaternion = item.joints.left.oquaternion;\n                    left = item.joints.left;\n                    right = item.joints.right;\n                }\n                if (i > 0) {\n                    //\n                    item.group.setRotationFromQuaternion(quaternionR);\n                    item.group.position.copy(positionR);\n                    //\n                    // positionL = left.position.clone();\n                    // item.model.localToWorld(positionL);\n                    // \n                    if (false) {\n                        left.getWorldPosition(positionL);\n                        item.group.worldToLocal(positionL);\n                        item.group.position.sub(positionL);\n                    }\n                    //\n                    // console.log('left.position', positionL);\n                    // item.group.position.set(0, 0, 0);\n                    // left.getWorldQuaternion(quaternionL);\n                    /*\n                    positionR.sub(groupPosition);\n                    item.group.position.copy(positionR);\n                    // item.group.setRotationFromQuaternion(quaternionR.multiply(lquaternion));\n                    item.group.setRotationFromQuaternion(quaternionR);\n                    */\n                }\n                //} else {\n                //    item.group.rotation.z = rad(30);\n                //}\n                // console.log(left.origin);\n                // right.updateMatrixWorld();\n                right.getWorldQuaternion(quaternionR);\n                right.getWorldPosition(positionR);\n            }\n            if (items.length) {\n                // group.getWorldPosition(groupPosition);\n                items.filter(combineItem);\n            }\n        }\n\n        function fit() {\n            var combiner = this,\n                box = combiner.box,\n                size = combiner.size,\n                center = combiner.center,\n                centerhelper = combiner.centerhelper,\n                group = combiner.group;\n            box.setFromObject(group);\n            box.getCenter(center);\n            box.getSize(size);\n            if (DEBUG.HELPER) {\n                centerhelper.position.copy(center);\n            }\n            /*\n            group.worldToLocal(center);\n            group.position.x = -center.x;\n            group.position.y = -center.y;\n            group.position.z = -center.z;\n            */\n            return size;\n        }\n\n        function flip(callback) {\n            var combiner = this;\n            if (combiner.selection) {\n                combiner.flipItem(combiner.selection.item, callback);\n            }\n        }\n\n        function flipItem(item, callback) {\n            var combiner = this;\n            combiner.flipping++;\n            item.flip(function () {\n                combiner.flipping--;\n                combiner.adjust();\n                // combiner.unselect(); ???\n                if (typeof (callback) === 'function') {\n                    setTimeout(function () {\n                        callback();\n                    }, 100);\n                }\n            });\n        }\n\n        function hitAndFlip(raycaster, callback) {\n            var combiner = this,\n                items = combiner.items,\n                hittables = combiner.hittables;\n            var hitted = raycaster.intersectObjects(hittables);\n            if (hitted.length) {\n                var index = hittables.indexOf(hitted[0].object);\n                var item = items[index];\n                combiner.flipItem(item, callback);\n            }\n        }\n\n        function next() {\n            var combiner = this,\n                items = combiner.items;\n            var selection = null;\n\n            if (items.length) {\n                var index = combiner.selection ? combiner.selection.index : -1;\n                index = index + 1 >= items.length ? 0 : index + 1;\n                var item = items[index];\n                var rotation = item.outer.rotation.clone();\n                selection = {\n                    index: index,\n                    item: item,\n                    rotation: rotation,\n                };\n                combiner.selection = selection;\n            }\n            return selection;\n        }\n\n        function pop() {\n            var combiner = this,\n                items = combiner.items,\n                hittables = combiner.hittables,\n                group = combiner.group;\n            if (items.length) {\n                var item = items.pop();\n                if (item.group.parent) {\n                    group.remove(item.group);\n                }\n                combiner.hittables = items.map(function (item) {\n                    return item.model;\n                });\n                combiner.adjust();\n                return item;\n            }\n        }\n\n        function prev() {\n            var combiner = this,\n                items = combiner.items;\n            var selection = null;\n\n            if (items.length) {\n                var index = combiner.selection ? combiner.selection.index : 0;\n                index = index - 1 < 0 ? items.length - 1 : index - 1;\n                var item = items[index];\n                var rotation = item.outer.rotation.clone();\n                selection = {\n                    index: index,\n                    item: item,\n                    rotation: rotation,\n                };\n                combiner.selection = selection;\n            }\n            return selection;\n        }\n\n        function remove() {\n            var combiner = this,\n                items = combiner.items,\n                hittables = combiner.hittables,\n                group = combiner.group;\n            if (combiner.selection) {\n                var selection = combiner.selection;\n                var item = selection.item;\n                items.splice(selection.index, 1);\n                if (item.group.parent) {\n                    group.remove(item.group);\n                }\n                combiner.hittables = items.map(function (item) {\n                    return item.model;\n                });\n                combiner.unselect();\n                combiner.adjust();\n                if (items.length > selection.index) {\n                    combiner.entering++;\n                    items[selection.index].enter(function () {\n                        combiner.entering--;\n                    });\n                }\n                return item;\n            } else {\n                return combiner.pop();\n            }\n        }\n\n        function rotate(y) {\n            var combiner = this;\n            combiner.selection.item.outer.rotation.x = combiner.selection.rotation.x + y;\n            combiner.selection.item.group.updateMatrixWorld();\n            combiner.adjust();\n        }\n\n        function select(raycaster) {\n            var combiner = this,\n                items = combiner.items,\n                hittables = combiner.hittables;\n\n            combiner.unselect();\n            var hitted = raycaster.intersectObjects(hittables);\n            var selection = null;\n            if (hitted.length) {\n                var index = hittables.indexOf(hitted[0].object);\n                var item = items[index];\n                var rotation = item.outer.rotation.clone();\n                /*\n                item.outline(true, combiner.library);\n                // item.model.material.emissive = new THREE.Color(0x888888);\n                */\n                // item.model.material.needsUpdate = true;\n                selection = {\n                    index: index,\n                    item: item,\n                    rotation: rotation,\n                };\n                combiner.selection = selection;\n            }\n            return selection;\n        }\n\n        function selectedItem(callback) {\n            var combiner = this;\n            if (combiner.selection && typeof callback === 'function') {\n                callback(combiner.selection.item);\n            }\n        }\n\n        function selectedModel(callback) {\n            var combiner = this;\n            if (combiner.selection && typeof callback === 'function') {\n                callback(combiner.selection.item.model);\n            }\n        }\n\n        function unselect() {\n            var combiner = this;\n            if (combiner.selection) {\n                /*\n                combiner.selection.item.outline(false, combiner.library);\n                // combiner.selection.item.model.material.emissive = new THREE.Color(0x000000);\n                */\n                // combiner.selection.item.model.material.needsUpdate = true;\n                combiner.selection = null;\n            }\n        }\n\n        function update() {\n            var combiner = this,\n                flags = combiner.flags;\n            if (!combiner.busy()) {\n                if (flags.rotate) {\n                    if (combiner.items.length) {\n                        var first = combiner.items[0];\n                        first.outer.rotation.x += 0.01;\n                        combiner.adjust();\n                    }\n                } else {\n                    // combiner.combine();\n                    combiner.fit();\n                }\n            }\n        }\n\n        return Combiner;\n\n    }();\n\n    window.Combiner = Combiner;\n\n}());\n/* global window, document, console, TweenLite */\n\n(function () {\n    'use strict';\n\n    /* \n    <script id=\"vertexShaderRaw\" type=\"x-shader/x-vertex\">\n        attribute float curvature;\n        varying float vCurvature;\n        void main() {\n            vec3 p = position;\n            vec4 modelViewPosition = modelViewMatrix * vec4( p , 1.0 );\n            gl_Position = projectionMatrix * modelViewPosition;\n            vCurvature = curvature;\n        }\n    </script>\n    */\n    /*\n    <script id=\"fragmentShaderRaw\" type=\"x-shader/x-fragment\">\n        varying vec3 vViewPosition;\n        varying float vCurvature;\n        void main() {\n            gl_FragColor = vec4( vCurvature * 2.0, 0.0, 0.0, 0.0 );\n        }\n    </script>\n    */\n\n    var Curvature = function () {\n\n        function Curvature() {\n\n        }\n\n        // statics\n        Curvature.setGeometry = setGeometry;\n        Curvature.setEdges = setEdges;\n\n        function setGeometry(geometry) {\n            // geometry.center();\n            var i, positions, normals, px, py, pz, nx, ny, nz, sx, sy, sz, pyx, pyz, pzx, nyx, nyz, nzx, yx, yz, zx, xy, zy, xz;\n            var dict = {};\n            positions = geometry.attributes.position.array;\n            normals = geometry.attributes.normal.array;\n            for (i = 0; i < geometry.attributes.position.count; i += 3) {\n                px = new THREE.Vector3(positions[3 * i], positions[3 * i + 1], positions[3 * i + 2]);\n                py = new THREE.Vector3(positions[3 * (i + 1)], positions[3 * (i + 1) + 1], positions[3 * (i + 1) + 2]);\n                pz = new THREE.Vector3(positions[3 * (i + 2)], positions[3 * (i + 2) + 1], positions[3 * (i + 2) + 2]);\n                nx = new THREE.Vector3(normals[3 * i], normals[3 * i + 1], normals[3 * i + 2]).normalize();\n                ny = new THREE.Vector3(normals[3 * (i + 1)], normals[3 * (i + 1) + 1], normals[3 * (i + 1) + 2]).normalize();\n                nz = new THREE.Vector3(normals[3 * (i + 2)], normals[3 * (i + 2) + 1], normals[3 * (i + 2) + 2]).normalize();\n                sx = px.toArray().toString();\n                sy = py.toArray().toString();\n                sz = pz.toArray().toString();\n                pyx = new THREE.Vector3().subVectors(py, px);\n                pyz = new THREE.Vector3().subVectors(py, pz);\n                pzx = new THREE.Vector3().subVectors(pz, px);\n                nyx = new THREE.Vector3().subVectors(ny, nx);\n                nyz = new THREE.Vector3().subVectors(ny, nz);\n                nzx = new THREE.Vector3().subVectors(nz, nx);\n                yx = ny.dot(pyx.normalize());\n                yz = ny.dot(pyz.normalize());\n                zx = nz.dot(pzx.normalize());\n                xy = -nx.dot(pyx.normalize());\n                zy = -nz.dot(pyz.normalize());\n                xz = -nx.dot(pzx.normalize());\n                dict[sx] = dict[sx] || {};\n                dict[sx][sy] = xy;\n                dict[sx][sz] = xz;\n                dict[sy] = dict[sy] || {};\n                dict[sy][sx] = yx;\n                dict[sy][sz] = yz;\n                dict[sz] = dict[sz] || {};\n                dict[sz][sx] = zx;\n                dict[sz][sy] = zy;\n            }\n\n            var curvatures = {};\n            var min = 1000,\n                max = 0;\n\n            Object.keys(dict).forEach(function (key) {\n                curvatures[key] = average(dict[key]);\n            });\n\n            /*\n            var smoothed = Object.create(curvatures);\n            Object.keys(dict).forEach(function (key) {\n                var count = 0;\n                var sum = 0;\n                Object.keys(dict[key]).forEach(function (key2) {\n                    sum += smoothed[key2];\n                    count++;\n                });\n                smoothed[key] = sum / count;\n            });\n            curvatures = smoothed;\n            */\n\n            Object.keys(curvatures).forEach(function (key) {\n                var val = Math.abs(curvatures[key]);\n                if (val < min) min = val;\n                if (val > max) max = val;\n            });\n\n            var range = (max - min);\n            console.log('range', range);\n\n            Object.keys(curvatures).forEach(function (key) {\n                var val = Math.abs(curvatures[key]);\n                if (curvatures[key] < 0) {\n                    curvatures[key] = (min - val) / range;\n                } else {\n                    curvatures[key] = (val - min) / range;\n                }\n            });\n\n            var attribute = new Float32Array(geometry.attributes.position.count);\n\n            var p, s, f;\n            for (i = 0; i < geometry.attributes.position.count; i++) {\n                positions = geometry.attributes.position.array;\n                p = new THREE.Vector3(positions[3 * i], positions[3 * i + 1], positions[3 * i + 2]);\n                s = p.toArray().toString();\n                f = curvatures[s];\n                f = THREE.Math.clamp(THREE.Math.smoothstep(f, 0.0, 1.0) * 2.0, 0.0, 1.0);\n                attribute[i] = f;\n            }\n\n            // var filtered = new Float32Array(attribute);\n            // filterConvex(filtered);\n            geometry.addAttribute('curvature', new THREE.BufferAttribute(attribute, 1));\n\n            /*\n            var filtered = new Float32Array(attribute);\n            filterConvex(filtered);\n            geometry.attributes.curvature.array = filtered;\n            geometry.attributes.curvature.needsUpdate = true;\n            */\n\n            /*\n            var materialRaw = new THREE.ShaderMaterial({\n                vertexShader: document.getElementById('vertexShaderRaw').textContent,\n                fragmentShader: document.getElementById('fragmentShaderRaw').textContent\n            });\n\n            ninjaMeshRaw = new THREE.Mesh(geometry, materialRaw);\n            //init GUI\n            var filtered = new Float32Array(attribute);\n            filterConvex(filtered);\n            geometry.attributes.curvature.array = filtered;\n            geometry.attributes.curvature.needsUpdate = true;\n            */\n        }\n\n        function setEdges(geometry, thresholdAngle) {\n            thresholdAngle = thresholdAngle || 90;\n            var thresholdDot = Math.cos(THREE.Math.DEG2RAD * thresholdAngle);\n\n            var faces = geometry.faces,\n                face;\n            geometry = new THREE.BufferGeometry().fromGeometry(geometry);\n            var edges = {},\n                edge, key, ea, eb, i, ia, ib, ic, va, vb, vc, na, nb, nc;\n            // var positions = geometry.attributes.position.array;\n            var normals = geometry.attributes.normal.array;\n\n            function addKey(va, vb, ia, ib, i) {\n                ea = Math.min(va, vb);\n                eb = Math.max(va, vb);\n                key = ea + '-' + eb;\n                if (edges[key] === undefined) {\n                    edges[key] = {\n                        a: ia,\n                        b: ib,\n                        c: ia,\n                        d: ib,\n                        fa: i,\n                        fb: undefined\n                    };\n                } else {\n                    edges[key].fb = i;\n                    edges[key].c = ia;\n                    edges[key].d = ib;\n                }\n            }\n            for (var f = 0; f < faces.length; f++) {\n                face = faces[f];\n                i = f * 9;\n                va = face.a;\n                vb = face.b;\n                vc = face.c;\n                ia = i;\n                ib = i + 3;\n                ic = i + 6;\n                addKey(va, vb, ia, ib, i);\n                addKey(vb, vc, ib, ic, i);\n                addKey(vc, va, ic, ia, i);\n            }\n\n            /*\n            function addKey(a, b, i) {\n                ea = Math.min(a, b);\n                eb = Math.max(a, b);\n                key = ea + '-' + eb;\n                if (edges[key] === undefined) {\n                    edges[key] = {\n                        a: ea,\n                        b: eb,\n                        fa: i,\n                        fb: undefined\n                    };\n                } else {\n                    edges[key].fb = i;\n                    console.log(i);\n                }\n            }\n            for (i = 0; i < positions.length; i += 9) {\n                ia = i;\n                ib = i + 3;\n                ic = i + 6;\n                addKey(ia, ib, i);\n                addKey(ib, ic, i);\n                addKey(ic, ia, i);\n            }\n            */\n            var attribute = new Float32Array(geometry.attributes.position.count);\n            for (i = 0; i < geometry.attributes.position.count; i++) {\n                attribute[i] = 1.0;\n            }\n            var edgeKeys = Object.keys(edges);\n            console.log(edgeKeys.length);\n            var edgeMatches = 0;\n\n            function fillEdge(e) {\n                attribute[e.a / 3] = 0.0;\n                attribute[e.b / 3] = 0.0;\n                attribute[e.c / 3] = 0.0;\n                attribute[e.d / 3] = 0.0;\n                edgeMatches++;\n            }\n            for (key in edges) {\n                edge = edges[key];\n                if (edge.fb === undefined) {\n                    fillEdge(edge);\n                } else {\n                    ia = edge.fa;\n                    ib = edge.fb;\n                    na = new THREE.Vector3(normals[ia], normals[ia + 1], normals[ia + 2]);\n                    nb = new THREE.Vector3(normals[ib], normals[ib + 1], normals[ib + 2]);\n                    if (na.dot(nb) <= thresholdDot) {\n                        fillEdge(edge);\n                    }\n                }\n            }\n            geometry.addAttribute('curvature', new THREE.BufferAttribute(attribute, 1));\n            console.log('matches', edgeMatches, (edgeMatches / edgeKeys.length * 100).toFixed(2));\n            return geometry;\n        }\n\n        function setEdges1(geometry, thresholdAngle) {\n            thresholdAngle = thresholdAngle || 90;\n            var thresholdDot = Math.cos(THREE.Math.DEG2RAD * thresholdAngle);\n            var edge = [0, 0],\n                edges = {},\n                edge1, edge2;\n            var key, keys = ['a', 'b', 'c'];\n            /*\n            var geometry2;\n            if (geometry.isBufferGeometry) {\n                geometry2 = new THREE.Geometry();\n                geometry2.fromBufferGeometry(geometry);\n            } else {\n                geometry2 = geometry.clone();\n            }\n            */\n            // geometry2.mergeVertices();\n            // geometry2.computeFaceNormals();\n            var faces = geometry.faces;\n            // now create a data structure where each entry represents an edge with its adjoining faces\n            for (var i = 0; i < faces.length; i++) {\n                var face = faces[i];\n                for (var j = 0; j < 3; j++) {\n                    edge1 = face[keys[j]];\n                    edge2 = face[keys[(j + 1) % 3]];\n                    edge[0] = Math.min(edge1, edge2);\n                    edge[1] = Math.max(edge1, edge2);\n                    key = edge[0] + ',' + edge[1];\n                    if (edges[key] === undefined) {\n                        edges[key] = {\n                            a: edge[0],\n                            b: edge[1],\n                            fa: i,\n                            fb: undefined\n                        };\n                    } else {\n                        edges[key].fb = i;\n                    }\n                }\n            }\n            var vertices = geometry.vertices;\n            var attribute = new Float32Array(vertices.length * 3);\n            for (var i = 0; i < vertices.length * 3; i++) {\n                attribute[i] = 1.0;\n            }\n            var edgeKeys = Object.keys(edges);\n            console.log(edgeKeys.length);\n            var edgeMatches = 0;\n            for (key in edges) {\n                var e = edges[key];\n                // an edge is only rendered if the angle (in degrees) between the face normals of the adjoining faces exceeds this value. default = 1 degree.\n                if (e.fb === undefined || faces[e.fa].normal.dot(faces[e.fb].normal) <= thresholdDot) {\n                    /*\n                    var vertex = vertices[e.a];\n                    vertices.push(vertex.x, vertex.y, vertex.z);\n                    vertex = vertices[e.b];\n                    vertices.push(vertex.x, vertex.y, vertex.z);\n                    */\n                    attribute[e.a * 3] = 0.0;\n                    attribute[e.a * 3 + 1] = 0.0;\n                    attribute[e.a * 3 + 2] = 0.0;\n                    attribute[e.b * 3] = 0.0;\n                    attribute[e.b * 3 + 1] = 0.0;\n                    attribute[e.b * 3 + 2] = 0.0;\n                    edgeMatches++;\n                }\n            }\n            console.log(geometry.normals.length);\n            console.log('matches', edgeMatches, (edgeMatches / edgeKeys.length * 100).toFixed(2));\n            geometry = new THREE.BufferGeometry().fromDirectGeometry(geometry);\n            geometry.addAttribute('curvature', new THREE.BufferAttribute(attribute, 1));\n            console.log('verts', vertices.length, geometry.attributes.position.count);\n            // build geometry\n            // this.addAttribute('position', new Float32BufferAttribute(vertices, 3));\n            return geometry;\n        }\n\n        /*   \n        fn cMAKgetAngleBetweenFaces normal1 normal2 center1 center2 = (\n    \t    local faMatrix = translate (matrixFromNormal normal1) center1\n\t        local fbCoord = (center2 * (inverse faMatrix)).z\n\t        local normAngle = acos(dot (normalize normal1) (normalize normal2))\n\t        if fbCoord < 0 do normAngle = 360 - normAngle\n\t        normAngle \n\t    )\n        */\n\n        function average(dict) {\n            var sum = 0;\n            var length = 0;\n            Object.keys(dict).forEach(function (key) {\n                sum += dict[key];\n                length++;\n            });\n            return sum / length;\n        }\n\n        function filterConcave(curvature) {\n            for (var i = 0; i < curvature.length; i++) {\n                curvature[i] = Math.abs(THREE.Math.clamp(curvature[i], -1, 0));\n            }\n        }\n\n        function filterConvex(curvature) {\n            for (var i = 0; i < curvature.length; i++) {\n                curvature[i] = THREE.Math.smoothstep(curvature[i], 0.0, 0.7);\n                // curvature[i] = THREE.Math.clamp(curvature[i], 0, 1);\n            }\n        }\n\n        function filterBoth(curvature) {\n            for (var i = 0; i < curvature.length; i++) {\n                curvature[i] = Math.abs(curvature[i]);\n            }\n        }\n\n        return Curvature;\n\n    }();\n\n    window.Curvature = Curvature;\n\n}());\n/* global window, document, console, TweenLite */\n\n(function () {\n    'use strict';\n\n    var Effects = function () {\n\n        function Effects(scene, camera, renderer, w, h) {\n            var effects = this;\n            //\n            var renderPass = new THREE.RenderPass(scene, camera);\n            //\n            var outlinePass = new THREE.OutlinePass(new THREE.Vector2(w, h), scene, camera);\n            outlinePass.visibleEdgeColor.set(0x00ff00);\n            outlinePass.hiddenEdgeColor.set(0x000000);\n            outlinePass.edgeStrength = 5.0;\n            outlinePass.edgeGlow = 0.0;\n            outlinePass.edgeThickness = 1.0;\n            outlinePass.pulsePeriod = 2;\n            outlinePass.rotate = false;\n            outlinePass.usePatternTexture = false;\n            //\n            var fxaaPass = new THREE.ShaderPass(THREE.FXAAShader);\n            fxaaPass.uniforms.resolution.value.set(1 / w, 1 / h);\n            fxaaPass.renderToScreen = true;\n            //\n            var composer = new THREE.EffectComposer(renderer);\n            composer.addPass(renderPass);\n            composer.addPass(outlinePass);\n            composer.addPass(fxaaPass);\n            //\n            effects.renderPass = renderPass;\n            effects.outlinePass = outlinePass;\n            effects.fxaaPass = fxaaPass;\n            effects.composer = composer;\n        }\n\n        Effects.prototype = {\n            update: update,\n            resize: resize,\n            select: select,\n            unselect: unselect,\n        };\n\n        function update() {\n            var effects = this;\n            effects.composer.render();\n        }\n\n        function resize(w, h) {\n            var effects = this;\n            effects.composer.setSize(w, h);\n            effects.fxaaPass.uniforms.resolution.value.set(1 / w, 1 / h);\n        }\n\n        function select(object) {\n            var effects = this;\n            effects.outlinePass.selectedObjects = [object];\n        }\n\n        function unselect() {\n            var effects = this;\n            effects.outlinePass.selectedObjects = [];\n        }\n\n        return Effects;\n\n    }();\n\n    window.Effects = Effects;\n\n}());\n/* global window, document, console, TweenLite */\n\n(function () {\n    'use strict';\n\n    var DEBUG = true;\n    var RAD = Math.PI / 180;\n    var I = 0;\n\n    function rad(degree) {\n        return degree * RAD;\n    }\n\n    var Fitter = function () {\n\n        function Fitter(scene, camera, controls) {\n            var fitter = this;\n            fitter.scene = scene;\n            fitter.camera = camera;\n            fitter.dummy = camera.clone();\n            fitter.controls = controls;\n            fitter.projector = new THREE.Projector();\n            fitter.position = new THREE.Vector3();\n            fitter.target = new THREE.Vector3();\n            fitter.center = new THREE.Vector3();\n            fitter.size = new THREE.Vector3();\n            fitter.box = new THREE.Box3();\n            fitter.boxhelper = new THREE.Box3Helper(fitter.box, 0xff0000);\n\n            fitter.rotate = false;\n\n            fitter.target = new THREE.Vector3(0, 0, 0);\n            fitter.distance = 22;\n            fitter.angle = 0;\n\n            fitter.endTarget = new THREE.Vector3(0, 0, 0);\n            fitter.position = new THREE.Vector3(0, 0, 0);\n            fitter.distanceMin = 10;\n            fitter.distanceMax = 34;\n            fitter.rotationAngle = 1;\n            fitter.dragAngle = 0;\n            fitter.zoom = 1; // eliminabili ??\n            fitter.pow = 0; // eliminabili ??\n            /*\n            if (combiner.selected.item.type === APP.Parts.typeEnum.BladePlug) {\n                fitter.pow = 1;\n            } else {\n                fitter.pow = 0;\n            }\n            */\n            if (DEBUG) {\n                fitter.scene.add(fitter.boxhelper);\n            }\n        }\n\n        Fitter.prototype = {\n            fit: fit,\n            toScreen: toScreen,\n            toWorld: toWorld,\n            update: update,\n        };\n\n        function fit(combiner, offset, up) {\n            if (!offset) {\n                offset = 1.3;\n            }\n            if (!up) {\n                up = new THREE.Vector3(0, 1, 0);\n            }\n            var fitter = this,\n                projector = fitter.projector,\n                box = fitter.box,\n                size = fitter.size,\n                center = fitter.center,\n                camera = fitter.camera,\n                controls = fitter.controls,\n                dummy = fitter.dummy;\n            var object = combiner.selection ? combiner.selection.item.group : combiner.group;\n            box.setFromObject(object);\n            box.getCenter(center);\n            dummy.position.copy(camera.position);\n            dummy.quaternion.copy(camera.quaternion);\n            dummy.up = up;\n            dummy.lookAt(center);\n            dummy.updateProjectionMatrix();\n            var min = fitter.toScreen(box.min);\n            var max = fitter.toScreen(box.max);\n            var sc = fitter.toScreen(center);\n            box.applyMatrix4(dummy.matrixWorldInverse);\n            box.getSize(size);\n            var aspect = size.x / size.y;\n            var dim = (camera.aspect > aspect) ? size.y : size.x;\n            if (camera.aspect < aspect) {\n                dim /= camera.aspect;\n            }\n            dim *= offset;\n            var z = dim / 2 / Math.sin(camera.fov / 2 * RAD);\n            dummy.position.normalize().multiplyScalar(z);\n            fitter.distance = dummy.position.distanceTo(center);\n            // camera.far = distance + dim;\n            dummy.updateProjectionMatrix();\n            var vfrom = camera.position.clone();\n            var vto = dummy.position;\n            var qfrom = camera.quaternion.clone();\n            var qto = dummy.quaternion;\n            var animation = {\n                pow: 0,\n            };\n            TweenLite.to(animation, 0.6, {\n                pow: 1,\n                ease: Power2.easeOut,\n                overwrite: 'all',\n                // ease: Elastic.easeOut,\n                onUpdate: function () {\n                    camera.position.lerpVectors(vfrom, vto, animation.pow);\n                    THREE.Quaternion.slerp(qfrom, qto, camera.quaternion, animation.pow);\n                    camera.updateProjectionMatrix();\n                },\n                onComplete: function () {\n                    if (controls) {\n                        // controls.maxDistance = distance + dim;\n                        controls.target.copy(center);\n                        controls.update();\n                    }\n                }\n            });\n        }\n\n        function toWorld(v) {\n            var fitter = this,\n                projector = fitter.projector,\n                camera = fitter.camera,\n                w = window.innerWidth / 2,\n                h = window.innerHeight / 2;\n            var world = v.clone();\n            world.x = world.x / w - 1;\n            world.y = -world.y / h + 1;\n            projector.unprojectVector(world, camera);\n            return world;\n        }\n\n        function toScreen(v) {\n            var fitter = this,\n                camera = fitter.camera,\n                w = window.innerWidth / 2,\n                h = window.innerHeight / 2;\n            var screen = v.clone();\n            screen.project(camera);\n            screen.x = (screen.x + 1) * w;\n            screen.y = (-screen.y + 1) * h;\n            return screen;\n        }\n\n        function update() {\n            var fitter = this,\n                target = fitter.target,\n                endTarget = fitter.endTarget,\n                position = fitter.position,\n                distance = fitter.distance,\n                zoom = fitter.zoom,\n                dragAngle = fitter.dragAngle,\n                rotationAngle = fitter.rotationAngle,\n                pow = fitter.pow,\n                camera = fitter.camera;\n            if (fitter.rotate) {\n                rotationAngle = fitter.rotationAngle += 0.0002;\n            }\n\n            target.x += (endTarget.x - target.x) / 40;\n            target.y += (endTarget.y - target.y) / 40;\n            target.z += (endTarget.z - target.z) / 40;\n\n            position.x = target.x + distance * zoom * Math.cos(dragAngle + rotationAngle);\n            position.y = target.y + distance * zoom; // * (0.5 + 1.5 * (1 - pow));\n            position.z = target.z + distance * zoom * Math.sin(dragAngle + rotationAngle);\n\n            camera.position.x += (position.x - camera.position.x) / 13;\n            camera.position.y += (position.y - camera.position.y) / 13;\n            camera.position.z += (position.z - camera.position.z) / 13;\n            // camera.up = new THREE.Vector3(0, 0, -1);\n\n            camera.lookAt(target);\n        }\n\n        return Fitter;\n\n    }();\n\n    window.Fitter = Fitter;\n\n}());\n/* global window, document, console  */\n\n(function () {\n    'use strict';\n\n    var Forge = function () {\n\n        function Forge() {\n            var service = this;\n            service.loader = new THREE.JSONLoader();\n        }\n\n        Forge.prototype = {\n            load: load,\n        };\n\n        var i = 0;\n\n        function load(callback) {\n            var service = this;\n            http({\n                url: i % 2 === 0 ? 'img/Curved Body 1.js' : 'img/Angled Emitter 1.js',\n                onload: function (data) {\n                    data = data.replace(new RegExp('transparency', 'g'), 'opacity');\n                    data = data.replace(new RegExp('.#QNAN0', 'g'), '.0');\n                    var model = service.loader.parse(JSON.parse(data));\n                    callback(model.geometry, model.materials);\n                }\n            });\n            i++;\n        }\n\n        function http(options) {\n            var o = {\n                method: 'GET',\n                responseType: 'text',\n            };\n            if (!options || !options.url || !options.onload) {\n                return;\n            }\n            for (var p in options) {\n                o[p] = options[p];\n            }\n            var req = new XMLHttpRequest();\n            req.open(o.method, o.url, true);\n            req.responseType = o.responseType; // 'blob';\n            req.onload = function () {\n                if (this.status === 200) {\n                    // var blob = this.response;\n                    // var image = URL.createObjectURL(blob); // IE10+\n                    o.onload(this.response);\n                }\n            };\n            if (o.onerror) {\n                req.onerror = o.onerror;\n            }\n            if (o.onprogress) {\n                req.onerror = o.onprogress;\n            }\n            req.send();\n        }\n\n        return Forge;\n\n    }();\n\n    window.Forge = Forge;\n\n}());\n/* global window, document, console, TweenLite */\n\n(function () {\n    'use strict';\n\n    var Library = function () {\n\n        var DEBUG = {\n            FINISHES: ['standard', 'black', 'weathered'],\n            randomFinish: function () {\n                // return DEBUG.FINISHES[2];\n                return {\n                    key: DEBUG.FINISHES[Math.floor(Math.random() * DEBUG.FINISHES.length)],\n                    color: null\n                };\n            },\n            randomSecondaryFinish: function () {\n                // return DEBUG.FINISHES[2];\n                return {\n                    key: DEBUG.FINISHES[Math.floor(Math.random() * DEBUG.FINISHES.length)],\n                    color: null\n                };\n            }\n        };\n\n        var BASE = 'img/textures/';\n        var ANISOTROPY = 1;\n        var USE_PHONG = false;\n\n        function Library(renderer) {\n            ANISOTROPY = renderer.capabilities.getMaxAnisotropy();\n            this.replaceShader();\n            var manager = new THREE.LoadingManager();\n            /*\n            manager.onProgress = function (item, loaded, total) {\n                console.log('Library.manager.onProgress', item, loaded, total);\n            };\n            */\n            this.renderer = renderer;\n            this.manager = manager;\n            this.textures = this.getTextures();\n            this.materials = this.getMaterials();\n        }\n\n        // publics\n        Library.prototype = {\n            getMaterials: getMaterials,\n            getTextures: getTextures,\n            getTexture: getTexture,\n            getTextureCube: getTextureCube,\n            getTextureCubeHdr: getTextureCubeHdr,\n            replaceShader: replaceShader,\n            setFinish: setFinish,\n            setNextFloor: setNextFloor,\n            updateMaterials: updateMaterials,\n        };\n\n        // statics\n        Library.hexToRgb = hexToRgb;\n        Library.FLOOR = 0;\n\n        function getMaterials() {\n            var service = this,\n                manager = this.manager,\n                loader = this.loader,\n                textures = this.textures,\n                materials;\n            if (USE_PHONG) {\n                materials = {\n                    floor: new THREE.MeshPhongMaterial({\n                        bumpMap: textures.floor,\n                        bumpScale: 0.05,\n                        color: 0x101010,\n                        specular: 0x101010,\n                        reflectivity: 0.15,\n                        shininess: 12,\n                        // metal: true,\n                    }),\n                    wrap: new THREE.MeshPhongMaterial({\n                        name: 'wrap',\n                        color: 0x101010,\n                        specular: 0x444444,\n                        shininess: 7,\n                        reflectivity: 0.75,\n                        specularMap: textures.leatherLight,\n                        bumpMap: textures.leatherBump,\n                        bumpScale: 0.15,\n                        combine: THREE.MixOperation,\n                        // metal: true,\n                    }),\n                    bronze: new THREE.MeshPhongMaterial({\n                        name: 'bronze',\n                        color: 0xc07f5d,\n                        specular: 0x555555,\n                        specularMap: textures.silver,\n                        shininess: 10,\n                        reflectivity: 0.20,\n                        envMap: textures.env,\n                        combine: THREE.MixOperation,\n                        bumpMap: textures.silver,\n                        bumpScale: 0.001,\n                        // metal: true,\n                    }),\n                    gold: new THREE.MeshPhongMaterial({\n                        name: 'gold',\n                        color: 0xc8ad60,\n                        specular: 0x555555,\n                        specularMap: textures.silver,\n                        shininess: 10,\n                        reflectivity: 0.20,\n                        envMap: textures.env,\n                        combine: THREE.MixOperation,\n                        bumpMap: textures.silver,\n                        bumpScale: 0.001,\n                        // metal: true,\n                    }),\n                    green: new THREE.MeshPhongMaterial({\n                        name: 'green',\n                        color: 0x00aa00,\n                        specular: 0x333333,\n                        specularMap: textures.silver,\n                        shininess: 30,\n                        reflectivity: 0.10,\n                        envMap: textures.env,\n                        combine: THREE.MixOperation,\n                        bumpMap: textures.silver,\n                        bumpScale: 0.003,\n                        // metal: true,\n                    }),\n                    red: new THREE.MeshPhongMaterial({\n                        name: 'red',\n                        color: 0xdd0000,\n                        specular: 0x333333,\n                        specularMap: textures.silver,\n                        shininess: 30,\n                        reflectivity: 0.10,\n                        envMap: textures.env,\n                        combine: THREE.MixOperation,\n                        bumpMap: textures.silver,\n                        bumpScale: 0.003,\n                        // metal: true,\n                    }),\n                    standard: {\n                        silver: new THREE.MeshPhongMaterial({\n                            name: 'silver',\n                            color: 0x888888,\n                            specular: 0x555555,\n                            specularMap: textures.silver,\n                            shininess: 30,\n                            reflectivity: 0.15,\n                            envMap: textures.env,\n                            combine: THREE.MixOperation,\n                            bumpMap: textures.silver,\n                            bumpScale: 0.003,\n                            // metal: true,\n                        }),\n                        black: new THREE.MeshPhongMaterial({ // MeshLambertMaterial\n                            name: 'black',\n                            color: 0x0d0d0d, // 0x0d0d0d\n                            reflectivity: 0.3,\n                            envMap: textures.env,\n                            combine: THREE.MultiplyOperation\n                        }),\n                    },\n                    weathered: {\n                        silver: new THREE.MeshPhongMaterial({\n                            name: 'silver',\n                            color: 0x444444,\n                            specular: 0x555555,\n                            specularMap: textures.weathered,\n                            shininess: 90,\n                            reflectivity: 0.15,\n                            envMap: textures.env,\n                            combine: THREE.MixOperation,\n                            bumpMap: textures.silver,\n                            bumpScale: 0.003,\n                            // metal: true,\n                            map: textures.weathered,\n                            roughness: 0.2,\n                            // roughnessMap: textures.silver,\n                            metalness: 0.5,\n                            metalnessMap: textures.weathered,\n                        }),\n                        black: new THREE.MeshPhongMaterial({\n                            name: 'black',\n                            color: 0x333333,\n                            specular: 0x444444,\n                            specularMap: textures.weathered,\n                            shininess: 90,\n                            reflectivity: 0.05,\n                            envMap: textures.env,\n                            combine: THREE.MixOperation,\n                            bumpMap: textures.silver,\n                            bumpScale: 0.003,\n                            // metal: true,\n                            map: textures.weathered,\n                            roughness: 1.4,\n                            roughnessMap: textures.weathered,\n                            metalness: 0.5,\n                            metalnessMap: textures.silver,\n                        }),\n                        /*\n                        black: new THREE.MeshLambertMaterial({\n                            name: 'black',\n                            color: 0x070707, // 0x070707\n                            specular: 0x0a0a0a,\n                            reflectivity: 0.05,\n                            envMap: textures.env,\n                            combine: THREE.MultiplyOperation\n                        }),\n                        */\n                    },\n                    black: {\n                        silver: new THREE.MeshPhongMaterial({\n                            name: 'silver',\n                            color: 0x070707, // 0x070707\n                            specular: 0x0a0a0a,\n                            reflectivity: 0.05,\n                            envMap: textures.env,\n                            combine: THREE.MultiplyOperation\n                        }),\n                        black: new THREE.MeshPhongMaterial({ // MeshLambertMaterial\n                            name: 'black',\n                            color: 0x060606, // 0x060606\n                            specular: 0x0a0a0a,\n                            reflectivity: 0.05,\n                            envMap: textures.env,\n                            combine: THREE.MultiplyOperation\n                        }),\n                    },\n                    light: {\n                        off: new THREE.MeshPhongMaterial({\n                            name: 'light',\n                            opacity: 0.98,\n                            transparent: true,\n                            color: 0x444444,\n                            specular: 0x888888,\n                            shininess: 20,\n                            reflectivity: 0.3\n                        }),\n                        on6: new THREE.MeshPhongMaterial({\n                            name: 'light',\n                            opacity: 0.98,\n                            transparent: true,\n                            color: 0x444444,\n                            emissive: 0x444444,\n                            specular: 0x888888,\n                            shininess: 20,\n                            reflectivity: 0.3\n                        }),\n                        on12: new THREE.MeshPhongMaterial({\n                            name: 'light',\n                            color: 0xffffff,\n                            emissive: 0x888888,\n                            specular: 0xffffff,\n                            shininess: 100,\n                            reflectivity: 0.3\n                        }),\n                    },\n                    glare: {\n                        off: new THREE.MeshLambertMaterial({\n                            name: 'glare',\n                            opacity: 0,\n                            transparent: true,\n                            color: 0x000000,\n                        }),\n                        on6: new THREE.MeshLambertMaterial({\n                            name: 'glare',\n                            opacity: 0.6,\n                            transparent: true,\n                            color: 0xecf4fb,\n                            map: textures.glare,\n                            blending: THREE.AdditiveBlending,\n                            specular: 0x000000,\n                            shininess: 0,\n                            combine: THREE.MixOperation,\n                            reflectivity: 0\n                        }),\n                        on12: new THREE.MeshLambertMaterial({\n                            name: 'glare',\n                            opacity: 0.85,\n                            transparent: true,\n                            color: 0xecf4fb,\n                            map: textures.glare,\n                            blending: THREE.AdditiveBlending,\n                            specular: 0x000000,\n                            shininess: 0,\n                            combine: THREE.MixOperation,\n                            reflectivity: 0\n                        }),\n                    },\n                    emitterGlare: {\n                        off: new THREE.MeshLambertMaterial({\n                            name: 'glare',\n                            opacity: 0,\n                            transparent: true,\n                            color: 0x000000,\n                        }),\n                        on6: new THREE.MeshLambertMaterial({\n                            name: 'glare',\n                            opacity: 0.6,\n                            transparent: true,\n                            color: 0xecf4fb,\n                            map: textures.emitterGlare,\n                            blending: THREE.AdditiveBlending,\n                            specular: 0x000000,\n                            shininess: 0,\n                            combine: THREE.MixOperation,\n                            reflectivity: 0\n                        }),\n                        on12: new THREE.MeshLambertMaterial({\n                            name: 'glare',\n                            opacity: 0.85,\n                            transparent: true,\n                            color: 0xecf4fb,\n                            map: textures.emitterGlare,\n                            blending: THREE.AdditiveBlending,\n                            specular: 0x000000,\n                            shininess: 100,\n                            combine: THREE.MixOperation,\n                            reflectivity: 0\n                        }),\n                    },\n                    /*\n                    silver: {\n                        silver: new THREE.MeshPhongMaterial({\n                            name: 'silver',\n                            color: 0x888888,\n                            specular: 0x555555,\n                            specularMap: textures.silver,\n                            shininess: 30,\n                            reflectivity: 0.15,\n                            envMap: textures.env,\n                            // combine: THREE.MixOperation,\n                            bumpMap: textures.silver,\n                            bumpScale: 0.003,\n                            // metal: true,\n                        }),\n                        black: new THREE.MeshPhongMaterial({\n                            name: 'black',\n                            color: 0x777777,\n                            specular: 0x444444,\n                            specularMap: textures.silver,\n                            shininess: 30,\n                            reflectivity: 0.15,\n                            envMap: textures.env,\n                            // combine: THREE.MixOperation,\n                            bumpMap: textures.silver,\n                            bumpScale: 0.003,\n                            // metal: true,\n                        }),\n                    },\n                    */\n                };\n            } else {\n                materials = {\n                    floor: new THREE.MeshStandardMaterial({\n                        name: 'floor',\n                        color: 0x101010, // 0xaeb7c1, // 0x101010,\n                        roughness: 0.5, // 0.4,\n                        metalness: 0.1, // 0.99,\n                        bumpMap: textures.floor,\n                        bumpScale: 0.05,\n                        envMap: textures.env,\n                        // combine: THREE.MixOperation,\n                    }),\n                    wrap: new THREE.MeshPhongMaterial({\n                        name: 'wrap',\n                        color: 0x101010,\n                        specular: 0x444444,\n                        shininess: 7,\n                        reflectivity: 0.75,\n                        specularMap: textures.leatherLight,\n                        bumpMap: textures.leatherBump,\n                        bumpScale: 0.15,\n                        // combine: THREE.MixOperation,\n                        // metal: true,\n                    }),\n                    bronze: new THREE.MeshStandardMaterial({\n                        name: 'bronze',\n                        color: 0xc07f5d,\n                        roughness: 0.5,\n                        roughnessMap: textures.silver,\n                        metalness: 0.9,\n                        metalnessMap: textures.weathered,\n                        envMap: textures.env,\n                        envMapIntensity: 0.15,\n                        // combine: THREE.MixOperation,\n                        // bumpMap: textures.silver,\n                        // bumpScale: 0.003,\n                    }),\n                    gold: new THREE.MeshStandardMaterial({\n                        name: 'gold',\n                        color: 0xc8ad60,\n                        roughness: 0.5,\n                        roughnessMap: textures.silver,\n                        metalness: 0.9,\n                        metalnessMap: textures.weathered,\n                        envMap: textures.env,\n                        envMapIntensity: 0.15,\n                        // combine: THREE.MixOperation,\n                        // bumpMap: textures.silver,\n                        // bumpScale: 0.003,\n                    }),\n                    green: new THREE.MeshPhongMaterial({\n                        name: 'green',\n                        color: 0x00aa00,\n                        specular: 0x333333,\n                        specularMap: textures.silver,\n                        shininess: 30,\n                        reflectivity: 0.10,\n                        envMap: textures.env,\n                        // combine: THREE.MixOperation,\n                        bumpMap: textures.silver,\n                        bumpScale: 0.003,\n                        // metal: true,\n                    }),\n                    red: new THREE.MeshPhongMaterial({\n                        name: 'red',\n                        color: 0xdd0000,\n                        specular: 0x333333,\n                        specularMap: textures.silver,\n                        shininess: 30,\n                        reflectivity: 0.10,\n                        envMap: textures.env,\n                        // combine: THREE.MixOperation,\n                        bumpMap: textures.silver,\n                        bumpScale: 0.003,\n                        // metal: true,\n                    }),\n                    standard: {\n                        silver: new THREE.MeshStandardMaterial({\n                            name: 'silver',\n                            color: 0x888888,\n                            roughness: 0.4,\n                            // roughnessMap: textures.brushed,\n                            metalness: 0.99,\n                            metalnessMap: textures.brushed,\n                            envMap: textures.env,\n                            envMapIntensity: 1.0,\n                            bumpMap: textures.brushed,\n                            bumpScale: 0.01,\n                        }),\n                        black: new THREE.MeshStandardMaterial({\n                            name: 'black',\n                            color: 0x101010,\n                            roughness: 0.5,\n                            // roughnessMap: textures.sand,\n                            metalness: 0.99,\n                            metalnessMap: textures.sand,\n                            envMap: textures.env,\n                            envMapIntensity: 1.0,\n                            bumpMap: textures.sand,\n                            bumpScale: 0.015,\n                        }),\n                    },\n                    weathered: {\n                        silver: getWeatheredNode('silver', textures),\n                        black: getWeatheredNode('black', textures),\n                        _silver: new THREE.MeshStandardMaterial({\n                            name: 'silver',\n                            color: 0x555555,\n                            map: textures.brushed,\n                            roughness: 0.6,\n                            roughnessMap: textures.weatheredInverted,\n                            metalness: 0.99,\n                            // metalnessMap: textures.weathered,\n                            envMap: textures.env,\n                            envMapIntensity: 1.0,\n                            // bumpMap: textures.sand,\n                            // bumpScale: 0.01,\n                        }),\n                        _black: new THREE.MeshStandardMaterial({\n                            name: 'black',\n                            color: 0x444444,\n                            map: textures.brushed,\n                            roughness: 0.6,\n                            roughnessMap: textures.weatheredInverted,\n                            metalness: 0.99,\n                            // metalnessMap: textures.weathered,\n                            envMap: textures.env,\n                            envMapIntensity: 1.0,\n                            // bumpMap: textures.sand,\n                            // bumpScale: 0.01,\n                        }),\n                        /*\n                        black: new THREE.MeshLambertMaterial({\n                            name: 'black',\n                            color: 0x070707, // 0x070707\n                            specular: 0x0a0a0a,\n                            reflectivity: 0.05,\n                            envMap: textures.env,\n                            combine: THREE.MultiplyOperation\n                        }),\n                        */\n                    },\n                    black: {\n                        silver: new THREE.MeshStandardMaterial({\n                            name: 'silver',\n                            color: 0x131313,\n                            roughness: 0.5,\n                            // roughnessMap: textures.sand,\n                            metalness: 0.99,\n                            metalnessMap: textures.sand,\n                            envMap: textures.env,\n                            envMapIntensity: 1.0,\n                            bumpMap: textures.sand,\n                            bumpScale: 0.015,\n                        }),\n                        black: new THREE.MeshStandardMaterial({\n                            name: 'black',\n                            color: 0x101010,\n                            roughness: 0.5,\n                            // roughnessMap: textures.sand,\n                            metalness: 0.99,\n                            metalnessMap: textures.sand,\n                            envMap: textures.env,\n                            envMapIntensity: 1.0,\n                            bumpMap: textures.sand,\n                            bumpScale: 0.015,\n                        }),\n                    },\n                    light: {\n                        off: new THREE.MeshPhongMaterial({\n                            name: 'light',\n                            opacity: 0.98,\n                            transparent: true,\n                            color: 0x444444,\n                            specular: 0x888888,\n                            shininess: 20,\n                            reflectivity: 0.3\n                        }),\n                        on6: new THREE.MeshPhongMaterial({\n                            name: 'light',\n                            opacity: 0.98,\n                            transparent: true,\n                            color: 0x444444,\n                            emissive: 0x444444,\n                            specular: 0x888888,\n                            shininess: 20,\n                            reflectivity: 0.3\n                        }),\n                        on12: new THREE.MeshPhongMaterial({\n                            name: 'light',\n                            color: 0xffffff,\n                            emissive: 0x888888,\n                            specular: 0xffffff,\n                            shininess: 100,\n                            reflectivity: 0.3\n                        }),\n                    },\n                    glare: {\n                        off: new THREE.MeshLambertMaterial({\n                            name: 'glare',\n                            opacity: 0,\n                            transparent: true,\n                            color: 0x000000,\n                        }),\n                        on6: new THREE.MeshLambertMaterial({\n                            name: 'glare',\n                            opacity: 0.6,\n                            transparent: true,\n                            color: 0xecf4fb,\n                            map: textures.glare,\n                            blending: THREE.AdditiveBlending,\n                            specular: 0x000000,\n                            shininess: 0,\n                            combine: THREE.MixOperation,\n                            reflectivity: 0\n                        }),\n                        on12: new THREE.MeshLambertMaterial({\n                            name: 'glare',\n                            opacity: 0.85,\n                            transparent: true,\n                            color: 0xecf4fb,\n                            map: textures.glare,\n                            blending: THREE.AdditiveBlending,\n                            specular: 0x000000,\n                            shininess: 0,\n                            combine: THREE.MixOperation,\n                            reflectivity: 0\n                        }),\n                    },\n                    emitterGlare: {\n                        off: new THREE.MeshLambertMaterial({\n                            name: 'glare',\n                            opacity: 0,\n                            transparent: true,\n                            color: 0x000000,\n                        }),\n                        on6: new THREE.MeshLambertMaterial({\n                            name: 'glare',\n                            opacity: 0.6,\n                            transparent: true,\n                            color: 0xecf4fb,\n                            map: textures.emitterGlare,\n                            blending: THREE.AdditiveBlending,\n                            specular: 0x000000,\n                            shininess: 0,\n                            combine: THREE.MixOperation,\n                            reflectivity: 0\n                        }),\n                        on12: new THREE.MeshLambertMaterial({\n                            name: 'glare',\n                            opacity: 0.85,\n                            transparent: true,\n                            color: 0xecf4fb,\n                            map: textures.emitterGlare,\n                            blending: THREE.AdditiveBlending,\n                            specular: 0x000000,\n                            shininess: 100,\n                            combine: THREE.MixOperation,\n                            reflectivity: 0\n                        }),\n                    },\n                };\n            }\n            materials.left = new THREE.MeshPhongMaterial({\n                name: 'left',\n                color: new THREE.Color(0xff0000),\n                visible: false,\n            });\n            materials.right = new THREE.MeshPhongMaterial({\n                name: 'right',\n                color: new THREE.Color(0x00ff00),\n                visible: false,\n            });\n            materials.top = new THREE.MeshPhongMaterial({\n                name: 'top',\n                color: new THREE.Color(0x0000ff),\n                visible: false,\n            });\n            materials.bottom = new THREE.MeshPhongMaterial({\n                name: 'bottom',\n                color: new THREE.Color(0xffff00),\n                visible: false,\n            });\n\n            return materials;\n        }\n\n        function getTexture(url) {\n            var service = this,\n                manager = this.manager,\n                textures = this.textures;\n            // scope.loader.add('texture-silver');\n            return new THREE.TextureLoader(manager).load(BASE + url,\n                function onLoad(texture) {\n                    // scope.loader.remove('texture-silver');            \n                },\n                function onProgress(loaded, total) {\n\n                },\n                function onError(e) {\n                    // scope.loader.remove('texture-silver');\n                });\n        }\n\n        function getTextureCube(url) {\n            var service = this,\n                manager = this.manager,\n                textures = this.textures;\n            // scope.loader.add('texture-silver');\n            return new THREE.CubeTextureLoader(manager).setPath(BASE + url).load([\n                    'px.jpg', 'nx.jpg', 'py.jpg', 'ny.jpg', 'pz.jpg', 'nz.jpg'\n                ],\n                function onLoad(texture) {\n                    // scope.loader.remove('texture-silver');\n                },\n                function onProgress(loaded, total) {\n\n                },\n                function onError(e) {\n                    // scope.loader.remove('texture-silver');\n                });\n        }\n\n        function getTextureCubeHdr(url, key) {\n            var service = this,\n                renderer = this.renderer,\n                manager = this.manager,\n                textures = this.textures;\n            var urls = [\n                BASE + url + 'px.hdr', BASE + url + 'nx.hdr',\n                BASE + url + 'py.hdr', BASE + url + 'ny.hdr',\n                BASE + url + 'pz.hdr', BASE + url + 'nz.hdr'\n            ];\n            return new THREE.HDRCubeTextureLoader().load(THREE.UnsignedByteType, urls, function (cubemap) {\n                renderer.gammaInput = true; // ???\n                renderer.gammaOutput = true;\n                renderer.toneMapping = THREE.LinearToneMapping;\n                renderer.toneMappingExposure = 1.3;\n                var generator = new THREE.PMREMGenerator(cubemap);\n                generator.update(renderer);\n                var packer = new THREE.PMREMCubeUVPacker(generator.cubeLods);\n                packer.update(renderer);\n                textures[key] = packer.CubeUVRenderTarget;\n                cubemap.dispose();\n                service.materials.weathered.silver.envMap = packer.CubeUVRenderTarget;\n                service.materials.weathered.silver.needsUpdate = true;\n                service.materials.weathered.black.envMap = packer.CubeUVRenderTarget;\n                service.materials.weathered.black.needsUpdate = true;\n                // generator.dispose();\n                // packer.dispose();\n                // scope.loader.remove('texture-silver');\n            });\n        }\n\n        function getTextures() {\n            var service = this,\n                manager = this.manager,\n                textures = {};\n            //\n            textures.env = service.getTextureCube('env/');\n            // textures.env = service.getTextureCubeHdr('env/pisa/', 'env');\n            textures.env.anisotropy = ANISOTROPY;\n            textures.env.format = THREE.RGBFormat;\n            // \n            textures.floor = service.getTexture('floor.jpg');\n            textures.floor.anisotropy = ANISOTROPY;\n            textures.floor.wrapS = THREE.RepeatWrapping;\n            textures.floor.wrapT = THREE.RepeatWrapping;\n            textures.floor.repeat.set(40, 40);\n            //\n            textures.silver = service.getTexture('brushed-light.jpg');\n            textures.silver.anisotropy = ANISOTROPY;\n            // textures.silver.wrapS = THREE.RepeatWrapping;\n            textures.silver.wrapT = THREE.RepeatWrapping;\n            // textures.silver.repeat.set(1, 1);\n            //\n            /*\n            textures.weathered = service.getTexture('brushed-dark.jpg');\n            textures.weathered.anisotropy = ANISOTROPY;\n            // textures.weathered.wrapS = THREE.RepeatWrapping;\n            textures.weathered.wrapT = THREE.RepeatWrapping;\n            // textures.weathered.repeat.set(1, 1);\n            */\n            // \n            // textures.weathered = service.getTexture('brushed-dark.jpg');\n            textures.weathered = service.getTexture('weathered-512-tile.jpg');\n            // textures.weathered = service.getTexture('weathered-tile-sm.jpg');\n            textures.weathered.anisotropy = ANISOTROPY;\n            textures.weathered.wrapS = THREE.RepeatWrapping;\n            textures.weathered.wrapT = THREE.RepeatWrapping;\n            textures.weathered.repeat.set(2, 8);\n            //\n            textures.weatheredInverted = service.getTexture('weathered-512-inverted.jpg');\n            textures.weatheredInverted.anisotropy = ANISOTROPY;\n            textures.weatheredInverted.wrapS = THREE.RepeatWrapping;\n            textures.weatheredInverted.wrapT = THREE.RepeatWrapping;\n            textures.weatheredInverted.repeat.set(2, 8);\n            //\n            textures.sand = service.getTexture('sand.bump.jpg');\n            textures.sand.anisotropy = ANISOTROPY;\n            textures.sand.wrapS = THREE.RepeatWrapping;\n            textures.sand.wrapT = THREE.RepeatWrapping;\n            textures.sand.repeat.set(2, 6);\n            //\n            textures.brushed = service.getTexture('brushed-512-tile.jpg');\n            textures.brushed.anisotropy = ANISOTROPY;\n            textures.brushed.wrapS = THREE.RepeatWrapping;\n            textures.brushed.wrapT = THREE.RepeatWrapping;\n            textures.brushed.repeat.set(2, 2);\n            //\n            textures.bump = service.getTexture('brushed-dark.jpg');\n            textures.bump.anisotropy = ANISOTROPY;\n            textures.bump.wrapS = THREE.RepeatWrapping;\n            textures.bump.wrapT = THREE.RepeatWrapping;\n            textures.bump.repeat.set(5, 5);\n            //\n            textures.glare = service.getTexture('glare.jpg');\n            textures.glare.anisotropy = ANISOTROPY;\n            //\n            textures.emitterGlare = service.getTexture('emitter-glare.jpg');\n            textures.emitterGlare.anisotropy = ANISOTROPY;\n            //\n            textures.leatherBump = service.getTexture('leather-bump.jpg');\n            textures.leatherBump.anisotropy = ANISOTROPY;\n            textures.leatherBump.wrapS = THREE.RepeatWrapping;\n            textures.leatherBump.wrapT = THREE.RepeatWrapping;\n            // textures.leatherBump.repeat.set(1, 1);\n            //\n            textures.leatherLight = service.getTexture('leather-light.jpg');\n            textures.leatherLight.anisotropy = ANISOTROPY;\n            textures.leatherLight.wrapS = THREE.RepeatWrapping;\n            textures.leatherLight.wrapT = THREE.RepeatWrapping;\n            // textures.leatherLight.repeat.set(1, 1);\n            //\n            textures.reptileBump = service.getTexture('reptile-bump.jpg');\n            textures.reptileBump.anisotropy = ANISOTROPY;\n            textures.reptileBump.wrapS = THREE.RepeatWrapping;\n            textures.reptileBump.wrapT = THREE.RepeatWrapping;\n            // textures.reptileBump.repeat.set(1, 1);\n            //\n            textures.reptileLight = service.getTexture('reptile-light.jpg');\n            textures.reptileLight.anisotropy = ANISOTROPY;\n            textures.reptileLight.wrapS = THREE.RepeatWrapping;\n            textures.reptileLight.wrapT = THREE.RepeatWrapping;\n            // textures.reptileLight.repeat.set(1, 1);\n            //\n            textures.stingrayBump = service.getTexture('stingray-bump.jpg');\n            textures.stingrayBump.anisotropy = ANISOTROPY;\n            textures.stingrayBump.wrapS = THREE.RepeatWrapping;\n            textures.stingrayBump.wrapT = THREE.RepeatWrapping;\n            // textures.stingrayBump.repeat.set(1, 1);\n            //\n            textures.stingrayLight = service.getTexture('stingray-light.jpg');\n            textures.stingrayLight.anisotropy = ANISOTROPY;\n            textures.stingrayLight.wrapS = THREE.RepeatWrapping;\n            textures.stingrayLight.wrapT = THREE.RepeatWrapping;\n            // textures.stingrayLight.repeat.set(1, 1);\n            return textures;\n        }\n\n        function replaceShader() {\n            var fragment = THREE.ShaderChunk.meshphong_frag;\n            // console.log('Library.replaceShader THREE.ShaderChunk.meshphong_frag', fragment);\n            var outgoingLightA = \"vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\";\n            var outgoingLightB = \"vec3 outgoingLight = (reflectedLight.directDiffuse + reflectedLight.indirectDiffuse) * specular + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveLight;\";\n            // console.log('MAterials.replacing meshphong_frag', fragment.indexOf(outgoingLightA));\n            THREE.ShaderChunk.meshphong_frag = fragment.replace(outgoingLightA, outgoingLightB);\n        }\n\n        function setFinish(materials, finish) {\n            finish = finish || DEBUG.randomFinish();\n            materials = materials.length ? materials : [materials];\n            console.log('library.setFinish', materials, finish);\n            var library = this;\n            return materials.map(function (material, index) {\n                switch (material.name) {\n                    case 'silver':\n                    case 'black':\n                        material = library.materials[finish.key][material.name];\n                        break;\n                }\n                return material;\n            });\n        }\n\n        function setSecondaryFinish(materials, finish) {\n            finish = finish || DEBUG.randomSecondaryFinish();\n            materials = materials.length ? materials : [materials];\n            console.log('library.setSecondaryFinish', materials, finish);\n            var library = this,\n                textures = this.textures,\n                key, color, map;\n            return materials.map(function (material, index) {\n                switch (material.name) {\n                    case 'wrap':\n                        key = finish.key;\n                        color = finish.color;\n                        material = library.materials.wrap.clone();\n                        if (key.indexOf('Leather') != -1) {\n                            map = 'leather';\n                        } else if (key.indexOf('Reptile') != -1) {\n                            map = 'reptile';\n                        } else if (key.indexOf('Stingray') != -1) {\n                            map = 'stingray';\n                        }\n                        color = Library.hexToRgb(color);\n                        material.color.r = color.r / 255;\n                        material.color.g = color.g / 255;\n                        material.color.b = color.b / 255;\n                        material.specularMap = textures[map + 'Light'];\n                        material.bumpMap = textures[map + 'Bump'];\n                        break;\n                }\n                return material;\n            });\n        }\n\n        function setNextFloor() {\n            var service = this,\n                materials = this.materials,\n                floor = this.materials.floor;\n            Library.FLOOR = (Library.FLOOR + 1) % 4;\n            switch (Library.FLOOR) {\n                case 0:\n                    floor.color.set(0x101010);\n                    floor.roughness = 0.5;\n                    floor.metalness = 0.1;\n                    floor.bumpScale = 0.05;\n                    break;\n                case 1:\n                    floor.color.set(0xaeb7c1);\n                    floor.roughness = 0.5;\n                    floor.metalness = 0.1;\n                    floor.bumpScale = 0.05;\n                    break;\n                case 2:\n                    floor.color.set(0x101010);\n                    floor.roughness = 0.5;\n                    floor.metalness = 0.1;\n                    floor.bumpScale = 0.0001;\n                    break;\n                case 3:\n                    floor.color.set(0xaeb7c1);\n                    floor.roughness = 0.5;\n                    floor.metalness = 0.1;\n                    floor.bumpScale = 0.0001;\n                    break;\n            }\n            console.log('library.setNextFloor', Library.FLOOR);\n            floor.needsUpdate = true;\n        }\n\n        function updateMaterials(materials, finish, secondaryFinish) {\n            finish = finish || DEBUG.randomFinish();\n            var library = this,\n                textures = this.textures,\n                key, color, map;\n            return materials.map(function (material, index) {\n                material.name = material.name.replace('chrome', 'silver');\n                switch (material.name) {\n                    case 'silver':\n                    case 'black':\n                        key = finish.key;\n                        material = library.materials[key][material.name];\n                        break;\n                    case 'wrap':\n                        key = secondaryFinish.key;\n                        color = secondaryFinish.color;\n                        material = library.materials.wrap.clone();\n                        if (key.indexOf('Leather') != -1) {\n                            map = 'leather';\n                        } else if (key.indexOf('Reptile') != -1) {\n                            map = 'reptile';\n                        } else if (key.indexOf('Stingray') != -1) {\n                            map = 'stingray';\n                        }\n                        color = Library.hexToRgb(color);\n                        material.color.r = color.r / 255;\n                        material.color.g = color.g / 255;\n                        material.color.b = color.b / 255;\n                        material.specularMap = textures[map + 'Light'];\n                        material.bumpMap = textures[map + 'Bump'];\n                        break;\n                    case 'bronze':\n                    case 'gold':\n                    case 'red':\n                    case 'green':\n                    case 'left':\n                    case 'right':\n                    case 'top':\n                    case 'bottom':\n                        material = library.materials[material.name];\n                        break;\n                }\n                return material;\n            });\n            /*\n            var finish = part.currentFinish;\n            if (finish && materials[finish.key]) {\n                // console.log(finish.key);\n                replaceMaterial(_materials, 'chrome', materials[finish.key].silver);\n                replaceMaterial(_materials, 'black', materials[finish.key].black);\n            }\n            replaceMaterial(_materials, 'bronze', materials.bronze);\n            replaceMaterial(_materials, 'gold', materials.gold);\n            replaceMaterial(_materials, 'red', materials.red);\n            replaceMaterial(_materials, 'green', materials.green);\n            if (part.hasSecondaryFinishes) {\n                var secondaryFinish = part.currentSecondaryFinish;\n                replaceMaterial(_materials, 'wrap', materials.wrap.clone());\n                onUpdateSecondaryFinish(_materials, secondaryFinish);\n            }\n            part.materials = _materials;\n            if (part.isLedReceiver) {\n                onUpdateLed([part], part.led);\n            }\n            */\n        }\n\n        function updateLedMaterials(receivers, led) {\n            var ledType, ledFinish = null;\n            if (led) {\n                ledType = led.ledType;\n                ledFinish = led.currentFinish;\n            } else {\n                ledType = APP.Parts.ledTypeEnum.OFF;\n            }\n            angular.forEach(receivers, function (part, key) {\n                // console.log('onUpdateLed', part.key, ledType, ledFinish);\n                switch (ledType) {\n                    case APP.Parts.ledTypeEnum.OFF:\n                        replaceMaterial(part.materials, 'light', materials.light.off);\n                        replaceMaterial(part.materials, 'glare', materials.glare.off.clone());\n                        replaceMaterial(part.materials, 'emitterGlare', materials.emitterGlare.off.clone());\n                        // replaceMaterial(part.materials, 'emitter', materials.emitter.off.clone());\n                        break;\n                    case APP.Parts.ledTypeEnum.ON6:\n                        replaceMaterial(part.materials, 'light', materials.light.on6);\n                        replaceMaterial(part.materials, 'glare', materials.glare.on6.clone());\n                        replaceMaterial(part.materials, 'emitterGlare', materials.emitterGlare.on6.clone());\n                        // replaceMaterial(part.materials, 'emitter', materials.emitter.on6.clone());\n                        onUpdateColor(part.materials, ledFinish);\n                        break;\n                    case APP.Parts.ledTypeEnum.ON12:\n                        replaceMaterial(part.materials, 'light', materials.light.on12);\n                        replaceMaterial(part.materials, 'glare', materials.glare.on12.clone());\n                        replaceMaterial(part.materials, 'emitterGlare', materials.emitterGlare.on12.clone());\n                        // replaceMaterial(part.materials, 'emitter', materials.emitter.on12.clone());\n                        onUpdateColor(part.materials, ledFinish);\n                        break;\n                }\n            });\n        }\n\n        function hexToRgb(hex) {\n            var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n            return result ? {\n                r: parseInt(result[1], 16),\n                g: parseInt(result[2], 16),\n                b: parseInt(result[3], 16)\n            } : null;\n        }\n\n        function getWeatheredNode(name, textures) {\n            var material = new THREE.StandardNodeMaterial();\n            // material.color = // albedo (vec3)\n            // material.alpha = // opacity (float)\n            // material.roughness = // roughness (float)\n            // material.metalness = // metalness (float)\n            // material.normal = // normalmap (vec3)\n            // material.normalScale = // normalmap scale (vec2)\n            // material.emissive = // emissive color (vec3)\n            // material.ambient = // ambient color (vec3)\n            // material.shadow = // shadowmap (vec3)\n            // material.light = // custom-light (vec3)\n            // material.ao = // ambient occlusion (float)\n            // material.environment = // reflection/refraction (vec3)\n            // material.transform = // vertex transformation (vec3)\n            var curvature = new THREE.AttributeNode('curvature', 'float');\n            /*\n            var hard = new THREE.FloatNode(20.0);\n            var curvature = new THREE.OperatorNode(\n                _curvature,\n                hard,\n                THREE.OperatorNode.ADD\n            );\n            */\n            var colorA = new THREE.ColorNode(0x040404);\n            var colorB = new THREE.TextureNode(textures.brushed);\n            // var colorB = new THREE.ColorNode(0xffffff);\n            var color = new THREE.Math3Node(\n                colorA,\n                colorB,\n                curvature,\n                THREE.Math3Node.MIX\n            );\n            material.color = color;\n            // material.roughness = new THREE.FloatNode(0.5);\n            var roughnessA = new THREE.FloatNode(0.6);\n            var roughnessB = new THREE.FloatNode(0.5);\n            var roughness = new THREE.Math3Node(\n                roughnessA,\n                roughnessB,\n                curvature,\n                THREE.Math3Node.MIX\n            );\n            material.roughness = roughness;\n            material.metalness = new THREE.FloatNode(0.7);\n            /*\n            // var roughnessA = new THREE.TextureNode(textures.weatheredInverted);\n            var metalnessA = new THREE.FloatNode(0.7);\n            var metalnessB = new THREE.FloatNode(0.7);\n            var metalness = new THREE.Math3Node(\n                metalnessA,\n                metalnessB,\n                curvature,\n                THREE.Math3Node.MIX\n            );\n            material.metalness = metalness;\n            */\n            // var environment = new THREE.CubeTextureNode(textures.env);\n            var environment = new THREE.Math3Node(\n                new THREE.ColorNode(0x040404),\n                new THREE.CubeTextureNode(textures.env),\n                curvature,\n                THREE.Math3Node.MIX\n            );\n            material.environment = environment;\n            /*\n            var environmentAlpha = new THREE.OperatorNode(\n                curvature,\n                new THREE.FloatNode(0.1),\n                THREE.OperatorNode.MUL\n            );\n            material.environmentAlpha = environmentAlpha;\n            */\n            // material.environment = textures.env;\n            /*\n            addGui('color', material.color.value.getHex(), function (val) {\n                material.color.value.setHex(val);\n            }, true);\n            addGui('roughnessA', roughnessA.number, function (val) {\n                roughnessA.number = val;\n            }, false, 0, 1);\n            */\n            material.name = name;\n            material.build();\n            return material;\n        }\n\n        return Library;\n\n    }();\n\n    window.Library = Library;\n\n}());\n/* global window, document, console, TweenLite */\n\n(function () {\n    'use strict';\n\n    var DEBUG = false;\n    var RAD = Math.PI / 180;\n    var I = 0;\n    var MIN = 11;\n\n    function rad(degree) {\n        return degree * RAD;\n    }\n\n    var Orbiter = function () {\n\n        function Orbiter(scene, camera, controls) {\n            var orbiter = this;\n            orbiter.scene = scene;\n            orbiter.camera = camera;\n            orbiter.dummy = camera.clone();\n            orbiter.controls = controls;\n            orbiter.projector = new THREE.Projector();\n            orbiter.center = new THREE.Vector3();\n            orbiter.size = new THREE.Vector3();\n            orbiter.box = new THREE.Box3();\n            orbiter.boxhelper = new THREE.Box3Helper(orbiter.box, 0xff0000);\n\n            orbiter.rotate = true;\n\n            orbiter.target = new THREE.Vector3(0, 0, 0);\n            orbiter.distance = MIN * 2;\n            orbiter.rotationAngle = 1;\n            orbiter.dragAngle = 0;\n            orbiter.zoom = 1; // eliminabili ??\n            orbiter.pow = 0; // eliminabili ??\n\n            orbiter.values = {\n                target: new THREE.Vector3(0, 0, 0),\n                distance: MIN * 2,\n                rotationAngle: 0,\n                dragAngle: 0,\n                zoom: 0,\n                pow: 0,\n            };\n\n            orbiter.distanceMin = MIN;\n            orbiter.distanceMax = MIN * 3;\n            /*\n            if (combiner.selected.item.type === APP.Parts.typeEnum.BladePlug) {\n                orbiter.pow = 1;\n            } else {\n                orbiter.pow = 0;\n            }\n            */\n            orbiter.set(orbiter.camera, orbiter.target);\n            //\n            if (DEBUG) {\n                orbiter.scene.add(orbiter.boxhelper);\n            }\n        }\n\n        Orbiter.prototype = {\n            fit: fit,\n            set: set,\n            toScreen: toScreen,\n            toWorld: toWorld,\n            tween: tween,\n            update: update,\n        };\n\n        function set(camera, target) {\n            var orbiter = this,\n                values = orbiter.values;\n\n            camera.position.x = target.x + values.distance * values.zoom * Math.cos(values.dragAngle + values.rotationAngle);\n            camera.position.y = target.y + values.distance * values.zoom; // * (0.5 + 1.5 * (1 - values.pow));\n            camera.position.z = target.z + values.distance * values.zoom * Math.sin(values.dragAngle + values.rotationAngle);\n            // camera.up = new THREE.Vector3(0, 0, -1);\n            camera.lookAt(target);\n        }\n\n        function fit(combiner, offset, up) {\n            if (!offset) {\n                offset = 1.3;\n            }\n            if (!up) {\n                up = new THREE.Vector3(0, 1, 0);\n            }\n            var orbiter = this,\n                projector = orbiter.projector,\n                box = orbiter.box,\n                size = orbiter.size,\n                center = orbiter.center,\n                camera = orbiter.camera,\n                controls = orbiter.controls,\n                dummy = orbiter.dummy;\n\n            var object = combiner.selection ? combiner.selection.item.group : combiner.group;\n            box.setFromObject(object);\n            box.getCenter(center);\n            box.getSize(size);\n            if (combiner.items.length > 0) {\n                orbiter.set(dummy, center);\n                /*\n                dummy.position.copy(camera.position);\n                dummy.quaternion.copy(camera.quaternion);\n                dummy.up = up;\n                dummy.lookAt(center);\n                */\n                dummy.fov = camera.fov;\n                dummy.aspect = camera.aspect;\n                /*\n                dummy.updateProjectionMatrix();\n                var min = orbiter.toScreen(box.min);\n                var max = orbiter.toScreen(box.max);\n                var sc = orbiter.toScreen(center);\n                */\n                // dummy.matrixWorldNeedsUpdate = true;\n                // dummy.matrixWorldInverse.getInverse(dummy.matrixWorld);\n                size.applyMatrix4(dummy.matrixWorldInverse);\n                var aspect = size.x / size.y;\n                var dim = (camera.aspect > aspect) ? size.y : size.x;\n                if (camera.aspect < aspect) {\n                    dim /= camera.aspect;\n                }\n                dim *= offset;\n                var z = dim / 2 / Math.sin(camera.fov / 2 * RAD);\n                orbiter.distance = z;\n            } else {\n                orbiter.distance = MIN;\n            }\n            orbiter.distanceMin = orbiter.distance * 0.5;\n            orbiter.distanceMax = orbiter.distance * 1.5;\n            //\n            orbiter.target.copy(center);\n        }\n\n        function tween() {\n            var orbiter = this,\n                target = orbiter.target,\n                values = orbiter.values;\n\n            if (orbiter.rotate) {\n                orbiter.rotationAngle += 0.0002;\n            }\n            var friction = 1 / 15;\n            values.target.x += (target.x - values.target.x) * friction;\n            values.target.y += (target.y - values.target.y) * friction;\n            values.target.z += (target.z - values.target.z) * friction;\n            values.distance += (orbiter.distance - values.distance) * friction;\n            values.rotationAngle += (orbiter.rotationAngle - values.rotationAngle) * friction;\n            values.dragAngle += (orbiter.dragAngle - values.dragAngle) * friction;\n            values.zoom += (orbiter.zoom - values.zoom) * friction;\n            values.pow += (orbiter.pow - values.pow) * friction;\n        }\n\n        function update() {\n            var orbiter = this;\n            orbiter.tween();\n            orbiter.set(orbiter.camera, orbiter.values.target);\n        }\n\n        function toWorld(v) {\n            var orbiter = this,\n                projector = orbiter.projector,\n                camera = orbiter.camera,\n                w = window.innerWidth / 2,\n                h = window.innerHeight / 2;\n            var world = v.clone();\n            world.x = world.x / w - 1;\n            world.y = -world.y / h + 1;\n            projector.unprojectVector(world, camera);\n            return world;\n        }\n\n        function toScreen(v) {\n            var orbiter = this,\n                camera = orbiter.camera,\n                w = window.innerWidth / 2,\n                h = window.innerHeight / 2;\n            var screen = v.clone();\n            screen.project(camera);\n            screen.x = (screen.x + 1) * w;\n            screen.y = (-screen.y + 1) * h;\n            return screen;\n        }\n\n        return Orbiter;\n\n    }();\n\n    window.Orbiter = Orbiter;\n\n}());\n/* global window, document, console, TweenLite, Forge, Combiner, Orbiter, Library */\n\n(function () {\n    'use strict';\n\n    if (!Detector.webgl) {\n        Detector.addGetWebGLMessage();\n        return;\n    }\n\n    var container = document.querySelector('.editor');\n\n    var w = container.offsetWidth,\n        h = container.offsetHeight;\n\n    var options = {\n        down: false,\n        moved: 0,\n    };\n\n    var raycaster = new THREE.Raycaster();\n\n    var forge = new Forge();\n\n    var renderer = addRenderer();\n\n    var library = new Library(renderer);\n\n    var camera = new THREE.PerspectiveCamera(45, w / h, 1, 50000);\n\n    var scene = new THREE.Scene();\n\n    var lights = addLights(scene);\n\n    var floor = addFloor(scene);\n\n    var combiner = new Combiner(scene);\n\n    var orbiter = new Orbiter(scene, camera);\n\n    var effects = new Effects(scene, camera, renderer, w, h);\n\n    function render() {\n        // required if controls.enableDamping or controls.autoRotate are set to true\n        // controls.update();\n        combiner.update();\n        //\n        var y = combiner.center.y - combiner.size.y / 2 - 3;\n        floor.position.y += (y - floor.position.y) / 8;\n        lights.position.x += (combiner.center.x - lights.position.x) / 8;\n        lights.position.y += (combiner.center.y - lights.position.y) / 8;\n        lights.position.z += (combiner.center.z - lights.position.z) / 8;\n        // floor.position.x = combiner.center.x;\n        // floor.position.z = combiner.center.z;\n        //\n        orbiter.update();\n        effects.update();\n        // renderer.render(scene, camera);\n    }\n\n    function snapshot() {\n        if (options.snapshot === true) {\n            options.snapshot = false;\n            /*\n            Snapshot.post(scope.saber.code, renderer.domElement.toDataURL('image/jpeg', 0.95)).then(function (share) {\n                scope.$root.$broadcast('onSocialPictureReady', share);\n            });\n            */\n        }\n    }\n\n    function animate() {\n        render();\n        snapshot();\n        options.requestId = window.requestAnimationFrame(animate, renderer.domElement);\n    }\n\n    function play() {\n        if (!options.requestId) {\n            animate();\n        }\n    }\n\n    function pause() {\n        if (options.requestId) {\n            window.cancelAnimationFrame(options.requestId);\n            options.requestId = false;\n        }\n    }\n\n    function addRenderer() {\n        var renderer = new THREE.WebGLRenderer({\n            alpha: true,\n            antialias: true,\n        });\n        renderer.setClearColor(0x101010);\n        renderer.setPixelRatio(window.devicePixelRatio);\n        renderer.setSize(w, h);\n        container.appendChild(renderer.domElement);\n        return renderer;\n    }\n\n    function addLights(scene) {\n        var lights = new THREE.Group();\n        lights.name = 'pivot';\n        lights.rotation.y = Math.PI / 180 * 90;\n        //\n        var light = new THREE.AmbientLight(0x444444);\n        scene.add(light);\n        // \n        var light1 = new THREE.DirectionalLight(0xeedddd, 1.0, 2000);\n        light1.name = 'light1';\n        light1.position.set(-30, 20, 10);\n        lights.add(light1);\n        //\n        var light2 = new THREE.DirectionalLight(0xddddee, 1.0, 2000);\n        light2.name = 'light2';\n        light2.position.set(30, 20, -10);\n        lights.add(light2);\n        //\n        /*\n        var light = new THREE.PointLight(0xddddee, 1, 2000);\n        light.position.set(0, 200, 0);\n        scene.add(light);\n        */\n        scene.add(lights);\n        return lights;\n    }\n\n    function addFloor(scene) {\n        /*\n        var radius = 200;\n        var radials = 16;\n        var circles = 8;\n        var divisions = 64;\n        var floor = new THREE.PolarGridHelper(radius, radials, circles, divisions);\n        */\n        // var floor = new THREE.GridHelper(500, 500, 0x888888, 0xAAAAAA);\n        // floor.rotateOnAxis( new THREE.Vector3( 1, 0, 0 ), 90 * ( Math.PI/180 ));\t\n        var floor = new THREE.Mesh(new THREE.PlaneBufferGeometry(500, 500), library.materials.floor);\n        floor.name = 'floor';\n        floor.rotation.x = -Math.PI / 2;\n        floor.position.y = -3.5;\n        floor.visible = true;\n        scene.add(floor);\n        return floor;\n    }\n\n    function onAdd() {\n        if (!combiner.busy()) {\n            forge.load(function (geometry, materials) {\n                if (effects) effects.unselect();\n                materials = library.updateMaterials(materials, null, null); // finish, secondaryFinish\n                var item = combiner.add(geometry, materials);\n                orbiter.fit(combiner);\n                combiner.entering++;\n                item.enter(function () {\n                    combiner.entering--;\n                });\n            });\n        }\n    }\n\n    function onRemove() {\n        if (!combiner.busy()) {\n            combiner.remove();\n            orbiter.fit(combiner);\n        }\n    }\n\n    function onFlip() {\n        combiner.flip(function () {\n            orbiter.fit(combiner);\n        });\n    }\n\n    function onFinish() {\n        combiner.selectedModel(function (model) {\n            model.material = library.setFinish(model.material, null);\n        });\n    }\n\n    function onFloor() {\n        library.setNextFloor();\n    }\n\n    function onResize() {\n        w = container.offsetWidth;\n        h = container.offsetHeight;\n        camera.aspect = w / h;\n        camera.updateProjectionMatrix();\n        orbiter.fit(combiner);\n        renderer.setSize(w, h);\n        if (effects) effects.resize(w, h);\n    }\n\n    function onDown(e) {\n        var down = getTouch(e);\n        down.relativeTo(container);\n        down.mx = down.x;\n        down.startDragAngle = orbiter.dragAngle;\n        down.startDistance = orbiter.distance;\n        // console.log('down', down);\n        raycaster.setFromCamera(down, camera);\n        var selection = combiner.select(raycaster);\n        // console.log('selection', selection);\n        if (selection) {\n            /*\n            if (controls) {\n                controls.enabled = false;\n            }\n            */\n            down.index = selection.index;\n            down.item = selection.item;\n            down.rotation = selection.rotation;\n            if (effects) effects.select(down.item.model);\n        } else {\n            if (effects) effects.unselect();\n        }\n        orbiter.fit(combiner);\n        options.down = down;\n        /*\n        down.index = i;\n        down.item = value;\n        down.angle = value.coords.angle;\n        */\n    }\n\n    function onMove(e) {\n        options.moved++;\n        var pow = 1; // 0.001;\n        if (e.type === 'touchmove') {\n            e.stopPropagation();\n            e.preventDefault();\n            pow *= 4;\n        }\n        var down = options.down;\n        if (down) {\n            var move = getTouch(e);\n            move.relativeTo(container);\n            var diff = move.sub(down);\n            // console.log(diff.x, diff.y);\n            if (move.count == 2 && down.count == 2) {\n                // PINCH                   \n                orbiter.distance = down.startDistance + (down.pinchSize() - move.pinchSize()) * pow * 10;\n            } else {\n                if (combiner.selection && combiner.selection.item === down.item) {\n                    // ROTATE ITEM\n                    // down.item.rotation = down.rotation + (move.y - down.y) * pow * 10;\n                    // var index = down.index;\n                    // down.item.outer.rotation.x = down.rotation.x + diff.y * Math.PI;\n                    combiner.rotate(diff.y * pow * 10);\n                } else {\n                    // DRAG CAMERA\n                    orbiter.dragAngle = down.startDragAngle + diff.x * pow * 10;\n                    orbiter.distance = down.startDistance + diff.y * pow * -10;\n                    /*\n                    // SOUND\n                    if (combiner.selectedItem && combiner.selectedItem.type == APP.Parts.typeEnum.Sound) {\n                        if (Math.abs(move.x - down.mx) > w / 3) {\n                            down.mx = move.x;\n                            scope.$root.$broadcast('onSoundSwing', scope.saber.sound, Math.abs(move.x - down.mx) / 100);\n                        }\n                    }\n                    */\n                }\n            }\n            // orbiter.update();\n            orbiter.distance = Math.min(orbiter.distanceMax, Math.max(orbiter.distanceMin, orbiter.distance));\n            // scope.$root.$broadcast('onControls');\n        }\n    }\n\n    function onUp(e) {\n        var down = options.down;\n        var moved = options.moved;\n        if (down && moved < 5) {\n            if (down.item) {\n                /*\n                scope.$apply(function () {\n                    selectedIndex = down.index;\n                    onFocus(down.item);\n                });\n                */\n            } else if (combiner.selectedItem) {\n                /*\n                scope.$apply(function () {\n                    onBlur();\n                });\n                */\n            }\n        }\n        options.down = null;\n        options.moved = 0;\n        /*\n        if (controls) {\n            controls.enabled = true;\n        }\n        */\n        removeListeners();\n    }\n\n    function onWheel(e) {\n        e = window.event || e; // old IE support\n        var bounds = container.getBounds();\n        if (Math.abs(e.pageX - bounds.center.x) < bounds.width / 3) {\n            var delta = Math.max(-1, Math.min(1, (e.wheelDelta || -e.detail)));\n            orbiter.distance += delta;\n            orbiter.distance = Math.min(orbiter.distanceMax, Math.max(orbiter.distanceMin, orbiter.distance));\n            orbiter.update();\n            e.preventDefault();\n            // scope.$root.$broadcast('onControls');\n        }\n    }\n\n    function onDoubleClick(e) {\n        // console.log('onDoubleClick');\n        var touch = getTouch(e);\n        raycaster.setFromCamera(touch, camera);\n        combiner.hitAndFlip(raycaster, function () {\n            orbiter.fit(combiner);\n        });\n    }\n\n    function onMouseDown(e) {\n        onDown(e);\n        addMouseListeners();\n    }\n\n    function onTouchDown(e) {\n        onDown(e);\n        addTouchListeners();\n        e.stopPropagation();\n        e.preventDefault();\n    }\n\n    function addMouseListeners() {\n        window.addEventListener('mousemove', onMove);\n        window.addEventListener('mouseup', onUp);\n    }\n\n    function addTouchListeners() {\n        window.addEventListener('touchmove', onMove);\n        window.addEventListener('touchend', onUp);\n    }\n\n    function removeListeners() {\n        window.removeEventListener('touchmove mousemove', onMove);\n        window.removeEventListener('touchend mouseup', onUp);\n    }\n\n    function onKeyUp(e) {\n        // console.log(e);\n        switch (e.keyCode) {\n            case 38:\n                // up arrow\n                break;\n            case 40:\n                // down arrow\n                break;\n            case 37:\n                // left arrow\n                var selection = combiner.prev();\n                if (selection) {\n                    if (effects) effects.select(selection.item.model);\n                } else {\n                    if (effects) effects.unselect();\n                }\n                orbiter.fit(combiner);\n                break;\n            case 39:\n                // right arrow\n                var selection = combiner.next();\n                if (selection) {\n                    if (effects) effects.select(selection.item.model);\n                } else {\n                    if (effects) effects.unselect();\n                }\n                orbiter.fit(combiner);\n                break;\n        }\n    }\n\n    // container.addEventListener('dblclick', onDoubleClick);\n    container.addEventListener('mousedown', onMouseDown);\n    container.addEventListener('touchstart', onTouchDown);\n    container.addEventListener('mousewheel', onWheel);\n\n    document.addEventListener('keyup', onKeyUp);\n\n    window.addEventListener('resize', onResize, false);\n\n    var btnAdd = document.querySelector('.btn-add');\n    var btnRemove = document.querySelector('.btn-remove');\n    var btnFlip = document.querySelector('.btn-flip');\n    var btnFinish = document.querySelector('.btn-finish');\n    var btnFloor = document.querySelector('.btn-floor');\n    btnAdd.addEventListener('click', onAdd);\n    btnRemove.addEventListener('click', onRemove);\n    btnFlip.addEventListener('click', onFlip);\n    btnFinish.addEventListener('click', onFinish);\n    btnFloor.addEventListener('click', onFloor);\n\n    animate();\n\n    setTimeout(onAdd, 1000);\n\n}());"]}