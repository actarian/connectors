{"version":3,"sources":["docs/js/app.js"],"names":["Detector","webgl","loader","RAD","Math","PI","flipping","connectors","hittables","THREE","JSONLoader","load","callback","options","o","method","responseType","url","onload","p","req","XMLHttpRequest","open","this","status","response","onerror","onprogress","send","http","data","replace","RegExp","model","parse","JSON","geometry","materials","editor","document","querySelector","btnAdd","btnRemove","renderer","WebGLRenderer","alpha","setSize","window","innerWidth","innerHeight","appendChild","domElement","camera","PerspectiveCamera","position","set","lookAt","controls","OrbitControls","scene","Scene","floor","GridHelper","group","Group","light","PointLight","add","_box","_center","helper","PointLightHelper","addElement","animate","requestAnimationFrame","render","q","Quaternion","Vector3","g","length","getWorldPosition","filter","i","inner","x","qq","multiplyQuaternions","left","copy","sub","setRotationFromQuaternion","right","getWorldQuaternion","box","getBox","setFromObject","center","size","getCenter","getSize","BoxGeometry","material","MeshBasicMaterial","color","Mesh","setCenter","worldToLocal","y","z","fitGroup","down","raycaster","Raycaster","addEventListener","e","getTouch","setFromCamera","hitted","intersectObjects","enabled","index","indexOf","object","rotation","clone","diff","touch","flip","aspect","updateProjectionMatrix","pop","parent","remove","map","item","fitCamera","removeElement","addGetWebGLMessage","MeshStandardMaterial","wireframe","Box3","console","log","addHelper","rad","random","flipped","TweenLite","to","ease","Power2","easeOut","onComplete","push","origin","s","arrow","ArrowHelper","setFromAxisAngle","quaternion","boxhelper","Box3Helper","max","fov","tan","normalize","multiplyScalar","update","Vector2","clientX","clientY","degree"],"mappings":"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","file":"app.min.js","sourcesContent":["/* global window, document, console, TweenLite */\n\n(function () {\n    'use strict';\n\n    if (!Detector.webgl) {\n        Detector.addGetWebGLMessage();\n        return;\n    }\n\n    var RAD = Math.PI / 180;\n\n    var flipping = 0;\n    var connectors = [];\n    var hittables = [];\n\n    var loader = forge();\n    var editor = document.querySelector('.editor');\n    var btnAdd = document.querySelector('.btn-add');\n    var btnRemove = document.querySelector('.btn-remove');\n\n    var renderer = new THREE.WebGLRenderer({\n        alpha: true,\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    editor.appendChild(renderer.domElement);\n\n    var camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 50000);\n    camera.position.set(0, 20, 40);\n    camera.lookAt(0, 0, 0);\n    // controls.update() must be called after any manual changes to the camera's transform\n    var controls = new THREE.OrbitControls(camera);\n    // controls.update();\n\n    var scene = new THREE.Scene();\n    var floor = addFloor();\n    var group = new THREE.Group();\n\n    var light = new THREE.PointLight(0xddddee, 1, 2000);\n    light.position.set(0, 200, 0);\n    scene.add(light);\n\n    var helper = new THREE.PointLightHelper(light, 10);\n    scene.add(helper);\n\n    scene.add(floor);\n    scene.add(group);\n\n    loader.load(addElement);\n    loader.load(addElement);\n    loader.load(addElement);\n\n    animate();\n\n    function animate() {\n        requestAnimationFrame(animate);\n        // required if controls.enableDamping or controls.autoRotate are set to true\n        // controls.update();\n        renderer.render(scene, camera);\n        combine();\n        if (flipping === 0) {\n            fitGroup(group);\n        }\n    }\n\n    function addFloor() {\n        /*\n        var radius = 200;\n        var radials = 16;\n        var circles = 8;\n        var divisions = 64;\n        var floor = new THREE.PolarGridHelper(radius, radials, circles, divisions);\n        */\n        var floor = new THREE.GridHelper(30, 30, 0x888888, 0xAAAAAA);\n        // floor.rotateOnAxis( new THREE.Vector3( 1, 0, 0 ), 90 * ( Math.PI/180 ));\t\n        return floor;\n    }\n\n    function addElement(geometry, materials) {\n        var i = connectors.length;\n        var o = new THREE.Group();\n        var inner = new THREE.Group();\n        geometry = new THREE.BoxGeometry(10, 4, 4);\n        // var geometry = new THREE.CylinderGeometry(5, 5, 10, 10);\n        var material = new THREE.MeshStandardMaterial({\n            color: 0x888888,\n            wireframe: false,\n        });\n        var model = new THREE.Mesh(geometry, material);\n        var box = new THREE.Box3().setFromObject(model);\n        var size = new THREE.Vector3();\n        box.getSize(size);\n        console.log(size.x);\n        model.position.set(size.x / 2, 0, 0);\n        var left = addHelper(\n            new THREE.Vector3(0, 0, 0),\n            new THREE.Vector3(0, 0, -rad(180)),\n            0x00ff00,\n            size\n        );\n        var right = addHelper(\n            new THREE.Vector3(size.x, 0, 0),\n            new THREE.Vector3(0, 0, -rad(10) + rad(20) * Math.random()),\n            0xff0000,\n            size\n        );\n        inner.position.x = size.x / 2;\n        inner.add(model);\n        inner.add(left);\n        inner.add(right);\n        o.inner = inner;\n        o.model = model;\n        o.left = left;\n        o.right = right;\n        o.add(inner);\n        o.flip = function () {\n            flipping++;\n            console.log('flip()');\n            o.flipped = !o.flipped;\n            TweenLite.to(model.rotation, 0.3, {\n                y: o.flipped ? Math.PI : 0,\n                ease: Power2.easeOut,\n                // ease: Elastic.easeOut,\n                // onUpdate: function() { },\n                onComplete: function () {\n                    console.log('flipped');\n                    flipping--;\n                },\n            })\n        };\n        connectors.push(o);\n        hittables = connectors.map(function (item) {\n            return item.model;\n        });\n        group.add(o);\n        fitCamera(group);\n        return o;\n    }\n\n    function removeElement() {\n        if (connectors.length > 1) {\n            var o = connectors.pop();\n            if (o.parent) {\n                group.remove(o);\n            }\n            hittables = connectors.map(function (item) {\n                return item.model;\n            });\n            fitCamera(group);\n        }\n    }\n\n    function addHelper(origin, rotation, color, size) {\n        var s = size.x / 10;\n        // rotation.normalize();\n        var helper = new THREE.Group();\n        helper.position.copy(origin);\n        var arrow = new THREE.ArrowHelper(new THREE.Vector3(1, 0, 0), new THREE.Vector3(), s, color, s / 2, s / 2);\n        helper.rotation.x = rotation.x;\n        helper.rotation.y = rotation.y;\n        helper.rotation.z = rotation.z;\n        var q = new THREE.Quaternion();\n        q.setFromAxisAngle(new THREE.Vector3(0, 0, 1), rad(180));\n        helper.q = new THREE.Quaternion().multiplyQuaternions(q, helper.quaternion);\n        helper.arrow = arrow;\n        helper.add(arrow);\n        return helper;\n    }\n\n    function combine() {\n        var q = new THREE.Quaternion();\n        var p = new THREE.Vector3();\n        var g = new THREE.Vector3();\n        if (connectors.length) {\n            group.getWorldPosition(g);\n            connectors.filter(function (o, i) {\n                o.inner.position.x += (1 - o.inner.position.x) / 5;\n                if (i > 0) {\n                    var qq = new THREE.Quaternion().multiplyQuaternions(q, o.left.q);\n                    o.position.copy(p.sub(g));\n                    o.setRotationFromQuaternion(qq);\n                }\n                /*\n                    if (i === 1) {\n                        o.model.rotation.y += 0.01;\n                    }\n                    */\n                o.right.getWorldQuaternion(q);\n                o.right.getWorldPosition(p);\n            });\n        }\n    }\n\n    var _box;\n\n    function getBox() {\n        if (_box) {\n            return _box;\n        } else {\n            _box = new THREE.Box3();\n            var boxhelper = new THREE.Box3Helper(_box, 0xff0000);\n            scene.add(boxhelper);\n            return _box;\n        }\n    }\n\n    var _center;\n\n    function setCenter(center) {\n        if (!_center) {\n            var geometry = new THREE.BoxGeometry(0.3, 0.3, 0.3);\n            var material = new THREE.MeshBasicMaterial({\n                color: 0xff0000\n            });\n            _center = new THREE.Mesh(geometry, material);\n            scene.add(_center);\n        }\n        _center.position.copy(center);\n    }\n\n    function fitGroup(group) {\n        var box = getBox();\n        box.setFromObject(group);\n        var center = new THREE.Vector3();\n        var size = new THREE.Vector3();\n        box.getCenter(center);\n        box.getSize(size);\n        setCenter(center);\n        group.worldToLocal(center);\n        group.position.x = -center.x;\n        group.position.y = -center.y;\n        group.position.z = -center.z;\n        floor.position.y = -size.y / 2;\n    }\n\n    function fitCamera(group) {\n        var box = getBox();\n        box.setFromObject(group);\n        var size = new THREE.Vector3()\n        box.getSize(size);\n        var max = Math.max(size.x, size.y, size.z);\n        var fov = camera.fov * RAD;\n        var z = max / 2 / Math.tan(fov / 2) * 1.5;\n        camera.position.normalize().multiplyScalar(z);\n        controls.update();\n    }\n\n    var raycaster = new THREE.Raycaster();\n    var down;\n\n    function onResize() {\n        camera.aspect = window.innerWidth / window.innerHeight;\n        camera.updateProjectionMatrix();\n        renderer.setSize(window.innerWidth, window.innerHeight);\n    }\n\n    function getTouch(e) {\n        return new THREE.Vector2(\n            (e.clientX / window.innerWidth) * 2 - 1, -(e.clientY / window.innerHeight) * 2 + 1\n        );\n    }\n\n    function onDown(e) {\n        // calculate mouse position in normalized device coordinates\n        // (-1 to +1) for both components\n        down = getTouch(e);\n        // down.x = (e.clientX / renderer.domElement.offsetWidth) * 2 - 1;\n        // down.y = -(e.clientY / renderer.domElement.offsetHeight) * 2 + 1;\n        raycaster.setFromCamera(down, camera);\n        var hitted = raycaster.intersectObjects(hittables);\n        // console.log(hitted.length, down.x, down.y);\n        if (hitted.length) {\n            controls.enabled = false;\n            var index = hittables.indexOf(hitted[0].object);\n            down.index = index;\n            down.rotation = connectors[index].inner.rotation.clone();\n            // connectors[index].inner.position.x = 10;\n        } else {\n            down = null;\n        }\n    }\n\n    function onMove(e) {\n        if (down) {\n            var move = getTouch(e);\n            var diff = move.sub(down);\n            var index = down.index;\n            var rotation = connectors[index].inner.rotation;\n            rotation.x = down.rotation.x + diff.y * Math.PI;\n            // console.log('rotation.x', rotation.x);\n        }\n    }\n\n    function onUp(e) {\n        down = null;\n        controls.enabled = true;\n    }\n\n    function onDoubleClick(e) {\n        var touch = getTouch(e);\n        raycaster.setFromCamera(touch, camera);\n        var hitted = raycaster.intersectObjects(hittables);\n        if (hitted.length) {\n            var index = hittables.indexOf(hitted[0].object);\n            connectors[index].flip();\n        }\n    }\n\n    function onAdd() {\n        loader.load(addElement);\n    }\n\n    function onRemove() {\n        removeElement();\n    }\n\n    renderer.domElement.addEventListener('mousedown', onDown);\n    renderer.domElement.addEventListener('mousemove', onMove);\n    renderer.domElement.addEventListener('dblclick', onDoubleClick);\n    window.addEventListener('mouseup', onUp);\n    window.addEventListener('resize', onResize, false);\n    btnAdd.addEventListener('click', onAdd);\n    btnRemove.addEventListener('click', onRemove);\n\n    function rad(degree) {\n        return degree * RAD;\n    }\n\n    function forge() {\n        var loader = new THREE.JSONLoader();\n        return {\n            load: function (callback) {\n                http({\n                    url: 'img/Body 1.js',\n                    onload: function (data) {\n                        data = data.replace(new RegExp('transparency', 'g'), 'opacity');\n                        var model = loader.parse(JSON.parse(data));\n                        callback(model.geometry, model.materials);\n                    }\n                });\n            }\n        };\n    }\n\n    function http(options) {\n        var o = {\n            method: 'GET',\n            responseType: 'text',\n        };\n        if (!options || !options.url || !options.onload) {\n            return;\n        }\n        for (var p in options) {\n            o[p] = options[p];\n        }\n        var req = new XMLHttpRequest();\n        req.open(o.method, o.url, true);\n        req.responseType = o.responseType; // 'blob';\n        req.onload = function () {\n            if (this.status === 200) {\n                // var blob = this.response;\n                // var image = URL.createObjectURL(blob); // IE10+\n                o.onload(this.response);\n            }\n        };\n        if (o.onerror) {\n            req.onerror = o.onerror;\n        }\n        if (o.onprogress) {\n            req.onerror = o.onprogress;\n        }\n        req.send();\n    }\n\n}());"]}