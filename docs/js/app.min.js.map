{"version":3,"sources":["docs/js/app.js"],"names":["angular","module","DEBUG","HELPER","JOINTS","MODELS","ANGLE","NORMAL","SCALE","I","flipQuaternion","THREE","Quaternion","setFromAxisAngle","Vector3","Math","PI","CombinerItem","item","this","size","box","Box3","group","Group","outer","inner","prototype","enter","callback","position","x","TweenLite","to","ease","Power2","easeOut","overwrite","onComplete","load","geometry","materials","minx","Number","POSITIVE_INFINITY","maxx","NEGATIVE_INFINITY","v","vertices","length","y","z","min","max","dx","console","log","model","Mesh","setFromObject","getSize","joints","getJoints","quaternionL","quaternion","clone","quaternionD","setFromUnitVectors","left","normal","multiplyScalar","right","quaternionR","multiplyQuaternions","multiply","inverse","positionL","positionR","origin","sub","applyQuaternion","mergeVertices","GeometryUtils","computeVertexNormals","verticesNeedUpdate","uvsNeedUpdate","Curvature","setEdges","color","Color","BoxGeometry","material","MeshStandardMaterial","wireframe","transparent","opacity","key","joint","euler","Euler","atan2","sqrt","rotation","copy","add","helper","MeshBasicMaterial","VertexNormalsHelper","set","flip","flipped","animation","pow","onUpdate","slerp","lerpVectors","face","ids","names","colors","filter","index","i","indexOf","name","faces","String","materialIndex","push","a","b","c","center","reduce","divideScalar","setFlip","updateMatrixWorld","Combiner","scene","combiner","flags","rotate","flipping","entering","items","hittables","boxhelper","Box3Helper","originhelper","centerhelper","unselect","map","adjust","combine","fit","busy","setRotationFromQuaternion","getWorldQuaternion","getWorldPosition","getCenter","selection","flipItem","setTimeout","hitAndFlip","raycaster","hitted","intersectObjects","object","prev","pop","parent","remove","next","splice","select","selectedItem","selectedModel","update","first","window","factory","setGeometry","positions","normals","px","py","pz","nx","ny","nz","sx","sy","sz","pyx","pyz","pzx","yx","yz","zx","xy","zy","xz","dict","attributes","array","count","normalize","toArray","toString","subVectors","dot","curvatures","Object","keys","forEach","sum","val","abs","range","p","s","f","attribute","Float32Array","clamp","smoothstep","addAttribute","BufferAttribute","angleThresold","BufferGeometry","fromGeometry","edge","ia","ib","ic","va","vb","vc","pa","pb","pc","na","nb","nc","ma","mb","dEdge","Array","fill","points","hits","addEdge","cc","undefined","ca","pd","cb","centroid","edges","matches","ab","acos","RAD2DEG","ac","h","toFixed","Effects","camera","renderer","w","renderPass","RenderPass","outlinePass","OutlinePass","Vector2","visibleEdgeColor","hiddenEdgeColor","edgeStrength","edgeGlow","edgeThickness","pulsePeriod","usePatternTexture","fxaaPass","ShaderPass","FXAAShader","uniforms","resolution","value","renderToScreen","composer","EffectComposer","addPass","render","resize","setSize","selectedObjects","RAD","Fitter","controls","fitter","dummy","projector","Projector","target","distance","angle","endTarget","distanceMin","distanceMax","rotationAngle","dragAngle","zoom","offset","up","lookAt","updateProjectionMatrix","toScreen","applyMatrix4","matrixWorldInverse","aspect","dim","sin","fov","distanceTo","vfrom","vto","qfrom","qto","innerWidth","innerHeight","screen","project","toWorld","world","unprojectVector","cos","Forge","loader","JSONLoader","service","options","o","method","responseType","url","onload","req","XMLHttpRequest","open","status","response","onerror","onprogress","send","http","data","replace","RegExp","parse","JSON","Library","FINISHES","randomFinish","floor","random","randomSecondaryFinish","BASE","ANISOTROPY","capabilities","getMaxAnisotropy","replaceShader","manager","LoadingManager","textures","getTextures","getMaterials","colorTween","from","hex","fromColor","getHex","r","g","getWeatheredNode","StandardNodeMaterial","curvature","AttributeNode","brushed","TextureNode","brushedInvert","Math1Node","INVERT","brushedInvertDark","Math3Node","ColorNode","FloatNode","MUL","MIX","roughnessA","roughnessB","roughness","metalness","build","MeshPhongMaterial","visible","top","bottom","bumpMap","bumpScale","envMap","env","wrap","specular","shininess","reflectivity","specularMap","leatherLight","leatherBump","bronze","roughnessMap","silver","metalnessMap","weathered","envMapIntensity","gold","green","red","standard","black","sand","_silver","weatheredInverted","_black","light","off","on6","emissive","on12","glare","MeshLambertMaterial","blending","AdditiveBlending","MixOperation","emitterGlare","getTextureCube","anisotropy","format","RGBFormat","getTexture","wrapS","RepeatWrapping","wrapT","repeat","bump","reptileBump","reptileLight","stingrayBump","stingrayLight","TextureLoader","texture","loaded","total","e","CubeTextureLoader","setPath","getTextureCubeHdr","urls","HDRCubeTextureLoader","UnsignedByteType","cubemap","gammaInput","gammaOutput","toneMapping","LinearToneMapping","toneMappingExposure","generator","PMREMGenerator","packer","PMREMCubeUVPacker","cubeLods","CubeUVRenderTarget","dispose","needsUpdate","fragment","ShaderChunk","meshphong_frag","setFinish","finish","library","setNextFloor","FLOOR","materialTween","updateMaterials","secondaryFinish","hexToRgb","result","exec","parseInt","MIN","Orbiter","orbiter","values","tween","friction","defineProperty","TypeError","O","len","relativeStart","arguments","k","end","relativeEnd","final","Element","hasClass","test","className","addClass","removeClass","split","join","isDescendant","node","parentNode","getBounds","bounds","width","offsetWidth","height","offsetHeight","getTouch","t","relativeTo","rect","getBoundingClientRect","scrollX","pageXOffset","document","documentElement","scrollLeft","scrollY","pageYOffset","scrollTop","pinchSize","type","touch","second","touches","originalEvent","changedTouches","pageX","pageY","calcNormal","n","angleTo","DEG2RAD","computeFaceNormals","vertexNormals","normalsNeedUpdate","FaceUtils","computeCentroid","directive","Polyfills","Prototypes","ThreeUtils","restrict","link","scope","element","container","Detector","webgl","down","moved","Raycaster","forge","WebGLRenderer","alpha","antialias","setClearColor","setPixelRatio","devicePixelRatio","appendChild","domElement","PerspectiveCamera","Scene","lights","AmbientLight","light1","DirectionalLight","light2","addLights","PlaneBufferGeometry","effects","btnAdd","querySelector","btnRemove","btnFlip","btnFinish","btnFloor","animate","addEventListener","onMouseDown","onTouchDown","onWheel","onKeyUp","onResize","onAdd","onRemove","onFlip","onFinish","onFloor","addGetWebGLMessage","snapshot","requestId","requestAnimationFrame","onDown","mx","startDragAngle","startDistance","setFromCamera","onMove","stopPropagation","preventDefault","move","diff","onUp","removeEventListener","event","delta","wheelDelta","detail","keyCode"],"mappings":"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","file":"app.min.js","sourcesContent":["/* global angular */\n\n(function () {\n    \"use strict\";\n\n    var app = angular.module('app', ['jsonFormatter']);\n\n}());\n/* global angular, window, document, console, TweenLite */\n\n(function () {\n    'use strict';\n\n    var DEBUG = {\n        HELPER: false,\n        JOINTS: false,\n        MODELS: false,\n        ANGLE: false,\n        NORMAL: false,\n    };\n\n    var SCALE = 0.025;\n    var I = 0;\n\n    function rad(degree) {\n        return degree * THREE.Math.DEG2RAD;\n    }\n\n    var flipQuaternion = new THREE.Quaternion();\n    flipQuaternion.setFromAxisAngle(new THREE.Vector3(0, 1, 0), Math.PI);\n\n    var CombinerItem = function () {\n\n        function CombinerItem() {\n            var item = this;\n            item.size = new THREE.Vector3();\n            item.box = new THREE.Box3();\n            item.group = new THREE.Group();\n            item.outer = new THREE.Group();\n            item.inner = new THREE.Group();\n        }\n\n        CombinerItem.prototype = {\n            enter: enter,\n            load: load,\n            flip: flip,\n            getJoints: getJoints,\n            setFlip: setFlip,\n        };\n\n        function enter(callback) {\n            var item = this;\n            item.outer.position.x = item.size.x;\n            TweenLite.to(item.outer.position, 0.6, {\n                x: 0,\n                ease: Power2.easeOut,\n                overwrite: 'all',\n                // ease: Elastic.easeOut, \n                onComplete: function () {\n                    if (typeof callback === 'function') {\n                        callback();\n                    }\n                }\n            });\n        }\n\n        function flip(callback) {\n            var item = this,\n                inner = item.inner;\n            // console.log('flip()');\n            item.flipped = !item.flipped;\n            var animation = {\n                pow: item.flipped ? 0 : 1\n            };\n            TweenLite.to(animation, 0.3, {\n                pow: item.flipped ? 1 : 0,\n                ease: Power2.easeOut,\n                overwrite: 'all',\n                // ease: Elastic.easeOut,\n                onUpdate: function () {\n                    THREE.Quaternion.slerp(item.quaternionL, item.quaternionR, item.model.quaternion, animation.pow);\n                    item.model.position.lerpVectors(item.positionL, item.positionR, animation.pow);\n                },\n                onComplete: function () {\n                    // console.log('flipped');\n                    // item.setFlip();\n                    if (typeof callback === 'function') {\n                        callback();\n                    }\n                },\n            });\n            /*\n            TweenLite.to(inner.rotation, 0.3, {\n                y: item.flipped ? Math.PI : 0,\n                ease: Power2.easeOut,\n                overwrite: 'all',\n                // ease: Elastic.easeOut,\n                // onUpdate: function() { },\n                onComplete: function () {\n                    // console.log('flipped');\n                    item.setFlip();\n                    if (typeof callback === 'function') {\n                        callback();\n                    }\n                },\n            });\n            */\n        }\n\n        function getCentroid(vertices) {\n            var center = vertices.reduce(function (a, b) {\n                return {\n                    x: a.x + b.x,\n                    y: a.y + b.y,\n                    z: a.z + b.z\n                };\n            });\n            return new THREE.Vector3().add(center).divideScalar(vertices.length);\n        }\n\n        function getJoints(geometry, materials, size) {\n            var joints = {},\n                ids = {},\n                /*\n                diffs = [\n                    new THREE.Vector3(-size.x / 2, 0, 0), // left\n                    new THREE.Vector3(size.x / 2, 0, 0), // right\n                    new THREE.Vector3(0, -size.y / 2, 0), // top\n                    new THREE.Vector3(0, size.y / 2, 0), // bottom\n                ],\n                */\n                names = ['left', 'right', 'top', 'bottom'],\n                colors = [0xff0000, 0x00ff00, 0x0000ff, 0xffff00],\n                index, joint, face;\n            materials.filter(function (material, index) {\n                // console.log(material);\n                var i = names.indexOf(material.name);\n                if (i !== -1) {\n                    var joint = new THREE.Group();\n                    // joint.diff = diffs[i];\n                    joint.name = names[i];\n                    joint.color = colors[i];\n                    joint.vertices = [];\n                    joints[material.name] = joint;\n                    ids[index] = joint;\n                }\n            });\n            for (var i = 0; i < geometry.faces.length; i++) {\n                face = geometry.faces[i];\n                joint = ids[String(face.materialIndex)];\n                if (joint) {\n                    joint.normal = joint.normal || face.normal; // assume all faces point toward direction;\n                    joint.vertices.push(geometry.vertices[face.a]);\n                    joint.vertices.push(geometry.vertices[face.b]);\n                    joint.vertices.push(geometry.vertices[face.c]);\n                    // console.log(joint.name, joint.normal);\n                }\n            }\n            for (var key in joints) {\n                joint = joints[key];\n                joint.position.copy(getCentroid(joint.vertices));\n                joint.origin = joint.position.clone();\n                // joint.diff.sub(joint.position);\n                joint.vertices = null;\n            }\n            if (!joints.left) {\n                joints.left = new THREE.Group();\n                joints.left.position.set(-size.x / 2, 0, 0);\n                joints.left.origin = joints.left.position.clone();\n                joints.left.normal = new THREE.Vector3(-1, 0, 0);\n                joints.left.c = colors[0];\n            }\n            if (!joints.right) {\n                joints.right = new THREE.Group();\n                joints.right.position.set(size.x / 2, 0, 0);\n                joints.right.origin = joints.right.position.clone();\n                joints.right.normal = new THREE.Vector3(1, 0, 0);\n                joints.right.c = colors[1];\n            }\n            if (DEBUG.ANGLE) {\n                joints.right.normal.y += 0.2;\n            }\n            // console.log('item.getJoints', joints, size);\n            return joints;\n        }\n\n        function load(geometry, materials) {\n            var item = this,\n                box = item.box,\n                size = item.size,\n                group = item.group,\n                outer = item.outer,\n                inner = item.inner;\n            var minx = Number.POSITIVE_INFINITY,\n                maxx = Number.NEGATIVE_INFINITY;\n            for (var v = 0; v < geometry.vertices.length; v++) {\n                geometry.vertices[v].x *= SCALE;\n                geometry.vertices[v].y *= SCALE;\n                geometry.vertices[v].z *= SCALE;\n                minx = Math.min(minx, geometry.vertices[v].x);\n                maxx = Math.max(maxx, geometry.vertices[v].x);\n            }\n            // var buffergeometry = new THREE.BufferGeometry();\n            // buffergeometry.fromGeometry(geometry);\n            var dx = (maxx + minx) / 2;\n            inner.position.x = dx;\n            console.log(minx, maxx, dx);\n            var model = new THREE.Mesh(geometry, materials);\n            box.setFromObject(model);\n            box.getSize(size);\n            var joints = item.getJoints(geometry, materials, size);\n            item.quaternionL = model.quaternion.clone();\n            var quaternionD = new THREE.Quaternion().setFromUnitVectors(joints.left.normal.clone().multiplyScalar(-1), joints.right.normal);\n            item.quaternionR = new THREE.Quaternion().multiplyQuaternions(item.quaternionL, flipQuaternion).multiply(quaternionD.inverse());\n            item.positionL = new THREE.Vector3();\n            item.positionR = joints.left.origin.clone().sub(joints.right.origin.clone().applyQuaternion(item.quaternionR));\n            model.geometry.mergeVertices();\n            THREE.GeometryUtils.computeVertexNormals(model.geometry, 40);\n            // model.geometry.computeFaceNormals();\n            // model.geometry.computeVertexNormals();\n            model.geometry.verticesNeedUpdate = true;\n            model.geometry.uvsNeedUpdate = true;\n            // setEdges\n            model.geometry = Curvature.setEdges(model.geometry);\n            // setGeometry\n            // model.geometry = new THREE.BufferGeometry().fromGeometry(model.geometry);\n            // Curvature.setGeometry(model.geometry);\n            // model.geometry.mergeVertices();\n            // model.geometry.computeFaceNormals();\n            // model.geometry.normalsNeedUpdate = true;\n            // model.geometry.uvsNeedUpdate = true;\n            // model.geometry.computeMorphNormals();\n            /*           \n            model.geometry.computeFaceNormals();\n            model.geometry.computeVertexNormals();\n            model.geometry.computeBoundingBox();\n            */\n            // console.log(model);\n            if (DEBUG.MODELS) {\n                // geometry = new THREE.CylinderGeometry(2, 2, 10, 10);            \n                materials[1].color = new THREE.Color(0x000000);\n                geometry = new THREE.BoxGeometry(size.x, size.y, size.z);\n                var material = new THREE.MeshStandardMaterial({\n                    color: new THREE.Color(0.2 * ++I, 0, 0),\n                    wireframe: false,\n                    transparent: false,\n                    opacity: 1.0,\n                });\n                model = new THREE.Mesh(geometry, material);\n            }\n            for (var key in joints) {\n                var joint = joints[key];\n                var x = joint.normal.x,\n                    y = joint.normal.y,\n                    z = -joint.normal.z;\n                var euler = new THREE.Euler(\n                    0,\n                    Math.atan2(z, x),\n                    Math.atan2(y, Math.sqrt(x * x + z * z))\n                );\n                joint.rotation.copy(euler);\n                model.add(joint);\n                // joint.oquaternion = new THREE.Quaternion().multiplyQuaternions(joint.quaternion, flipQuaternion);\n                if (DEBUG.JOINTS) {\n                    var helper = new THREE.Mesh(\n                        new THREE.BoxGeometry(0.1, 0.1, 0.1),\n                        new THREE.MeshBasicMaterial({\n                            color: joint.color,\n                        })\n                    );\n                    joint.add(helper);\n                    /*\n                    var s = size.x / 10;\n                    var arrow = new THREE.ArrowHelper(new THREE.Vector3(1, 0, 0), new THREE.Vector3(), s, joint.color, s / 2, s / 2);\n                    joint.add(arrow);\n                    */\n                }\n            }\n            if (DEBUG.NORMAL) {\n                var helper = new THREE.VertexNormalsHelper(model, 0.3, 0x00ff00, 1);\n                inner.add(helper);\n            }\n            inner.position.set(size.x / 2 - dx, 0, 0);\n            inner.add(model);\n            outer.add(inner);\n            group.add(outer);\n            item.joints = joints;\n            item.model = model;\n        }\n\n        function setFlip() {\n            var item = this,\n                model = item.model;\n            // THREE.Quaternion.slerp(item.quaternionL, item.quaternionR, item.model.quaternion, item.flipped ? 1 : 0);\n            model.quaternion.copy(item.flipped ? item.quaternionR : item.quaternionL);\n            model.position.copy(item.flipped ? item.positionR : item.positionL);\n            item.group.updateMatrixWorld();\n            /*\n            var position = new THREE.Vector3();\n            if (item.flipped) {\n                // model.quaternion.copy(item.joints.right.quaternion.conjugate());\n                // item.joints.right.localToWorld(position);\n                // item.pivot.worldToLocal(position);\n                // item.model.setRotationFromQuaternion(item.joints.right.quaternion.conjugate());\n                // item.model.position.set(0, 0, 0).sub(item.joints.right.origin);\n                // position.x -= item.size.x / 2;\n                // item.model.quaternion.setFromUnitVectors(item.joints.left.normal, item.joints.right.normal);\n            } else {\n                // model.quaternion.copy(item.joints.left.quaternion.conjugate());\n                // item.joints.left.localToWorld(position);\n                // item.pivot.worldToLocal(position);\n                // item.model.setRotationFromQuaternion(item.joints.left.quaternion.conjugate());\n                // item.model.position.set(0, 0, 0).sub(item.joints.left.origin);\n                // position.x += item.size.x / 2;\n                // item.model.setRotationFromQuaternion(new THREE.Quaternion());\n            }\n            item.model.updateMatrixWorld();\n            // console.log('setFlip', item.flipped, item.joints.left.quaternion);\n            */\n        }\n\n        return CombinerItem;\n\n    }();\n\n    var Combiner = function () {\n\n        function Combiner(scene) {\n            var combiner = this;\n            combiner.flags = {\n                rotate: false,\n            };\n            combiner.scene = scene;\n            combiner.flipping = 0;\n            combiner.entering = 0;\n            combiner.items = [];\n            combiner.hittables = [];\n            combiner.center = new THREE.Vector3();\n            combiner.size = new THREE.Vector3();\n            combiner.group = new THREE.Group();\n            combiner.box = new THREE.Box3();\n            if (DEBUG.HELPER) {\n                combiner.boxhelper = new THREE.Box3Helper(combiner.box, 0xff00ff);\n                combiner.originhelper = new THREE.Mesh(\n                    new THREE.BoxGeometry(0.1, 0.1, 0.1),\n                    new THREE.MeshBasicMaterial({\n                        color: 0xaa00ff\n                    })\n                );\n                combiner.centerhelper = new THREE.Mesh(\n                    new THREE.BoxGeometry(0.1, 0.1, 0.1),\n                    new THREE.MeshBasicMaterial({\n                        color: 0xff00ff\n                    })\n                );\n                combiner.group.add(combiner.originhelper);\n                scene.add(combiner.boxhelper);\n                scene.add(combiner.centerhelper);\n            }\n            scene.add(combiner.group);\n        }\n\n        Combiner.prototype = {\n            add: add,\n            adjust: adjust,\n            busy: busy,\n            combine: combine,\n            fit: fit,\n            flip: flip,\n            flipItem: flipItem,\n            hitAndFlip: hitAndFlip,\n            prev: prev,\n            pop: pop,\n            next: next,\n            remove: remove,\n            rotate: rotate,\n            select: select,\n            selectedItem: selectedItem,\n            selectedModel: selectedModel,\n            unselect: unselect,\n            update: update,\n        };\n\n        function add(geometry, materials) {\n            var combiner = this,\n                box = combiner.box,\n                size = combiner.size,\n                items = combiner.items,\n                hittables = combiner.hittables,\n                group = combiner.group;\n\n            combiner.unselect();\n            var item = new CombinerItem();\n            item.load(geometry, materials);\n            items.push(item);\n            combiner.hittables = items.map(function (item) {\n                return item.model;\n            });\n            group.add(item.group);\n            item.setFlip();\n            combiner.adjust();\n            return item;\n        }\n\n        function adjust() {\n            var combiner = this;\n            combiner.combine();\n            combiner.fit();\n            // combiner.fitCamera();\n        }\n\n        function busy() {\n            var combiner = this;\n            return combiner.entering || combiner.flipping;\n        }\n\n        function combine() {\n            var combiner = this,\n                items = combiner.items,\n                group = combiner.group;\n            // var quaternionL = new THREE.Quaternion();\n            var quaternionR = new THREE.Quaternion();\n            var positionL = new THREE.Vector3();\n            var positionR = new THREE.Vector3();\n            var left, right;\n            // var groupPosition = new THREE.Vector3();\n            // var lquaternion;\n\n            function combineItem(item, i) {\n                if (item.flipped) {\n                    // lquaternion = item.joints.right.quaternion;\n                    left = item.joints.right;\n                    right = item.joints.left;\n                } else {\n                    // lquaternion = item.joints.left.oquaternion;\n                    left = item.joints.left;\n                    right = item.joints.right;\n                }\n                if (i > 0) {\n                    //\n                    item.group.setRotationFromQuaternion(quaternionR);\n                    item.group.position.copy(positionR);\n                    //\n                    // positionL = left.position.clone();\n                    // item.model.localToWorld(positionL);\n                    // \n                    if (false) {\n                        left.getWorldPosition(positionL);\n                        item.group.worldToLocal(positionL);\n                        item.group.position.sub(positionL);\n                    }\n                    //\n                    // console.log('left.position', positionL);\n                    // item.group.position.set(0, 0, 0);\n                    // left.getWorldQuaternion(quaternionL);\n                    /*\n                    positionR.sub(groupPosition);\n                    item.group.position.copy(positionR);\n                    // item.group.setRotationFromQuaternion(quaternionR.multiply(lquaternion));\n                    item.group.setRotationFromQuaternion(quaternionR);\n                    */\n                }\n                //} else {\n                //    item.group.rotation.z = rad(30);\n                //}\n                // console.log(left.origin);\n                // right.updateMatrixWorld();\n                right.getWorldQuaternion(quaternionR);\n                right.getWorldPosition(positionR);\n            }\n            if (items.length) {\n                // group.getWorldPosition(groupPosition);\n                items.filter(combineItem);\n            }\n        }\n\n        function fit() {\n            var combiner = this,\n                box = combiner.box,\n                size = combiner.size,\n                center = combiner.center,\n                centerhelper = combiner.centerhelper,\n                group = combiner.group;\n            box.setFromObject(group);\n            box.getCenter(center);\n            box.getSize(size);\n            if (DEBUG.HELPER) {\n                centerhelper.position.copy(center);\n            }\n            /*\n            group.worldToLocal(center);\n            group.position.x = -center.x;\n            group.position.y = -center.y;\n            group.position.z = -center.z;\n            */\n            return size;\n        }\n\n        function flip(callback) {\n            var combiner = this;\n            if (combiner.selection) {\n                combiner.flipItem(combiner.selection.item, callback);\n            }\n        }\n\n        function flipItem(item, callback) {\n            var combiner = this;\n            combiner.flipping++;\n            item.flip(function () {\n                combiner.flipping--;\n                combiner.adjust();\n                // combiner.unselect(); ???\n                if (typeof (callback) === 'function') {\n                    setTimeout(function () {\n                        callback();\n                    }, 100);\n                }\n            });\n        }\n\n        function hitAndFlip(raycaster, callback) {\n            var combiner = this,\n                items = combiner.items,\n                hittables = combiner.hittables;\n            var hitted = raycaster.intersectObjects(hittables);\n            if (hitted.length) {\n                var index = hittables.indexOf(hitted[0].object);\n                var item = items[index];\n                combiner.flipItem(item, callback);\n            }\n        }\n\n        function next() {\n            var combiner = this,\n                items = combiner.items;\n            var selection = null;\n\n            if (items.length) {\n                var index = combiner.selection ? combiner.selection.index : -1;\n                index = index + 1 >= items.length ? 0 : index + 1;\n                var item = items[index];\n                var rotation = item.outer.rotation.clone();\n                selection = {\n                    index: index,\n                    item: item,\n                    rotation: rotation,\n                };\n                combiner.selection = selection;\n            }\n            return selection;\n        }\n\n        function pop() {\n            var combiner = this,\n                items = combiner.items,\n                hittables = combiner.hittables,\n                group = combiner.group;\n            if (items.length) {\n                var item = items.pop();\n                if (item.group.parent) {\n                    group.remove(item.group);\n                }\n                combiner.hittables = items.map(function (item) {\n                    return item.model;\n                });\n                combiner.adjust();\n                return item;\n            }\n        }\n\n        function prev() {\n            var combiner = this,\n                items = combiner.items;\n            var selection = null;\n\n            if (items.length) {\n                var index = combiner.selection ? combiner.selection.index : 0;\n                index = index - 1 < 0 ? items.length - 1 : index - 1;\n                var item = items[index];\n                var rotation = item.outer.rotation.clone();\n                selection = {\n                    index: index,\n                    item: item,\n                    rotation: rotation,\n                };\n                combiner.selection = selection;\n            }\n            return selection;\n        }\n\n        function remove() {\n            var combiner = this,\n                items = combiner.items,\n                hittables = combiner.hittables,\n                group = combiner.group;\n            if (combiner.selection) {\n                var selection = combiner.selection;\n                var item = selection.item;\n                items.splice(selection.index, 1);\n                if (item.group.parent) {\n                    group.remove(item.group);\n                }\n                combiner.hittables = items.map(function (item) {\n                    return item.model;\n                });\n                combiner.unselect();\n                combiner.adjust();\n                if (items.length > selection.index) {\n                    combiner.entering++;\n                    items[selection.index].enter(function () {\n                        combiner.entering--;\n                    });\n                }\n                return item;\n            } else {\n                return combiner.pop();\n            }\n        }\n\n        function rotate(y) {\n            var combiner = this;\n            combiner.selection.item.outer.rotation.x = combiner.selection.rotation.x + y;\n            combiner.selection.item.group.updateMatrixWorld();\n            combiner.adjust();\n        }\n\n        function select(raycaster) {\n            var combiner = this,\n                items = combiner.items,\n                hittables = combiner.hittables;\n\n            combiner.unselect();\n            var hitted = raycaster.intersectObjects(hittables);\n            var selection = null;\n            if (hitted.length) {\n                var index = hittables.indexOf(hitted[0].object);\n                var item = items[index];\n                var rotation = item.outer.rotation.clone();\n                /*\n                item.outline(true, combiner.library);\n                // item.model.material.emissive = new THREE.Color(0x888888);\n                */\n                // item.model.material.needsUpdate = true;\n                selection = {\n                    index: index,\n                    item: item,\n                    rotation: rotation,\n                };\n                combiner.selection = selection;\n            }\n            return selection;\n        }\n\n        function selectedItem(callback) {\n            var combiner = this;\n            if (combiner.selection && typeof callback === 'function') {\n                callback(combiner.selection.item);\n            }\n        }\n\n        function selectedModel(callback) {\n            var combiner = this;\n            if (combiner.selection && typeof callback === 'function') {\n                callback(combiner.selection.item.model);\n            }\n        }\n\n        function unselect() {\n            var combiner = this;\n            if (combiner.selection) {\n                /*\n                combiner.selection.item.outline(false, combiner.library);\n                // combiner.selection.item.model.material.emissive = new THREE.Color(0x000000);\n                */\n                // combiner.selection.item.model.material.needsUpdate = true;\n                combiner.selection = null;\n            }\n        }\n\n        function update() {\n            var combiner = this,\n                flags = combiner.flags;\n            if (!combiner.busy()) {\n                if (flags.rotate) {\n                    if (combiner.items.length) {\n                        var first = combiner.items[0];\n                        first.outer.rotation.x += 0.01;\n                        combiner.adjust();\n                    }\n                } else {\n                    // combiner.combine();\n                    combiner.fit();\n                }\n            }\n        }\n\n        return Combiner;\n\n    }();\n\n    window.Combiner = Combiner;\n\n    var app = angular.module('app');\n\n    app.factory('Combiner', [function () {\n        return Combiner;\n    }]);\n\n}());\n/* global angular, window, document, console, TweenLite */\n\n(function () {\n    'use strict';\n\n    var Curvature = function () {\n\n        function Curvature() {\n\n        }\n\n        // statics\n        Curvature.setGeometry = setGeometry;\n        Curvature.setEdges = setEdges;\n\n        function setGeometry(geometry) {\n            // geometry.center();\n            var i, positions, normals, px, py, pz, nx, ny, nz, sx, sy, sz, pyx, pyz, pzx, nyx, nyz, nzx, yx, yz, zx, xy, zy, xz;\n            var dict = {};\n            positions = geometry.attributes.position.array;\n            normals = geometry.attributes.normal.array;\n            for (i = 0; i < geometry.attributes.position.count; i += 3) {\n                px = new THREE.Vector3(positions[3 * i], positions[3 * i + 1], positions[3 * i + 2]);\n                py = new THREE.Vector3(positions[3 * (i + 1)], positions[3 * (i + 1) + 1], positions[3 * (i + 1) + 2]);\n                pz = new THREE.Vector3(positions[3 * (i + 2)], positions[3 * (i + 2) + 1], positions[3 * (i + 2) + 2]);\n                nx = new THREE.Vector3(normals[3 * i], normals[3 * i + 1], normals[3 * i + 2]).normalize();\n                ny = new THREE.Vector3(normals[3 * (i + 1)], normals[3 * (i + 1) + 1], normals[3 * (i + 1) + 2]).normalize();\n                nz = new THREE.Vector3(normals[3 * (i + 2)], normals[3 * (i + 2) + 1], normals[3 * (i + 2) + 2]).normalize();\n                sx = px.toArray().toString();\n                sy = py.toArray().toString();\n                sz = pz.toArray().toString();\n                pyx = new THREE.Vector3().subVectors(py, px);\n                pyz = new THREE.Vector3().subVectors(py, pz);\n                pzx = new THREE.Vector3().subVectors(pz, px);\n                nyx = new THREE.Vector3().subVectors(ny, nx);\n                nyz = new THREE.Vector3().subVectors(ny, nz);\n                nzx = new THREE.Vector3().subVectors(nz, nx);\n                yx = ny.dot(pyx.normalize());\n                yz = ny.dot(pyz.normalize());\n                zx = nz.dot(pzx.normalize());\n                xy = -nx.dot(pyx.normalize());\n                zy = -nz.dot(pyz.normalize());\n                xz = -nx.dot(pzx.normalize());\n                dict[sx] = dict[sx] || {};\n                dict[sx][sy] = xy;\n                dict[sx][sz] = xz;\n                dict[sy] = dict[sy] || {};\n                dict[sy][sx] = yx;\n                dict[sy][sz] = yz;\n                dict[sz] = dict[sz] || {};\n                dict[sz][sx] = zx;\n                dict[sz][sy] = zy;\n            }\n\n            var curvatures = {};\n            var min = 1000,\n                max = 0;\n\n            Object.keys(dict).forEach(function (key) {\n                curvatures[key] = average(dict[key]);\n            });\n\n            /*\n            var smoothed = Object.create(curvatures);\n            Object.keys(dict).forEach(function (key) {\n                var count = 0;\n                var sum = 0;\n                Object.keys(dict[key]).forEach(function (key2) {\n                    sum += smoothed[key2];\n                    count++;\n                });\n                smoothed[key] = sum / count;\n            });\n            curvatures = smoothed;\n            */\n\n            Object.keys(curvatures).forEach(function (key) {\n                var val = Math.abs(curvatures[key]);\n                if (val < min) min = val;\n                if (val > max) max = val;\n            });\n\n            var range = (max - min);\n            console.log('range', range);\n\n            Object.keys(curvatures).forEach(function (key) {\n                var val = Math.abs(curvatures[key]);\n                if (curvatures[key] < 0) {\n                    curvatures[key] = (min - val) / range;\n                } else {\n                    curvatures[key] = (val - min) / range;\n                }\n            });\n\n            var attribute = new Float32Array(geometry.attributes.position.count);\n\n            var p, s, f;\n            for (i = 0; i < geometry.attributes.position.count; i++) {\n                positions = geometry.attributes.position.array;\n                p = new THREE.Vector3(positions[3 * i], positions[3 * i + 1], positions[3 * i + 2]);\n                s = p.toArray().toString();\n                f = curvatures[s];\n                f = THREE.Math.clamp(THREE.Math.smoothstep(f, 0.0, 1.0) * 2.0, 0.0, 1.0);\n                attribute[i] = f;\n            }\n\n            geometry.addAttribute('curvature', new THREE.BufferAttribute(attribute, 1));\n        }\n\n        function setEdges(geometry, angleThresold) {\n            angleThresold = angleThresold || 50;\n\n            var faces = geometry.faces,\n                vertices = geometry.vertices,\n                face, centroid;\n            geometry = new THREE.BufferGeometry().fromGeometry(geometry);\n            var dEdge = {},\n                edge, key, i, ia, ib, ic, va, vb, vc, pa, pb, pc, na, nb, nc, ma, mb,\n                dot, cross, angle;\n            var positions = geometry.attributes.position.array;\n            var normals = geometry.attributes.normal.array;\n            var colors = geometry.attributes.color.array;\n\n            var curvatures = new Array(geometry.attributes.position.count).fill(0.0);\n            var points = new Array(vertices.length).fill(0);\n            var hits = new Array(vertices.length).fill(0);\n\n            function addEdge(ia, ib, pa, pb, va, vb, na, nb, cc) {\n                ma = Math.min(ia, ib); // minimun vertex index\n                mb = Math.max(ia, ib); // maximum vertex index\n                key = ma + '-' + mb;\n                if (dEdge[key] === undefined) {\n                    dEdge[key] = {\n                        ia: ia,\n                        ib: ib,\n                        pa: pa, // vertex index a\n                        pb: pb, // vertex index a\n                        na: na, // normal a\n                        va: va, // vertex a\n                        ca: cc, // centroid face a\n                    };\n                } else {\n                    // dEdge[key].ib = mb;\n                    dEdge[key].pc = pa, // vertex index b\n                        dEdge[key].pd = pb, // vertex index b\n                        dEdge[key].nb = nb; // normal b\n                    dEdge[key].vb = vb; // vertex b\n                    dEdge[key].cb = cc; // centroid face b\n                }\n            }\n\n            var cc;\n            for (var f = 0; f < faces.length; f++) {\n                face = faces[f];\n                // vertex indices\n                ia = face.a;\n                ib = face.b;\n                ic = face.c;\n                // normals\n                if (false && face.vertexNormals.length === 3) {\n                    na = face.vertexNormals[0].clone();\n                    nb = face.vertexNormals[1].clone();\n                    nc = face.vertexNormals[2].clone();\n                } else {\n                    na = face.normal.clone();\n                    nb = face.normal.clone();\n                    nc = face.normal.clone();\n                }\n                /*\n                i = 9 * f;\n                na = new THREE.Vector3(normals[i], normals[i + 1], normals[i + 2]);\n                nb = new THREE.Vector3(normals[i + 3], normals[i + 4], normals[i + 5]);\n                nc = new THREE.Vector3(normals[i + 6], normals[i + 7], normals[i + 8]);\n                */\n                // vertices\n                va = vertices[ia];\n                vb = vertices[ib];\n                vc = vertices[ic];\n                /*\n                va = new THREE.Vector3(positions[i], positions[i + 1], positions[i + 2]);\n                vb = new THREE.Vector3(positions[i + 3], positions[i + 4], positions[i + 5]);\n                vc = new THREE.Vector3(positions[i + 6], positions[i + 7], positions[i + 8]);\n                */\n                // centroid\n                // centroid = THREE.FaceUtils.computeCentroid(face, vertices);\n                var centroid = new THREE.Vector3();\n                centroid.add(va);\n                centroid.add(vb);\n                centroid.add(vc);\n                centroid.divideScalar(3);\n                //\n                pa = 3 * f + 0;\n                pb = 3 * f + 1;\n                pc = 3 * f + 2;\n                //\n                addEdge(ia, ib, pa, pb, va, vb, na, nb, centroid); // key edge a-b\n                addEdge(ib, ic, pb, pc, vb, vc, nb, nc, centroid); // key edge b-c\n                addEdge(ic, ia, pc, pa, vc, va, nc, na, centroid); // key edge c-a\n                //\n            }\n\n            var edges = Object.keys(dEdge);\n            var matches = 0;\n\n            for (key in dEdge) {\n                edge = dEdge[key];\n                var ab, ac;\n                if (edge.nb) {\n                    na = edge.na;\n                    nb = edge.nb;\n                    nc = new THREE.Vector3().subVectors(edge.cb, edge.ca).normalize();\n                    var ab = Math.acos(THREE.Math.clamp(na.dot(nb), -1, 1));\n                    ab *= THREE.Math.RAD2DEG;\n                    // console.log(ab);\n                    var ac = na.dot(nc);\n                    if (ac < 0) {\n                        ab += 180;\n                    }\n                    if (ab > 180) {\n                        matches++;\n                    } else {\n                        ab = 0;\n                    }\n                    ab /= 360;\n                    points[edge.ia] += ab;\n                    points[edge.ib] += ab;\n                    hits[edge.ia]++;\n                    hits[edge.ib]++;\n                }\n                // console.log('key', key);\n            }\n            for (i = 0; i < points.length; i++) {\n                var h = hits[i];\n                if (h > 0) {\n                    points[i] /= h;\n                }\n            }\n            for (key in dEdge) {\n                edge = dEdge[key];\n                if (edge.nb) {\n                    curvatures[edge.pa] = points[edge.ia];\n                    curvatures[edge.pb] = points[edge.ib];\n                    curvatures[edge.pd] = points[edge.ia];\n                    curvatures[edge.pc] = points[edge.ib];\n                    // console.log(edge.ia + '-' + edge.ib, edge.pa + '-' + edge.pb);\n                }\n            }\n            for (i = 0; i < curvatures.length; i++) {\n                colors[3 * i + 0] = curvatures[i];\n                colors[3 * i + 1] = 0.1;\n                colors[3 * i + 2] = 0.1;\n            }\n            curvatures = new Float32Array(curvatures);\n            geometry.addAttribute('curvature', new THREE.BufferAttribute(curvatures, 1));\n            console.log('points', points.length, 'faces', faces.length, 'positions', geometry.attributes.position.count);\n            console.log('edges', edges.length, 'matches', matches, (matches / edges.length * 100).toFixed(2) + '%', 'angle', angleThresold + '°');\n            return geometry;\n        }\n\n        function setEdges1(geometry, minThresholdAngle, maxThresholdAngle) {\n            var min = minThresholdAngle || 265,\n                max = maxThresholdAngle || 275;\n            /*\n            var convexMinDot = Math.cos(THREE.Math.DEG2RAD * (minThresholdAngle || 265));\n            var convexMaxDot = Math.cos(THREE.Math.DEG2RAD * (maxThresholdAngle || 275));\n            var convexMinDotNeg = Math.cos(THREE.Math.DEG2RAD * (minThresholdAngle || 265) - 180);\n            var convexMaxDotNeg = Math.cos(THREE.Math.DEG2RAD * (maxThresholdAngle || 275) - 180);\n            */\n\n            var faces = geometry.faces,\n                vertices = geometry.vertices,\n                face, vert;\n            geometry = new THREE.BufferGeometry().fromGeometry(geometry);\n            var dEdge = {},\n                edge, key, i, ia, ib, ic, va, vb, vc, pa, pb, pc, sa, sb, sc, na, nb, nc, ma, mb,\n                dot, cross, angle;\n            var positions = geometry.attributes.position.array;\n            var normals = geometry.attributes.normal.array;\n\n            function addKey(ia, ib, sa, sb, pa, pb, i) {\n                ma = Math.min(ia, ib); // minimun vertex index\n                mb = Math.max(ia, ib); // maximum vertex index\n                key = ma + '-' + mb;\n                if (dEdge[key] === undefined) {\n                    dEdge[key] = {\n                        sa: sa, // string key vertex a\n                        sb: sb, // string key vertex b\n                        na: pa, // index normal a\n                        fa: i, // index face a\n                        fb: undefined\n                    };\n                } else {\n                    dEdge[key].nb = pa; // index normal b (pa or pb should be indifferently)\n                    dEdge[key].fb = i; // index face b\n                }\n            }\n\n            for (var f = 0; f < faces.length; f++) {\n                face = faces[f];\n                // vertex indices\n                ia = face.a;\n                ib = face.b;\n                ic = face.c;\n                // vertices\n                va = vertices[ia];\n                vb = vertices[ib];\n                vc = vertices[ic];\n                // dVert keys\n                sa = va.toArray().toString();\n                sb = vb.toArray().toString();\n                sc = vc.toArray().toString();\n                i = f * 9; // position face index                \n                pa = i; // position vert a index\n                pb = i + 3; // position vert b index\n                pc = i + 6; // position vert c index\n                // dEdge keys\n                addKey(ia, ib, sa, sb, pa, pb, i); // key edge a-b\n                addKey(ib, ic, sb, sc, pb, pc, i); // key edge b-c\n                addKey(ic, ia, sc, sa, pc, pa, i); // key edge c-a\n            }\n\n            var curvatures = new Array(geometry.attributes.position.count).fill(0.0);\n            curvatures = new Float32Array(curvatures);\n\n            var edges = Object.keys(dEdge);\n            var matches = 0;\n\n            var dVert = {};\n\n            for (key in dEdge) {\n                edge = dEdge[key];\n                if (edge.nb) {\n                    na = edge.na;\n                    nb = edge.nb;\n                    va = new THREE.Vector3(normals[na], normals[na + 1], normals[na + 2]);\n                    vb = new THREE.Vector3(normals[nb], normals[nb + 1], normals[nb + 2]);\n                    dot = va.dot(vb);\n                    angle = Math.acos(dot) * THREE.Math.RAD2DEG;\n                    cross = new THREE.Vector3().crossVectors(va, vb);\n                    if (cross.x < 0 || cross.y < 0 || cross.z < 0) {\n                        angle += 180;\n                    }\n                    if (angle >= min && angle <= max) {\n                        sa = edge.sa;\n                        sb = edge.sb;\n                        dVert[sa] = dot;\n                        dVert[sb] = dot;\n                    }\n                }\n            }\n            // apply curvature\n            for (i = 0; i < curvatures.length; i++) {\n                va = new THREE.Vector3(positions[3 * i], positions[3 * i + 1], positions[3 * i + 2]);\n                sa = va.toArray().toString();\n                curvatures[i] = dVert[sa];\n            }\n            geometry.addAttribute('curvature', new THREE.BufferAttribute(curvatures, 1));\n            console.log('faces', faces.length, 'vertex', geometry.attributes.position.count);\n            console.log('edges', edges.length, 'matches', matches, (matches / edges.length * 100).toFixed(2) + '%');\n\n            // faces 13754 vertex 41262\n            // edges 20368 matches 0 0.00%\n            return geometry;\n        }\n\n        function setEdges2(geometry, thresholdAngle) {\n            thresholdAngle = thresholdAngle || 90;\n            var thresholdDot = Math.cos(THREE.Math.DEG2RAD * thresholdAngle);\n\n            var faces = geometry.faces,\n                face;\n            geometry = new THREE.BufferGeometry().fromGeometry(geometry);\n            var dEdge = {},\n                edge, key, ea, eb, i, ia, ib, ic, va, vb, vc, na, nb, nc;\n            // var positions = geometry.attributes.position.array;\n            var normals = geometry.attributes.normal.array;\n\n            function addKey(va, vb, ia, ib, i) {\n                ea = Math.min(va, vb);\n                eb = Math.max(va, vb);\n                key = ea + '-' + eb;\n                if (dEdge[key] === undefined) {\n                    dEdge[key] = {\n                        a: ia,\n                        b: ib,\n                        c: ia,\n                        d: ib,\n                        fa: i,\n                        fb: undefined\n                    };\n                } else {\n                    dEdge[key].fb = i;\n                    dEdge[key].c = ia;\n                    dEdge[key].d = ib;\n                }\n            }\n            for (var f = 0; f < faces.length; f++) {\n                face = faces[f];\n                i = f * 9;\n                va = face.a;\n                vb = face.b;\n                vc = face.c;\n                ia = i;\n                ib = i + 3;\n                ic = i + 6;\n                addKey(va, vb, ia, ib, i);\n                addKey(vb, vc, ib, ic, i);\n                addKey(vc, va, ic, ia, i);\n            }\n\n            var attribute = new Float32Array(geometry.attributes.position.count);\n            for (i = 0; i < geometry.attributes.position.count; i++) {\n                attribute[i] = 1.0;\n            }\n            var edges = Object.keys(dEdge);\n            console.log(edges.length);\n            var matches = 0;\n\n            function fillEdge(e) {\n                attribute[e.a / 3] = 0.0;\n                attribute[e.b / 3] = 0.0;\n                attribute[e.c / 3] = 0.0;\n                attribute[e.d / 3] = 0.0;\n                matches++;\n            }\n            for (key in dEdge) {\n                edge = dEdge[key];\n                if (edge.fb === undefined) {\n                    fillEdge(edge);\n                } else {\n                    ia = edge.fa;\n                    ib = edge.fb;\n                    na = new THREE.Vector3(normals[ia], normals[ia + 1], normals[ia + 2]);\n                    nb = new THREE.Vector3(normals[ib], normals[ib + 1], normals[ib + 2]);\n                    if (na.dot(nb) <= thresholdDot) {\n                        fillEdge(edge);\n                    }\n                }\n            }\n            geometry.addAttribute('curvature', new THREE.BufferAttribute(attribute, 1));\n            console.log('matches', matches, (matches / edges.length * 100).toFixed(2));\n            return geometry;\n        }\n\n        function setEdges3(geometry, thresholdAngle) {\n            thresholdAngle = thresholdAngle || 90;\n            var thresholdDot = Math.cos(THREE.Math.DEG2RAD * thresholdAngle);\n            var edge = [0, 0],\n                dEdge = {},\n                edge1, edge2;\n            var key, keys = ['a', 'b', 'c'];\n            /*\n            var geometry2;\n            if (geometry.isBufferGeometry) {\n                geometry2 = new THREE.Geometry();\n                geometry2.fromBufferGeometry(geometry);\n            } else {\n                geometry2 = geometry.clone();\n            }\n            */\n            // geometry2.mergeVertices();\n            // geometry2.computeFaceNormals();\n            var faces = geometry.faces;\n            // now create a data structure where each entry represents an edge with its adjoining faces\n            for (var i = 0; i < faces.length; i++) {\n                var face = faces[i];\n                for (var j = 0; j < 3; j++) {\n                    edge1 = face[keys[j]];\n                    edge2 = face[keys[(j + 1) % 3]];\n                    edge[0] = Math.min(edge1, edge2);\n                    edge[1] = Math.max(edge1, edge2);\n                    key = edge[0] + ',' + edge[1];\n                    if (dEdge[key] === undefined) {\n                        dEdge[key] = {\n                            a: edge[0],\n                            b: edge[1],\n                            fa: i,\n                            fb: undefined\n                        };\n                    } else {\n                        dEdge[key].fb = i;\n                    }\n                }\n            }\n            var vertices = geometry.vertices;\n            var attribute = new Float32Array(vertices.length * 3);\n            for (var i = 0; i < vertices.length * 3; i++) {\n                attribute[i] = 1.0;\n            }\n            var edges = Object.keys(dEdge);\n            console.log(edges.length);\n            var matches = 0;\n            for (key in dEdge) {\n                var e = dEdge[key];\n                // an edge is only rendered if the angle (in degrees) between the face normals of the adjoining faces exceeds this value. default = 1 degree.\n                if (e.fb === undefined || faces[e.fa].normal.dot(faces[e.fb].normal) <= thresholdDot) {\n                    /*\n                    var vertex = vertices[e.a];\n                    vertices.push(vertex.x, vertex.y, vertex.z);\n                    vertex = vertices[e.b];\n                    vertices.push(vertex.x, vertex.y, vertex.z);\n                    */\n                    attribute[e.a * 3] = 0.0;\n                    attribute[e.a * 3 + 1] = 0.0;\n                    attribute[e.a * 3 + 2] = 0.0;\n                    attribute[e.b * 3] = 0.0;\n                    attribute[e.b * 3 + 1] = 0.0;\n                    attribute[e.b * 3 + 2] = 0.0;\n                    matches++;\n                }\n            }\n            console.log(geometry.normals.length);\n            console.log('matches', matches, (matches / edges.length * 100).toFixed(2));\n            geometry = new THREE.BufferGeometry().fromDirectGeometry(geometry);\n            geometry.addAttribute('curvature', new THREE.BufferAttribute(attribute, 1));\n            console.log('verts', vertices.length, geometry.attributes.position.count);\n            // build geometry\n            // this.addAttribute('position', new Float32BufferAttribute(vertices, 3));\n            return geometry;\n        }\n\n        function average(dict) {\n            var sum = 0;\n            var length = 0;\n            Object.keys(dict).forEach(function (key) {\n                sum += dict[key];\n                length++;\n            });\n            return sum / length;\n        }\n\n        function filterConcave(curvature) {\n            for (var i = 0; i < curvature.length; i++) {\n                curvature[i] = Math.abs(THREE.Math.clamp(curvature[i], -1, 0));\n            }\n        }\n\n        function filterConvex(curvature) {\n            for (var i = 0; i < curvature.length; i++) {\n                curvature[i] = THREE.Math.smoothstep(curvature[i], 0.0, 0.7);\n                // curvature[i] = THREE.Math.clamp(curvature[i], 0, 1);\n            }\n        }\n\n        function filterBoth(curvature) {\n            for (var i = 0; i < curvature.length; i++) {\n                curvature[i] = Math.abs(curvature[i]);\n            }\n        }\n\n        return Curvature;\n\n    }();\n\n    window.Curvature = Curvature;\n\n    var app = angular.module('app');\n\n    app.factory('Curvature', [function () {\n        return Curvature;\n    }]);\n\n}());\n/* global angular, window, document, console, TweenLite */\n\n(function () {\n    'use strict';\n\n    var Effects = function () {\n\n        function Effects(scene, camera, renderer, w, h) {\n            var effects = this;\n            //\n            var renderPass = new THREE.RenderPass(scene, camera);\n            //\n            var outlinePass = new THREE.OutlinePass(new THREE.Vector2(w, h), scene, camera);\n            outlinePass.visibleEdgeColor.set(0x00ff00);\n            outlinePass.hiddenEdgeColor.set(0x000000);\n            outlinePass.edgeStrength = 5.0;\n            outlinePass.edgeGlow = 0.0;\n            outlinePass.edgeThickness = 1.0;\n            outlinePass.pulsePeriod = 2;\n            outlinePass.rotate = false;\n            outlinePass.usePatternTexture = false;\n            //\n            var fxaaPass = new THREE.ShaderPass(THREE.FXAAShader);\n            fxaaPass.uniforms.resolution.value.set(1 / w, 1 / h);\n            fxaaPass.renderToScreen = true;\n            //\n            var composer = new THREE.EffectComposer(renderer);\n            composer.addPass(renderPass);\n            composer.addPass(outlinePass);\n            composer.addPass(fxaaPass);\n            //\n            effects.renderPass = renderPass;\n            effects.outlinePass = outlinePass;\n            effects.fxaaPass = fxaaPass;\n            effects.composer = composer;\n        }\n\n        Effects.prototype = {\n            update: update,\n            resize: resize,\n            select: select,\n            unselect: unselect,\n        };\n\n        function update() {\n            var effects = this;\n            effects.composer.render();\n        }\n\n        function resize(w, h) {\n            var effects = this;\n            effects.composer.setSize(w, h);\n            effects.fxaaPass.uniforms.resolution.value.set(1 / w, 1 / h);\n        }\n\n        function select(object) {\n            var effects = this;\n            effects.outlinePass.selectedObjects = [object];\n        }\n\n        function unselect() {\n            var effects = this;\n            effects.outlinePass.selectedObjects = [];\n        }\n\n        return Effects;\n\n    }();\n\n    window.Effects = Effects;\n\n    var app = angular.module('app');\n\n    app.factory('Effects', [function () {\n        return Effects;\n    }]);\n\n}());\n/* global angular, window, document, console, TweenLite */\n\n(function () {\n    'use strict';\n\n    var DEBUG = true;\n    var RAD = Math.PI / 180;\n    var I = 0;\n\n    function rad(degree) {\n        return degree * RAD;\n    }\n\n    var Fitter = function () {\n\n        function Fitter(scene, camera, controls) {\n            var fitter = this;\n            fitter.scene = scene;\n            fitter.camera = camera;\n            fitter.dummy = camera.clone();\n            fitter.controls = controls;\n            fitter.projector = new THREE.Projector();\n            fitter.position = new THREE.Vector3();\n            fitter.target = new THREE.Vector3();\n            fitter.center = new THREE.Vector3();\n            fitter.size = new THREE.Vector3();\n            fitter.box = new THREE.Box3();\n            fitter.boxhelper = new THREE.Box3Helper(fitter.box, 0xff0000);\n\n            fitter.rotate = false;\n\n            fitter.target = new THREE.Vector3(0, 0, 0);\n            fitter.distance = 22;\n            fitter.angle = 0;\n\n            fitter.endTarget = new THREE.Vector3(0, 0, 0);\n            fitter.position = new THREE.Vector3(0, 0, 0);\n            fitter.distanceMin = 10;\n            fitter.distanceMax = 34;\n            fitter.rotationAngle = 1;\n            fitter.dragAngle = 0;\n            fitter.zoom = 1; // eliminabili ??\n            fitter.pow = 0; // eliminabili ??\n            /*\n            if (combiner.selected.item.type === APP.Parts.typeEnum.BladePlug) {\n                fitter.pow = 1;\n            } else {\n                fitter.pow = 0;\n            }\n            */\n            if (DEBUG) {\n                fitter.scene.add(fitter.boxhelper);\n            }\n        }\n\n        Fitter.prototype = {\n            fit: fit,\n            toScreen: toScreen,\n            toWorld: toWorld,\n            update: update,\n        };\n\n        function fit(combiner, offset, up) {\n            if (!offset) {\n                offset = 1.3;\n            }\n            if (!up) {\n                up = new THREE.Vector3(0, 1, 0);\n            }\n            var fitter = this,\n                projector = fitter.projector,\n                box = fitter.box,\n                size = fitter.size,\n                center = fitter.center,\n                camera = fitter.camera,\n                controls = fitter.controls,\n                dummy = fitter.dummy;\n            var object = combiner.selection ? combiner.selection.item.group : combiner.group;\n            box.setFromObject(object);\n            box.getCenter(center);\n            dummy.position.copy(camera.position);\n            dummy.quaternion.copy(camera.quaternion);\n            dummy.up = up;\n            dummy.lookAt(center);\n            dummy.updateProjectionMatrix();\n            var min = fitter.toScreen(box.min);\n            var max = fitter.toScreen(box.max);\n            var sc = fitter.toScreen(center);\n            box.applyMatrix4(dummy.matrixWorldInverse);\n            box.getSize(size);\n            var aspect = size.x / size.y;\n            var dim = (camera.aspect > aspect) ? size.y : size.x;\n            if (camera.aspect < aspect) {\n                dim /= camera.aspect;\n            }\n            dim *= offset;\n            var z = dim / 2 / Math.sin(camera.fov / 2 * RAD);\n            dummy.position.normalize().multiplyScalar(z);\n            fitter.distance = dummy.position.distanceTo(center);\n            // camera.far = distance + dim;\n            dummy.updateProjectionMatrix();\n            var vfrom = camera.position.clone();\n            var vto = dummy.position;\n            var qfrom = camera.quaternion.clone();\n            var qto = dummy.quaternion;\n            var animation = {\n                pow: 0,\n            };\n            TweenLite.to(animation, 0.6, {\n                pow: 1,\n                ease: Power2.easeOut,\n                overwrite: 'all',\n                // ease: Elastic.easeOut,\n                onUpdate: function () {\n                    camera.position.lerpVectors(vfrom, vto, animation.pow);\n                    THREE.Quaternion.slerp(qfrom, qto, camera.quaternion, animation.pow);\n                    camera.updateProjectionMatrix();\n                },\n                onComplete: function () {\n                    if (controls) {\n                        // controls.maxDistance = distance + dim;\n                        controls.target.copy(center);\n                        controls.update();\n                    }\n                }\n            });\n        }\n\n        function toWorld(v) {\n            var fitter = this,\n                projector = fitter.projector,\n                camera = fitter.camera,\n                w = window.innerWidth / 2,\n                h = window.innerHeight / 2;\n            var world = v.clone();\n            world.x = world.x / w - 1;\n            world.y = -world.y / h + 1;\n            projector.unprojectVector(world, camera);\n            return world;\n        }\n\n        function toScreen(v) {\n            var fitter = this,\n                camera = fitter.camera,\n                w = window.innerWidth / 2,\n                h = window.innerHeight / 2;\n            var screen = v.clone();\n            screen.project(camera);\n            screen.x = (screen.x + 1) * w;\n            screen.y = (-screen.y + 1) * h;\n            return screen;\n        }\n\n        function update() {\n            var fitter = this,\n                target = fitter.target,\n                endTarget = fitter.endTarget,\n                position = fitter.position,\n                distance = fitter.distance,\n                zoom = fitter.zoom,\n                dragAngle = fitter.dragAngle,\n                rotationAngle = fitter.rotationAngle,\n                pow = fitter.pow,\n                camera = fitter.camera;\n            if (fitter.rotate) {\n                rotationAngle = fitter.rotationAngle += 0.0002;\n            }\n\n            target.x += (endTarget.x - target.x) / 40;\n            target.y += (endTarget.y - target.y) / 40;\n            target.z += (endTarget.z - target.z) / 40;\n\n            position.x = target.x + distance * zoom * Math.cos(dragAngle + rotationAngle);\n            position.y = target.y + distance * zoom; // * (0.5 + 1.5 * (1 - pow));\n            position.z = target.z + distance * zoom * Math.sin(dragAngle + rotationAngle);\n\n            camera.position.x += (position.x - camera.position.x) / 13;\n            camera.position.y += (position.y - camera.position.y) / 13;\n            camera.position.z += (position.z - camera.position.z) / 13;\n            // camera.up = new THREE.Vector3(0, 0, -1);\n\n            camera.lookAt(target);\n        }\n\n        return Fitter;\n\n    }();\n\n    window.Fitter = Fitter;\n\n    var app = angular.module('app');\n\n    app.factory('Fitter', [function () {\n        return Fitter;\n    }]);\n\n}());\n/* global angular, window, document, console  */\n\n(function () {\n    'use strict';\n\n    var Forge = function () {\n\n        function Forge() {\n            var service = this;\n            service.loader = new THREE.JSONLoader();\n        }\n\n        Forge.prototype = {\n            load: load,\n        };\n\n        var i = 0;\n\n        function load(callback) {\n            var service = this;\n            http({\n                url: i % 2 === 0 ? 'img/Curved Body 2.js' : 'img/Angled Emitter 1.js',\n                onload: function (data) {\n                    data = data.replace(new RegExp('transparency', 'g'), 'opacity');\n                    data = data.replace(new RegExp('.#QNAN0', 'g'), '.0');\n                    var model = service.loader.parse(JSON.parse(data));\n                    callback(model.geometry, model.materials);\n                }\n            });\n            i++;\n        }\n\n        function http(options) {\n            var o = {\n                method: 'GET',\n                responseType: 'text',\n            };\n            if (!options || !options.url || !options.onload) {\n                return;\n            }\n            for (var p in options) {\n                o[p] = options[p];\n            }\n            var req = new XMLHttpRequest();\n            req.open(o.method, o.url, true);\n            req.responseType = o.responseType; // 'blob';\n            req.onload = function () {\n                if (this.status === 200) {\n                    // var blob = this.response;\n                    // var image = URL.createObjectURL(blob); // IE10+\n                    o.onload(this.response);\n                }\n            };\n            if (o.onerror) {\n                req.onerror = o.onerror;\n            }\n            if (o.onprogress) {\n                req.onerror = o.onprogress;\n            }\n            req.send();\n        }\n\n        return Forge;\n\n    }();\n\n    window.Forge = Forge;\n\n    var app = angular.module('app');\n\n    app.factory('Forge', [function () {\n        return Forge;\n    }]);\n\n}());\n/* global angular, window, document, console, TweenLite */\n\n(function () {\n    'use strict';\n\n    var Library = function () {\n\n        var DEBUG = {\n            FINISHES: ['standard', 'black', 'weathered'],\n            randomFinish: function () {\n                // return DEBUG.FINISHES[2];\n                return {\n                    key: DEBUG.FINISHES[Math.floor(Math.random() * DEBUG.FINISHES.length)],\n                    color: null\n                };\n            },\n            randomSecondaryFinish: function () {\n                // return DEBUG.FINISHES[2];\n                return {\n                    key: DEBUG.FINISHES[Math.floor(Math.random() * DEBUG.FINISHES.length)],\n                    color: null\n                };\n            }\n        };\n\n        var BASE = 'img/textures/';\n        var ANISOTROPY = 1;\n        var USE_PHONG = false;\n\n        function Library(renderer) {\n            ANISOTROPY = renderer.capabilities.getMaxAnisotropy();\n            this.replaceShader();\n            var manager = new THREE.LoadingManager();\n            /*\n            manager.onProgress = function (item, loaded, total) {\n                console.log('Library.manager.onProgress', item, loaded, total);\n            };\n            */\n            this.renderer = renderer;\n            this.manager = manager;\n            this.textures = this.getTextures();\n            this.materials = this.getMaterials();\n        }\n\n        // publics\n        Library.prototype = {\n            getMaterials: getMaterials,\n            getTextures: getTextures,\n            getTexture: getTexture,\n            getTextureCube: getTextureCube,\n            getTextureCubeHdr: getTextureCubeHdr,\n            replaceShader: replaceShader,\n            setFinish: setFinish,\n            setNextFloor: setNextFloor,\n            updateMaterials: updateMaterials,\n        };\n\n        // statics\n        Library.hexToRgb = hexToRgb;\n        Library.FLOOR = 0;\n\n        function getMaterials() {\n            var service = this,\n                manager = this.manager,\n                loader = this.loader,\n                textures = this.textures;\n\n            var materials = {\n                left: new THREE.MeshPhongMaterial({\n                    name: 'left',\n                    color: new THREE.Color(0xff0000),\n                    visible: false,\n                }),\n                right: new THREE.MeshPhongMaterial({\n                    name: 'right',\n                    color: new THREE.Color(0x00ff00),\n                    visible: false,\n                }),\n                top: new THREE.MeshPhongMaterial({\n                    name: 'top',\n                    color: new THREE.Color(0x0000ff),\n                    visible: false,\n                }),\n                bottom: new THREE.MeshPhongMaterial({\n                    name: 'bottom',\n                    color: new THREE.Color(0xffff00),\n                    visible: false,\n                }),\n                floor: new THREE.MeshStandardMaterial({\n                    name: 'floor',\n                    color: 0x101010, // 0xaeb7c1, // 0x101010,\n                    roughness: 0.5, // 0.4,\n                    metalness: 0.1, // 0.99,\n                    bumpMap: textures.floor,\n                    bumpScale: 0.05,\n                    envMap: textures.env,\n                }),\n                wrap: new THREE.MeshPhongMaterial({\n                    name: 'wrap',\n                    color: 0x101010,\n                    specular: 0x444444,\n                    shininess: 7,\n                    reflectivity: 0.75,\n                    specularMap: textures.leatherLight,\n                    bumpMap: textures.leatherBump,\n                    bumpScale: 0.15,\n                    // metal: true,\n                }),\n                bronze: new THREE.MeshStandardMaterial({\n                    name: 'bronze',\n                    color: 0xc07f5d,\n                    roughness: 0.5,\n                    roughnessMap: textures.silver,\n                    metalness: 0.9,\n                    metalnessMap: textures.weathered,\n                    envMap: textures.env,\n                    envMapIntensity: 0.15,\n                    // bumpMap: textures.silver,\n                    // bumpScale: 0.003,\n                }),\n                gold: new THREE.MeshStandardMaterial({\n                    name: 'gold',\n                    color: 0xc8ad60,\n                    roughness: 0.5,\n                    roughnessMap: textures.silver,\n                    metalness: 0.9,\n                    metalnessMap: textures.weathered,\n                    envMap: textures.env,\n                    envMapIntensity: 0.15,\n                    // bumpMap: textures.silver,\n                    // bumpScale: 0.003,\n                }),\n                green: new THREE.MeshPhongMaterial({\n                    name: 'green',\n                    color: 0x00aa00,\n                    specular: 0x333333,\n                    specularMap: textures.silver,\n                    shininess: 30,\n                    reflectivity: 0.10,\n                    envMap: textures.env,\n                    // combine: THREE.MixOperation,\n                    bumpMap: textures.silver,\n                    bumpScale: 0.003,\n                    // metal: true,\n                }),\n                red: new THREE.MeshPhongMaterial({\n                    name: 'red',\n                    color: 0xdd0000,\n                    specular: 0x333333,\n                    specularMap: textures.silver,\n                    shininess: 30,\n                    reflectivity: 0.10,\n                    envMap: textures.env,\n                    bumpMap: textures.silver,\n                    bumpScale: 0.003,\n                    // metal: true,\n                }),\n                standard: {\n                    silver: new THREE.MeshStandardMaterial({\n                        name: 'silver',\n                        color: 0x888888,\n                        roughness: 0.4,\n                        // roughnessMap: textures.brushed,\n                        metalness: 0.99,\n                        metalnessMap: textures.brushed,\n                        envMap: textures.env,\n                        envMapIntensity: 1.0,\n                        bumpMap: textures.brushed,\n                        bumpScale: 0.01,\n                    }),\n                    black: new THREE.MeshStandardMaterial({\n                        name: 'black',\n                        color: 0x101010,\n                        roughness: 0.5,\n                        // roughnessMap: textures.sand,\n                        metalness: 0.99,\n                        metalnessMap: textures.sand,\n                        envMap: textures.env,\n                        envMapIntensity: 1.0,\n                        bumpMap: textures.sand,\n                        bumpScale: 0.015,\n                    }),\n                },\n                weathered: {\n                    silver: getWeatheredNode('silver', textures),\n                    black: getWeatheredNode('black', textures),\n                    _silver: new THREE.MeshStandardMaterial({\n                        name: 'silver',\n                        color: 0x555555,\n                        map: textures.brushed,\n                        roughness: 0.6,\n                        roughnessMap: textures.weatheredInverted,\n                        metalness: 0.99,\n                        // metalnessMap: textures.weathered,\n                        envMap: textures.env,\n                        envMapIntensity: 1.0,\n                        // bumpMap: textures.sand,\n                        // bumpScale: 0.01,\n                    }),\n                    _black: new THREE.MeshStandardMaterial({\n                        name: 'black',\n                        color: 0x444444,\n                        map: textures.brushed,\n                        roughness: 0.6,\n                        roughnessMap: textures.weatheredInverted,\n                        metalness: 0.99,\n                        // metalnessMap: textures.weathered,\n                        envMap: textures.env,\n                        envMapIntensity: 1.0,\n                        // bumpMap: textures.sand,\n                        // bumpScale: 0.01,\n                    }),\n                },\n                black: {\n                    silver: new THREE.MeshStandardMaterial({\n                        name: 'silver',\n                        color: 0x131313,\n                        roughness: 0.5,\n                        // roughnessMap: textures.sand,\n                        metalness: 0.99,\n                        metalnessMap: textures.sand,\n                        envMap: textures.env,\n                        envMapIntensity: 1.0,\n                        bumpMap: textures.sand,\n                        bumpScale: 0.015,\n                    }),\n                    black: new THREE.MeshStandardMaterial({\n                        name: 'black',\n                        color: 0x101010,\n                        roughness: 0.5,\n                        // roughnessMap: textures.sand,\n                        metalness: 0.99,\n                        metalnessMap: textures.sand,\n                        envMap: textures.env,\n                        envMapIntensity: 1.0,\n                        bumpMap: textures.sand,\n                        bumpScale: 0.015,\n                    }),\n                },\n                light: {\n                    off: new THREE.MeshPhongMaterial({\n                        name: 'light',\n                        opacity: 0.98,\n                        transparent: true,\n                        color: 0x444444,\n                        specular: 0x888888,\n                        shininess: 20,\n                        reflectivity: 0.3\n                    }),\n                    on6: new THREE.MeshPhongMaterial({\n                        name: 'light',\n                        opacity: 0.98,\n                        transparent: true,\n                        color: 0x444444,\n                        emissive: 0x444444,\n                        specular: 0x888888,\n                        shininess: 20,\n                        reflectivity: 0.3\n                    }),\n                    on12: new THREE.MeshPhongMaterial({\n                        name: 'light',\n                        color: 0xffffff,\n                        emissive: 0x888888,\n                        specular: 0xffffff,\n                        shininess: 100,\n                        reflectivity: 0.3\n                    }),\n                },\n                glare: {\n                    off: new THREE.MeshLambertMaterial({\n                        name: 'glare',\n                        opacity: 0,\n                        transparent: true,\n                        color: 0x000000,\n                    }),\n                    on6: new THREE.MeshLambertMaterial({\n                        name: 'glare',\n                        opacity: 0.6,\n                        transparent: true,\n                        color: 0xecf4fb,\n                        map: textures.glare,\n                        blending: THREE.AdditiveBlending,\n                        specular: 0x000000,\n                        shininess: 0,\n                        combine: THREE.MixOperation,\n                        reflectivity: 0\n                    }),\n                    on12: new THREE.MeshLambertMaterial({\n                        name: 'glare',\n                        opacity: 0.85,\n                        transparent: true,\n                        color: 0xecf4fb,\n                        map: textures.glare,\n                        blending: THREE.AdditiveBlending,\n                        specular: 0x000000,\n                        shininess: 0,\n                        combine: THREE.MixOperation,\n                        reflectivity: 0\n                    }),\n                },\n                emitterGlare: {\n                    off: new THREE.MeshLambertMaterial({\n                        name: 'glare',\n                        opacity: 0,\n                        transparent: true,\n                        color: 0x000000,\n                    }),\n                    on6: new THREE.MeshLambertMaterial({\n                        name: 'glare',\n                        opacity: 0.6,\n                        transparent: true,\n                        color: 0xecf4fb,\n                        map: textures.emitterGlare,\n                        blending: THREE.AdditiveBlending,\n                        specular: 0x000000,\n                        shininess: 0,\n                        combine: THREE.MixOperation,\n                        reflectivity: 0\n                    }),\n                    on12: new THREE.MeshLambertMaterial({\n                        name: 'glare',\n                        opacity: 0.85,\n                        transparent: true,\n                        color: 0xecf4fb,\n                        map: textures.emitterGlare,\n                        blending: THREE.AdditiveBlending,\n                        specular: 0x000000,\n                        shininess: 100,\n                        combine: THREE.MixOperation,\n                        reflectivity: 0\n                    }),\n                },\n            };\n            return materials;\n        }\n\n        function getTexture(url) {\n            var service = this,\n                manager = this.manager,\n                textures = this.textures;\n            // scope.loader.add('texture-silver');\n            return new THREE.TextureLoader(manager).load(BASE + url,\n                function onLoad(texture) {\n                    // scope.loader.remove('texture-silver');            \n                },\n                function onProgress(loaded, total) {\n\n                },\n                function onError(e) {\n                    // scope.loader.remove('texture-silver');\n                });\n        }\n\n        function getTextureCube(url) {\n            var service = this,\n                manager = this.manager,\n                textures = this.textures;\n            // scope.loader.add('texture-silver');\n            return new THREE.CubeTextureLoader(manager).setPath(BASE + url).load([\n                    'px.jpg', 'nx.jpg', 'py.jpg', 'ny.jpg', 'pz.jpg', 'nz.jpg'\n                ],\n                function onLoad(texture) {\n                    // scope.loader.remove('texture-silver');\n                },\n                function onProgress(loaded, total) {\n\n                },\n                function onError(e) {\n                    // scope.loader.remove('texture-silver');\n                });\n        }\n\n        function getTextureCubeHdr(url, key) {\n            var service = this,\n                renderer = this.renderer,\n                manager = this.manager,\n                textures = this.textures;\n            var urls = [\n                BASE + url + 'px.hdr', BASE + url + 'nx.hdr',\n                BASE + url + 'py.hdr', BASE + url + 'ny.hdr',\n                BASE + url + 'pz.hdr', BASE + url + 'nz.hdr'\n            ];\n            return new THREE.HDRCubeTextureLoader().load(THREE.UnsignedByteType, urls, function (cubemap) {\n                renderer.gammaInput = true; // ???\n                renderer.gammaOutput = true;\n                renderer.toneMapping = THREE.LinearToneMapping;\n                renderer.toneMappingExposure = 1.3;\n                var generator = new THREE.PMREMGenerator(cubemap);\n                generator.update(renderer);\n                var packer = new THREE.PMREMCubeUVPacker(generator.cubeLods);\n                packer.update(renderer);\n                textures[key] = packer.CubeUVRenderTarget;\n                cubemap.dispose();\n                service.materials.weathered.silver.envMap = packer.CubeUVRenderTarget;\n                service.materials.weathered.silver.needsUpdate = true;\n                service.materials.weathered.black.envMap = packer.CubeUVRenderTarget;\n                service.materials.weathered.black.needsUpdate = true;\n                // generator.dispose();\n                // packer.dispose();\n                // scope.loader.remove('texture-silver');\n            });\n        }\n\n        function getTextures() {\n            var service = this,\n                manager = this.manager,\n                textures = {};\n            //\n            textures.env = service.getTextureCube('env/');\n            // textures.env = service.getTextureCubeHdr('env/pisa/', 'env');\n            textures.env.anisotropy = ANISOTROPY;\n            textures.env.format = THREE.RGBFormat;\n            // \n            textures.floor = service.getTexture('floor.jpg');\n            textures.floor.anisotropy = ANISOTROPY;\n            textures.floor.wrapS = THREE.RepeatWrapping;\n            textures.floor.wrapT = THREE.RepeatWrapping;\n            textures.floor.repeat.set(40, 40);\n            //\n            textures.silver = service.getTexture('brushed-light.jpg');\n            textures.silver.anisotropy = ANISOTROPY;\n            // textures.silver.wrapS = THREE.RepeatWrapping;\n            textures.silver.wrapT = THREE.RepeatWrapping;\n            // textures.silver.repeat.set(1, 1);\n            //\n            /*\n            textures.weathered = service.getTexture('brushed-dark.jpg');\n            textures.weathered.anisotropy = ANISOTROPY;\n            // textures.weathered.wrapS = THREE.RepeatWrapping;\n            textures.weathered.wrapT = THREE.RepeatWrapping;\n            // textures.weathered.repeat.set(1, 1);\n            */\n            // \n            // textures.weathered = service.getTexture('brushed-dark.jpg');\n            textures.weathered = service.getTexture('weathered-512-tile.jpg');\n            // textures.weathered = service.getTexture('weathered-tile-sm.jpg');\n            textures.weathered.anisotropy = ANISOTROPY;\n            textures.weathered.wrapS = THREE.RepeatWrapping;\n            textures.weathered.wrapT = THREE.RepeatWrapping;\n            textures.weathered.repeat.set(2, 8);\n            //\n            textures.weatheredInverted = service.getTexture('weathered-512-inverted.jpg');\n            textures.weatheredInverted.anisotropy = ANISOTROPY;\n            textures.weatheredInverted.wrapS = THREE.RepeatWrapping;\n            textures.weatheredInverted.wrapT = THREE.RepeatWrapping;\n            textures.weatheredInverted.repeat.set(2, 8);\n            //\n            textures.sand = service.getTexture('sand.bump.jpg');\n            textures.sand.anisotropy = ANISOTROPY;\n            textures.sand.wrapS = THREE.RepeatWrapping;\n            textures.sand.wrapT = THREE.RepeatWrapping;\n            textures.sand.repeat.set(2, 6);\n            //\n            textures.brushed = service.getTexture('brushed-512-tile.jpg');\n            textures.brushed.anisotropy = ANISOTROPY;\n            textures.brushed.wrapS = THREE.RepeatWrapping;\n            textures.brushed.wrapT = THREE.RepeatWrapping;\n            textures.brushed.repeat.set(2, 2);\n            //\n            textures.bump = service.getTexture('brushed-dark.jpg');\n            textures.bump.anisotropy = ANISOTROPY;\n            textures.bump.wrapS = THREE.RepeatWrapping;\n            textures.bump.wrapT = THREE.RepeatWrapping;\n            textures.bump.repeat.set(5, 5);\n            //\n            textures.glare = service.getTexture('glare.jpg');\n            textures.glare.anisotropy = ANISOTROPY;\n            //\n            textures.emitterGlare = service.getTexture('emitter-glare.jpg');\n            textures.emitterGlare.anisotropy = ANISOTROPY;\n            //\n            textures.leatherBump = service.getTexture('leather-bump.jpg');\n            textures.leatherBump.anisotropy = ANISOTROPY;\n            textures.leatherBump.wrapS = THREE.RepeatWrapping;\n            textures.leatherBump.wrapT = THREE.RepeatWrapping;\n            // textures.leatherBump.repeat.set(1, 1);\n            //\n            textures.leatherLight = service.getTexture('leather-light.jpg');\n            textures.leatherLight.anisotropy = ANISOTROPY;\n            textures.leatherLight.wrapS = THREE.RepeatWrapping;\n            textures.leatherLight.wrapT = THREE.RepeatWrapping;\n            // textures.leatherLight.repeat.set(1, 1);\n            //\n            textures.reptileBump = service.getTexture('reptile-bump.jpg');\n            textures.reptileBump.anisotropy = ANISOTROPY;\n            textures.reptileBump.wrapS = THREE.RepeatWrapping;\n            textures.reptileBump.wrapT = THREE.RepeatWrapping;\n            // textures.reptileBump.repeat.set(1, 1);\n            //\n            textures.reptileLight = service.getTexture('reptile-light.jpg');\n            textures.reptileLight.anisotropy = ANISOTROPY;\n            textures.reptileLight.wrapS = THREE.RepeatWrapping;\n            textures.reptileLight.wrapT = THREE.RepeatWrapping;\n            // textures.reptileLight.repeat.set(1, 1);\n            //\n            textures.stingrayBump = service.getTexture('stingray-bump.jpg');\n            textures.stingrayBump.anisotropy = ANISOTROPY;\n            textures.stingrayBump.wrapS = THREE.RepeatWrapping;\n            textures.stingrayBump.wrapT = THREE.RepeatWrapping;\n            // textures.stingrayBump.repeat.set(1, 1);\n            //\n            textures.stingrayLight = service.getTexture('stingray-light.jpg');\n            textures.stingrayLight.anisotropy = ANISOTROPY;\n            textures.stingrayLight.wrapS = THREE.RepeatWrapping;\n            textures.stingrayLight.wrapT = THREE.RepeatWrapping;\n            // textures.stingrayLight.repeat.set(1, 1);\n            return textures;\n        }\n\n        function replaceShader() {\n            var fragment = THREE.ShaderChunk.meshphong_frag;\n            // console.log('Library.replaceShader THREE.ShaderChunk.meshphong_frag', fragment);\n            var outgoingLightA = \"vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\";\n            var outgoingLightB = \"vec3 outgoingLight = (reflectedLight.directDiffuse + reflectedLight.indirectDiffuse) * specular + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveLight;\";\n            // console.log('MAterials.replacing meshphong_frag', fragment.indexOf(outgoingLightA));\n            THREE.ShaderChunk.meshphong_frag = fragment.replace(outgoingLightA, outgoingLightB);\n        }\n\n        function setFinish(materials, finish) {\n            finish = finish || DEBUG.randomFinish();\n            materials = materials.length ? materials : [materials];\n            console.log('library.setFinish', materials, finish);\n            var library = this;\n            return materials.map(function (material, index) {\n                switch (material.name) {\n                    case 'silver':\n                    case 'black':\n                        material = library.materials[finish.key][material.name];\n                        break;\n                }\n                return material;\n            });\n        }\n\n        function setSecondaryFinish(materials, finish) {\n            finish = finish || DEBUG.randomSecondaryFinish();\n            materials = materials.length ? materials : [materials];\n            console.log('library.setSecondaryFinish', materials, finish);\n            var library = this,\n                textures = this.textures,\n                key, color, map;\n            return materials.map(function (material, index) {\n                switch (material.name) {\n                    case 'wrap':\n                        key = finish.key;\n                        color = finish.color;\n                        material = library.materials.wrap.clone();\n                        if (key.indexOf('Leather') != -1) {\n                            map = 'leather';\n                        } else if (key.indexOf('Reptile') != -1) {\n                            map = 'reptile';\n                        } else if (key.indexOf('Stingray') != -1) {\n                            map = 'stingray';\n                        }\n                        color = Library.hexToRgb(color);\n                        material.color.r = color.r / 255;\n                        material.color.g = color.g / 255;\n                        material.color.b = color.b / 255;\n                        material.specularMap = textures[map + 'Light'];\n                        material.bumpMap = textures[map + 'Bump'];\n                        break;\n                }\n                return material;\n            });\n        }\n\n        function colorTween(from, hex) {\n            var fromColor = new THREE.Color(from.color.getHex());\n            var color = new THREE.Color(hex);\n            TweenLite.to(fromColor, 0.4, {\n                r: color.r,\n                g: color.g,\n                b: color.b,\n                onUpdate: function () {\n                    from.color = fromColor;\n                }\n            });\n        }\n\n        function materialTween(from, to, callback) {\n            var options = {\n                onComplete: function () {\n                    if (typeof callback === 'function') {\n                        callback();\n                    }\n                }\n            };\n            for (var p in to) {\n                if (p === 'color') {\n                    colorTween(from, to[p]);\n                } else {\n                    options[p] = to[p];\n                }\n            }\n            TweenLite.to(from, 0.4, options);\n        }\n\n        function setNextFloor() {\n            var service = this,\n                materials = this.materials,\n                floor = this.materials.floor;\n            Library.FLOOR = (Library.FLOOR + 1) % 4;\n            var to = {};\n            switch (Library.FLOOR) {\n                case 0:\n                    to.color = 0x101010;\n                    to.roughness = 0.5;\n                    to.metalness = 0.1;\n                    to.bumpScale = 0.05;\n                    break;\n                case 1:\n                    to.color = 0xaeb7c1;\n                    to.roughness = 0.5;\n                    to.metalness = 0.1;\n                    to.bumpScale = 0.05;\n                    break;\n                case 2:\n                    to.color = 0x101010;\n                    to.roughness = 0.5;\n                    to.metalness = 0.1;\n                    to.bumpScale = 0.0001;\n                    break;\n                case 3:\n                    to.color = 0xaeb7c1;\n                    to.roughness = 0.5;\n                    to.metalness = 0.1;\n                    to.bumpScale = 0.0001;\n                    break;\n            }\n            console.log('library.setNextFloor', Library.FLOOR);\n            materialTween(floor, to, function () {\n                console.log('materialTween.completed');\n            });\n            // floor.needsUpdate = true;\n        }\n\n        function updateMaterials(materials, finish, secondaryFinish) {\n            finish = finish || DEBUG.randomFinish();\n            var library = this,\n                textures = this.textures,\n                key, color, map;\n            return materials.map(function (material, index) {\n                material.name = material.name.replace('chrome', 'silver');\n                switch (material.name) {\n                    case 'silver':\n                    case 'black':\n                        key = finish.key;\n                        material = library.materials[key][material.name];\n                        break;\n                    case 'wrap':\n                        key = secondaryFinish.key;\n                        color = secondaryFinish.color;\n                        material = library.materials.wrap.clone();\n                        if (key.indexOf('Leather') != -1) {\n                            map = 'leather';\n                        } else if (key.indexOf('Reptile') != -1) {\n                            map = 'reptile';\n                        } else if (key.indexOf('Stingray') != -1) {\n                            map = 'stingray';\n                        }\n                        color = Library.hexToRgb(color);\n                        material.color.r = color.r / 255;\n                        material.color.g = color.g / 255;\n                        material.color.b = color.b / 255;\n                        material.specularMap = textures[map + 'Light'];\n                        material.bumpMap = textures[map + 'Bump'];\n                        break;\n                    case 'bronze':\n                    case 'gold':\n                    case 'red':\n                    case 'green':\n                    case 'left':\n                    case 'right':\n                    case 'top':\n                    case 'bottom':\n                        material = library.materials[material.name];\n                        break;\n                }\n                return material;\n            });\n            /*\n            var finish = part.currentFinish;\n            if (finish && materials[finish.key]) {\n                // console.log(finish.key);\n                replaceMaterial(_materials, 'chrome', materials[finish.key].silver);\n                replaceMaterial(_materials, 'black', materials[finish.key].black);\n            }\n            replaceMaterial(_materials, 'bronze', materials.bronze);\n            replaceMaterial(_materials, 'gold', materials.gold);\n            replaceMaterial(_materials, 'red', materials.red);\n            replaceMaterial(_materials, 'green', materials.green);\n            if (part.hasSecondaryFinishes) {\n                var secondaryFinish = part.currentSecondaryFinish;\n                replaceMaterial(_materials, 'wrap', materials.wrap.clone());\n                onUpdateSecondaryFinish(_materials, secondaryFinish);\n            }\n            part.materials = _materials;\n            if (part.isLedReceiver) {\n                onUpdateLed([part], part.led);\n            }\n            */\n        }\n\n        function updateLedMaterials(receivers, led) {\n            var ledType, ledFinish = null;\n            if (led) {\n                ledType = led.ledType;\n                ledFinish = led.currentFinish;\n            } else {\n                ledType = APP.Parts.ledTypeEnum.OFF;\n            }\n            angular.forEach(receivers, function (part, key) {\n                // console.log('onUpdateLed', part.key, ledType, ledFinish);\n                switch (ledType) {\n                    case APP.Parts.ledTypeEnum.OFF:\n                        replaceMaterial(part.materials, 'light', materials.light.off);\n                        replaceMaterial(part.materials, 'glare', materials.glare.off.clone());\n                        replaceMaterial(part.materials, 'emitterGlare', materials.emitterGlare.off.clone());\n                        // replaceMaterial(part.materials, 'emitter', materials.emitter.off.clone());\n                        break;\n                    case APP.Parts.ledTypeEnum.ON6:\n                        replaceMaterial(part.materials, 'light', materials.light.on6);\n                        replaceMaterial(part.materials, 'glare', materials.glare.on6.clone());\n                        replaceMaterial(part.materials, 'emitterGlare', materials.emitterGlare.on6.clone());\n                        // replaceMaterial(part.materials, 'emitter', materials.emitter.on6.clone());\n                        onUpdateColor(part.materials, ledFinish);\n                        break;\n                    case APP.Parts.ledTypeEnum.ON12:\n                        replaceMaterial(part.materials, 'light', materials.light.on12);\n                        replaceMaterial(part.materials, 'glare', materials.glare.on12.clone());\n                        replaceMaterial(part.materials, 'emitterGlare', materials.emitterGlare.on12.clone());\n                        // replaceMaterial(part.materials, 'emitter', materials.emitter.on12.clone());\n                        onUpdateColor(part.materials, ledFinish);\n                        break;\n                }\n            });\n        }\n\n        function hexToRgb(hex) {\n            var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n            return result ? {\n                r: parseInt(result[1], 16),\n                g: parseInt(result[2], 16),\n                b: parseInt(result[3], 16)\n            } : null;\n        }\n\n        function getWeatheredNode(name, textures) {\n            var material = new THREE.StandardNodeMaterial();\n            // material.color = // albedo (vec3)\n            // material.alpha = // opacity (float)\n            // material.roughness = // roughness (float)\n            // material.metalness = // metalness (float)\n            // material.normal = // normalmap (vec3)\n            // material.normalScale = // normalmap scale (vec2)\n            // material.emissive = // emissive color (vec3)\n            // material.ambient = // ambient color (vec3)\n            // material.shadow = // shadowmap (vec3)\n            // material.light = // custom-light (vec3)\n            // material.ao = // ambient occlusion (float)\n            // material.environment = // reflection/refraction (vec3)\n            // material.transform = // vertex transformation (vec3)\n            var curvature = new THREE.AttributeNode('curvature', 'float');\n            var brushed = new THREE.TextureNode(textures.brushed);\n            var brushedInvert = new THREE.Math1Node(brushed, THREE.Math1Node.INVERT);\n            var brushedInvertDark = new THREE.Math3Node(\n                brushedInvert,\n                new THREE.ColorNode(0x111111),\n                new THREE.FloatNode(0.8),\n                THREE.Math3Node.MUL\n            );\n            var colorA = new THREE.ColorNode(0x111111);\n            var colorB = new THREE.ColorNode(0x666666); // new THREE.TextureNode(textures.brushed);\n            // var colorB = new THREE.ColorNode(0xffffff);\n            var color = new THREE.Math3Node(\n                brushed,\n                brushedInvertDark,\n                curvature,\n                THREE.Math3Node.MIX\n            );\n            material.color = color;\n            //\n            var roughnessA = new THREE.FloatNode(0.6);\n            var roughnessB = new THREE.FloatNode(0.5);\n            var roughness = new THREE.Math3Node(\n                roughnessA,\n                roughnessB,\n                curvature,\n                THREE.Math3Node.MIX\n            );\n            material.roughness = roughness;\n            material.metalness = new THREE.FloatNode(0.8);\n            /*\n            material.normal = new THREE.TextureNode(textures.brushed);\n            material.normalScale = normalMask;\n            */\n            // var roughnessA = new THREE.TextureNode(textures.weatheredInverted);\n            /*\n            var metalnessA = new THREE.FloatNode(0.3);\n            var metalnessB = new THREE.FloatNode(0.5);\n            var metalness = new THREE.Math3Node(\n                metalnessA,\n                metalnessB,\n                curvature,\n                THREE.Math3Node.MIX\n            );\n            material.metalness = metalness;\n            */\n            // var environment = new THREE.CubeTextureNode(textures.env);\n            /*\n            var environment = new THREE.Math3Node(\n                new THREE.ColorNode(0x040404),\n                new THREE.CubeTextureNode(textures.env),\n                curvature,\n                THREE.Math3Node.MIX\n            );\n            material.environment = environment;\n            */\n            /*\n            var environmentAlpha = new THREE.OperatorNode(\n                curvature,\n                new THREE.FloatNode(0.1),\n                THREE.OperatorNode.MUL\n            );\n            material.environmentAlpha = environmentAlpha;\n            */\n            // material.environment = textures.env;\n            /*\n            addGui('color', material.color.value.getHex(), function (val) {\n                material.color.value.setHex(val);\n            }, true);\n            addGui('roughnessA', roughnessA.number, function (val) {\n                roughnessA.number = val;\n            }, false, 0, 1);\n            */\n            material.name = name;\n            material.build();\n            return material;\n        }\n\n        return Library;\n\n    }();\n\n    window.Library = Library;\n\n    var app = angular.module('app');\n\n    app.factory('Library', [function () {\n        return Library;\n    }]);\n\n}());\n/* global angular, window, document, console, TweenLite */\n\n(function () {\n    'use strict';\n\n    var DEBUG = false;\n    var RAD = Math.PI / 180;\n    var I = 0;\n    var MIN = 11;\n\n    function rad(degree) {\n        return degree * RAD;\n    }\n\n    var Orbiter = function () {\n\n        function Orbiter(scene, camera, controls) {\n            var orbiter = this;\n            orbiter.scene = scene;\n            orbiter.camera = camera;\n            orbiter.dummy = camera.clone();\n            orbiter.controls = controls;\n            orbiter.projector = new THREE.Projector();\n            orbiter.center = new THREE.Vector3();\n            orbiter.size = new THREE.Vector3();\n            orbiter.box = new THREE.Box3();\n            orbiter.boxhelper = new THREE.Box3Helper(orbiter.box, 0xff0000);\n\n            orbiter.rotate = true;\n\n            orbiter.target = new THREE.Vector3(0, 0, 0);\n            orbiter.distance = MIN * 2;\n            orbiter.rotationAngle = 1;\n            orbiter.dragAngle = 0;\n            orbiter.zoom = 1; // eliminabili ??\n            orbiter.pow = 0; // eliminabili ??\n\n            orbiter.values = {\n                target: new THREE.Vector3(0, 0, 0),\n                distance: MIN * 2,\n                rotationAngle: 0,\n                dragAngle: 0,\n                zoom: 0,\n                pow: 0,\n            };\n\n            orbiter.distanceMin = MIN;\n            orbiter.distanceMax = MIN * 3;\n            /*\n            if (combiner.selected.item.type === APP.Parts.typeEnum.BladePlug) {\n                orbiter.pow = 1;\n            } else {\n                orbiter.pow = 0;\n            }\n            */\n            orbiter.set(orbiter.camera, orbiter.target);\n            //\n            if (DEBUG) {\n                orbiter.scene.add(orbiter.boxhelper);\n            }\n        }\n\n        Orbiter.prototype = {\n            fit: fit,\n            set: set,\n            toScreen: toScreen,\n            toWorld: toWorld,\n            tween: tween,\n            update: update,\n        };\n\n        function set(camera, target) {\n            var orbiter = this,\n                values = orbiter.values;\n\n            camera.position.x = target.x + values.distance * values.zoom * Math.cos(values.dragAngle + values.rotationAngle);\n            camera.position.y = target.y + values.distance * values.zoom; // * (0.5 + 1.5 * (1 - values.pow));\n            camera.position.z = target.z + values.distance * values.zoom * Math.sin(values.dragAngle + values.rotationAngle);\n            // camera.up = new THREE.Vector3(0, 0, -1);\n            camera.lookAt(target);\n        }\n\n        function fit(combiner, offset, up) {\n            if (!offset) {\n                offset = 1.3;\n            }\n            if (!up) {\n                up = new THREE.Vector3(0, 1, 0);\n            }\n            var orbiter = this,\n                projector = orbiter.projector,\n                box = orbiter.box,\n                size = orbiter.size,\n                center = orbiter.center,\n                camera = orbiter.camera,\n                controls = orbiter.controls,\n                dummy = orbiter.dummy;\n\n            var object = combiner.selection ? combiner.selection.item.group : combiner.group;\n            box.setFromObject(object);\n            box.getCenter(center);\n            box.getSize(size);\n            if (combiner.items.length > 0) {\n                orbiter.set(dummy, center);\n                /*\n                dummy.position.copy(camera.position);\n                dummy.quaternion.copy(camera.quaternion);\n                dummy.up = up;\n                dummy.lookAt(center);\n                */\n                dummy.fov = camera.fov;\n                dummy.aspect = camera.aspect;\n                /*\n                dummy.updateProjectionMatrix();\n                var min = orbiter.toScreen(box.min);\n                var max = orbiter.toScreen(box.max);\n                var sc = orbiter.toScreen(center);\n                */\n                // dummy.matrixWorldNeedsUpdate = true;\n                // dummy.matrixWorldInverse.getInverse(dummy.matrixWorld);\n                size.applyMatrix4(dummy.matrixWorldInverse);\n                var aspect = size.x / size.y;\n                var dim = (camera.aspect > aspect) ? size.y : size.x;\n                if (camera.aspect < aspect) {\n                    dim /= camera.aspect;\n                }\n                dim *= offset;\n                var z = dim / 2 / Math.sin(camera.fov / 2 * RAD);\n                orbiter.distance = z;\n            } else {\n                orbiter.distance = MIN;\n            }\n            orbiter.distanceMin = orbiter.distance * 0.5;\n            orbiter.distanceMax = orbiter.distance * 1.5;\n            //\n            orbiter.target.copy(center);\n        }\n\n        function tween() {\n            var orbiter = this,\n                target = orbiter.target,\n                values = orbiter.values;\n\n            if (orbiter.rotate) {\n                orbiter.rotationAngle += 0.0002;\n            }\n            var friction = 1 / 15;\n            values.target.x += (target.x - values.target.x) * friction;\n            values.target.y += (target.y - values.target.y) * friction;\n            values.target.z += (target.z - values.target.z) * friction;\n            values.distance += (orbiter.distance - values.distance) * friction;\n            values.rotationAngle += (orbiter.rotationAngle - values.rotationAngle) * friction;\n            values.dragAngle += (orbiter.dragAngle - values.dragAngle) * friction;\n            values.zoom += (orbiter.zoom - values.zoom) * friction;\n            values.pow += (orbiter.pow - values.pow) * friction;\n        }\n\n        function update() {\n            var orbiter = this;\n            orbiter.tween();\n            orbiter.set(orbiter.camera, orbiter.values.target);\n        }\n\n        function toWorld(v) {\n            var orbiter = this,\n                projector = orbiter.projector,\n                camera = orbiter.camera,\n                w = window.innerWidth / 2,\n                h = window.innerHeight / 2;\n            var world = v.clone();\n            world.x = world.x / w - 1;\n            world.y = -world.y / h + 1;\n            projector.unprojectVector(world, camera);\n            return world;\n        }\n\n        function toScreen(v) {\n            var orbiter = this,\n                camera = orbiter.camera,\n                w = window.innerWidth / 2,\n                h = window.innerHeight / 2;\n            var screen = v.clone();\n            screen.project(camera);\n            screen.x = (screen.x + 1) * w;\n            screen.y = (-screen.y + 1) * h;\n            return screen;\n        }\n\n        return Orbiter;\n\n    }();\n\n    window.Orbiter = Orbiter;\n\n    var app = angular.module('app');\n\n    app.factory('Orbiter', [function () {\n        return Orbiter;\n    }]);\n\n}());\n/* global angular, window, document, console, TweenLite */\n\n(function () {\n    'use strict';\n\n    function Polyfills() {\n\n        if (!Array.prototype.fill) {\n            Object.defineProperty(Array.prototype, 'fill', {\n                value: function (value) {\n                    if (this === null) {\n                        throw new TypeError('this is null or not defined');\n                    }\n                    var O = Object(this);\n                    var len = O.length >>> 0;\n                    var start = arguments[1];\n                    var relativeStart = start >> 0;\n                    var k = relativeStart < 0 ?\n                        Math.max(len + relativeStart, 0) :\n                        Math.min(relativeStart, len);\n                    var end = arguments[2];\n                    var relativeEnd = end === undefined ?\n                        len : end >> 0;\n                    var final = relativeEnd < 0 ?\n                        Math.max(len + relativeEnd, 0) :\n                        Math.min(relativeEnd, len);\n                    while (k < final) {\n                        O[k] = value;\n                        k++;\n                    }\n                    return O;\n                }\n            });\n        }\n\n    }\n\n    // Polyfills();\n\n    var app = angular.module('app');\n\n    app.service('Polyfills', [Polyfills]);\n\n}());\n/* global angular, window, document, console  */\n\n(function () {\n    'use strict';\n\n    function Prototypes() {\n\n        Element.prototype.hasClass = function (name) {\n            return new RegExp(\"(?:^|\\\\s+)\" + name + \"(?:\\\\s+|$)\").test(this.className);\n        };\n\n        Element.prototype.addClass = function (name) {\n            if (!this.hasClass(name)) {\n                this.className = this.className ? (this.className + ' ' + name) : name;\n            }\n        };\n\n        Element.prototype.removeClass = function (name) {\n            if (this.hasClass(name)) {\n                this.className = this.className.split(name).join('').replace(/\\s\\s+/g, ' '); // .replace(new RegExp('(?:^|\\\\s+)' + name + '(?:\\\\s+|$)', 'g'), '');\n            }\n        };\n\n        Element.prototype.isDescendant = function (target) {\n            function isDescendant(node, target) {\n                if (node === target) {\n                    return true;\n                } else if (node.parentNode) {\n                    return isDescendant(node.parentNode, target);\n                } else {\n                    return false;\n                }\n            }\n            return isDescendant(this, target);\n        };\n\n        Element.prototype.getBounds = function () {\n            var bounds = {\n                x: 0,\n                y: 0,\n                width: this.offsetWidth,\n                height: this.offsetHeight,\n                center: {\n                    x: 0,\n                    y: 0\n                },\n            };\n            bounds.center.x = bounds.width / 2;\n            bounds.center.y = bounds.height / 2;\n            return bounds;\n        };\n\n        window.getTouch = function (e) {\n            var t = new THREE.Vector2();\n            t.t = new THREE.Vector2();\n            t.relativeTo = function (node) {\n                var rect = node.getBoundingClientRect();\n                var scrollX = window.pageXOffset || document.documentElement.scrollLeft;\n                var scrollY = window.pageYOffset || document.documentElement.scrollTop;\n                this.x = ((this.x - rect.left - scrollX) / node.offsetWidth) * 2 - 1;\n                this.y = -((this.y - rect.top - scrollY) / node.offsetHeight) * 2 + 1;\n            };\n            t.pinchSize = function () {\n                return Math.sqrt((this.x - this.t.x) * (this.x - this.t.x) + (this.y - this.t.y) * (this.y - this.t.y));\n            };\n            t.count = 1;\n            /*\n            var t = {\n                x: 0,\n                y: 0,\n                t: {\n                    x: 0,\n                    y: 0,\n                },\n                count: 1,\n                dist: function () {\n                    return Math.sqrt((this.x - this.t.x) * (this.x - this.t.x) + (this.y - this.t.y) * (this.y - this.t.y));\n                }\n            };\n            */\n            if (e.type == 'touchstart' || e.type == 'touchmove' || e.type == 'touchend' || e.type == 'touchcancel') {\n                var touch = null,\n                    second = null;\n                var touches = e.originalEvent ? e.originalEvent.touches || e.originalEvent.changedTouches : e.touches || e.changedTouches;\n                if (touches && touches.length) {\n                    touch = touches[0];\n                    if (touches.length > 1) {\n                        second = touches[1];\n                    }\n                }\n                if (touch) {\n                    t.x = touch.pageX;\n                    t.y = touch.pageY;\n                }\n                if (second) {\n                    t.t.x = second.pageX;\n                    t.t.y = second.pageY;\n                    t.count = 2;\n                }\n            } else if (e.type == 'click' || e.type == 'mousedown' || e.type == 'mouseup' || e.type == 'mousemove' || e.type == 'mouseover' || e.type == 'mouseout' || e.type == 'mouseenter' || e.type == 'mouseleave') {\n                t.x = e.pageX;\n                t.y = e.pageY;\n            }\n            return t;\n        };\n\n    }\n\n    // Prototypes();\n\n    var app = angular.module('app');\n\n    app.service('Prototypes', [Prototypes]);\n\n}());\n/* global angular, window, document, console, TweenLite */\n\n(function () {\n    'use strict';\n\n    function calcNormal(normals, normal, angle) {\n        var allowed = normals.filter(function (n) {\n            return n.angleTo(normal) < angle * THREE.Math.DEG2RAD;\n        });\n        return allowed.reduce(function (a, b) {\n            return a.clone().add(b);\n        }).normalize();\n    }\n\n    function ThreeUtils() {\n\n        THREE.GeometryUtils.computeVertexNormals = function (geometry, angle) {\n            geometry.computeFaceNormals();\n            var vertices = geometry.vertices.map(function () {\n                return [];\n            });\n            geometry.faces.map(function (face) {\n                vertices[face.a].push(face.normal);\n                vertices[face.b].push(face.normal);\n                vertices[face.c].push(face.normal);\n            });\n            geometry.faces.map(function (face) {\n                face.vertexNormals[0] = calcNormal(vertices[face.a], face.normal, angle);\n                face.vertexNormals[1] = calcNormal(vertices[face.b], face.normal, angle);\n                face.vertexNormals[2] = calcNormal(vertices[face.c], face.normal, angle);\n            });\n            if (geometry.faces.length > 0) geometry.normalsNeedUpdate = true;\n        };\n\n        THREE.FaceUtils = {\n            computeCentroid: function (face, vertices) {\n                var centroid = new THREE.Vector3();\n                centroid.add(vertices[face.a]);\n                centroid.add(vertices[face.b]);\n                centroid.add(vertices[face.c]);\n                centroid.divideScalar(3);\n                return centroid;\n            }\n        };\n\n    }\n\n    // ThreeUtils();\n\n    var app = angular.module('app');\n\n    app.service('ThreeUtils', [ThreeUtils]);\n\n}());\n/* global angular, window, document, console, TweenLite, Forge, Combiner, Orbiter, Library */\n\n(function () {\n    \"use strict\";\n\n    var app = angular.module('app');\n\n    app.directive('builder', ['Polyfills', 'Prototypes', 'ThreeUtils', function (Polyfills, Prototypes, ThreeUtils) {\n        return {\n            restrict: 'A',\n            link: function (scope, element, attributes) {\n                console.log('app.builder');\n                var container = element[0]; // document.querySelector('.editor');\n\n                if (!Detector.webgl) {\n                    Detector.addGetWebGLMessage();\n                    return;\n                }\n\n                var w = container.offsetWidth,\n                    h = container.offsetHeight;\n\n                var options = {\n                    down: false,\n                    moved: 0,\n                };\n\n                var raycaster = new THREE.Raycaster();\n\n                var forge = new Forge();\n\n                var renderer = addRenderer();\n\n                var library = new Library(renderer);\n\n                var camera = new THREE.PerspectiveCamera(45, w / h, 1, 50000);\n\n                var scene = new THREE.Scene();\n\n                var lights = addLights(scene);\n\n                var floor = addFloor(scene);\n\n                var combiner = new Combiner(scene);\n\n                var orbiter = new Orbiter(scene, camera);\n\n                var effects = new Effects(scene, camera, renderer, w, h);\n\n                function render() {\n                    combiner.update();\n                    //\n                    var y = combiner.center.y - combiner.size.y / 2 - 3;\n                    floor.position.y += (y - floor.position.y) / 8;\n                    // floor.position.x = combiner.center.x;\n                    // floor.position.z = combiner.center.z;\n                    lights.position.x += (combiner.center.x - lights.position.x) / 8;\n                    lights.position.y += (combiner.center.y - lights.position.y) / 8;\n                    lights.position.z += (combiner.center.z - lights.position.z) / 8;\n                    //\n                    orbiter.update();\n                    effects.update();\n                    // renderer.render(scene, camera);\n                }\n\n                function snapshot() {\n                    if (options.snapshot === true) {\n                        options.snapshot = false;\n                        /*\n                        Snapshot.post(scope.saber.code, renderer.domElement.toDataURL('image/jpeg', 0.95)).then(function (share) {\n                            scope.$root.$broadcast('onSocialPictureReady', share);\n                        });\n                        */\n                    }\n                }\n\n                function animate() {\n                    render();\n                    snapshot();\n                    options.requestId = window.requestAnimationFrame(animate, renderer.domElement);\n                }\n\n                function play() {\n                    if (!options.requestId) {\n                        animate();\n                    }\n                }\n\n                function pause() {\n                    if (options.requestId) {\n                        window.cancelAnimationFrame(options.requestId);\n                        options.requestId = false;\n                    }\n                }\n\n                function addRenderer() {\n                    var renderer = new THREE.WebGLRenderer({\n                        alpha: true,\n                        antialias: true,\n                    });\n                    renderer.setClearColor(0x101010);\n                    renderer.setPixelRatio(window.devicePixelRatio);\n                    renderer.setSize(w, h);\n                    container.appendChild(renderer.domElement);\n                    return renderer;\n                }\n\n                function addLights(scene) {\n                    var lights = new THREE.Group();\n                    lights.name = 'pivot';\n                    lights.rotation.y = Math.PI / 180 * 90;\n                    //\n                    var light = new THREE.AmbientLight(0x444444);\n                    scene.add(light);\n                    // \n                    var light1 = new THREE.DirectionalLight(0xeedddd, 1.0, 2000);\n                    light1.name = 'light1';\n                    light1.position.set(-30, 20, 10);\n                    lights.add(light1);\n                    //\n                    var light2 = new THREE.DirectionalLight(0xddddee, 1.0, 2000);\n                    light2.name = 'light2';\n                    light2.position.set(30, 20, -10);\n                    lights.add(light2);\n                    //\n                    /*\n                    var light = new THREE.PointLight(0xddddee, 1, 2000);\n                    light.position.set(0, 200, 0);\n                    scene.add(light);\n                    */\n                    scene.add(lights);\n                    return lights;\n                }\n\n                function addFloor(scene) {\n                    /*\n                    var radius = 200;\n                    var radials = 16;\n                    var circles = 8;\n                    var divisions = 64;\n                    var floor = new THREE.PolarGridHelper(radius, radials, circles, divisions);\n                    */\n                    // var floor = new THREE.GridHelper(500, 500, 0x888888, 0xAAAAAA);\n                    // floor.rotateOnAxis( new THREE.Vector3( 1, 0, 0 ), 90 * ( Math.PI/180 ));\t\n                    var floor = new THREE.Mesh(new THREE.PlaneBufferGeometry(500, 500), library.materials.floor);\n                    floor.name = 'floor';\n                    floor.rotation.x = -Math.PI / 2;\n                    floor.position.y = -3.5;\n                    floor.visible = true;\n                    scene.add(floor);\n                    return floor;\n                }\n\n                function onAdd() {\n                    if (!combiner.busy()) {\n                        forge.load(function (geometry, materials) {\n                            if (effects) effects.unselect();\n                            materials = library.updateMaterials(materials, null, null); // finish, secondaryFinish\n                            var item = combiner.add(geometry, materials);\n                            orbiter.fit(combiner);\n                            combiner.entering++;\n                            item.enter(function () {\n                                combiner.entering--;\n                            });\n                        });\n                    }\n                }\n\n                function onRemove() {\n                    if (!combiner.busy()) {\n                        combiner.remove();\n                        orbiter.fit(combiner);\n                    }\n                }\n\n                function onFlip() {\n                    combiner.flip(function () {\n                        orbiter.fit(combiner);\n                    });\n                }\n\n                function onFinish() {\n                    combiner.selectedModel(function (model) {\n                        model.material = library.setFinish(model.material, null);\n                    });\n                }\n\n                function onFloor() {\n                    library.setNextFloor();\n                }\n\n                function onResize() {\n                    w = container.offsetWidth;\n                    h = container.offsetHeight;\n                    camera.aspect = w / h;\n                    camera.updateProjectionMatrix();\n                    orbiter.fit(combiner);\n                    renderer.setSize(w, h);\n                    if (effects) effects.resize(w, h);\n                }\n\n                function onDown(e) {\n                    var down = getTouch(e);\n                    down.relativeTo(container);\n                    down.mx = down.x;\n                    down.startDragAngle = orbiter.dragAngle;\n                    down.startDistance = orbiter.distance;\n                    // console.log('down', down);\n                    raycaster.setFromCamera(down, camera);\n                    var selection = combiner.select(raycaster);\n                    // console.log('selection', selection);\n                    if (selection) {\n                        /*\n                        if (controls) {\n                            controls.enabled = false;\n                        }\n                        */\n                        down.index = selection.index;\n                        down.item = selection.item;\n                        down.rotation = selection.rotation;\n                        if (effects) effects.select(down.item.model);\n                    } else {\n                        if (effects) effects.unselect();\n                    }\n                    orbiter.fit(combiner);\n                    options.down = down;\n                    /*\n                    down.index = i;\n                    down.item = value;\n                    down.angle = value.coords.angle;\n                    */\n                }\n\n                function onMove(e) {\n                    options.moved++;\n                    var pow = 1; // 0.001;\n                    if (e.type === 'touchmove') {\n                        e.stopPropagation();\n                        e.preventDefault();\n                        pow *= 4;\n                    }\n                    var down = options.down;\n                    if (down) {\n                        var move = getTouch(e);\n                        move.relativeTo(container);\n                        var diff = move.sub(down);\n                        // console.log(diff.x, diff.y);\n                        if (move.count == 2 && down.count == 2) {\n                            // PINCH                   \n                            orbiter.distance = down.startDistance + (down.pinchSize() - move.pinchSize()) * pow * 10;\n                        } else {\n                            if (combiner.selection && combiner.selection.item === down.item) {\n                                // ROTATE ITEM\n                                // down.item.rotation = down.rotation + (move.y - down.y) * pow * 10;\n                                // var index = down.index;\n                                // down.item.outer.rotation.x = down.rotation.x + diff.y * Math.PI;\n                                combiner.rotate(diff.y * pow * 10);\n                            } else {\n                                // DRAG CAMERA\n                                orbiter.dragAngle = down.startDragAngle + diff.x * pow * 10;\n                                orbiter.distance = down.startDistance + diff.y * pow * -10;\n                                /*\n                                // SOUND\n                                if (combiner.selectedItem && combiner.selectedItem.type == APP.Parts.typeEnum.Sound) {\n                                    if (Math.abs(move.x - down.mx) > w / 3) {\n                                        down.mx = move.x;\n                                        scope.$root.$broadcast('onSoundSwing', scope.saber.sound, Math.abs(move.x - down.mx) / 100);\n                                    }\n                                }\n                                */\n                            }\n                        }\n                        // orbiter.update();\n                        orbiter.distance = Math.min(orbiter.distanceMax, Math.max(orbiter.distanceMin, orbiter.distance));\n                        // scope.$root.$broadcast('onControls');\n                    }\n                }\n\n                function onUp(e) {\n                    var down = options.down;\n                    var moved = options.moved;\n                    if (down && moved < 5) {\n                        if (down.item) {\n                            /*\n                            scope.$apply(function () {\n                                selectedIndex = down.index;\n                                onFocus(down.item);\n                            });\n                            */\n                        } else if (combiner.selectedItem) {\n                            /*\n                            scope.$apply(function () {\n                                onBlur();\n                            });\n                            */\n                        }\n                    }\n                    options.down = null;\n                    options.moved = 0;\n                    /*\n                    if (controls) {\n                        controls.enabled = true;\n                    }\n                    */\n                    removeDragListeners();\n                }\n\n                function onWheel(e) {\n                    e = window.event || e; // old IE support\n                    var bounds = container.getBounds();\n                    if (Math.abs(e.pageX - bounds.center.x) < bounds.width / 3) {\n                        var delta = Math.max(-1, Math.min(1, (e.wheelDelta || -e.detail)));\n                        orbiter.distance += delta;\n                        orbiter.distance = Math.min(orbiter.distanceMax, Math.max(orbiter.distanceMin, orbiter.distance));\n                        orbiter.update();\n                        e.preventDefault();\n                        // scope.$root.$broadcast('onControls');\n                    }\n                }\n\n                function onDoubleClick(e) {\n                    // console.log('onDoubleClick');\n                    var touch = getTouch(e);\n                    raycaster.setFromCamera(touch, camera);\n                    combiner.hitAndFlip(raycaster, function () {\n                        orbiter.fit(combiner);\n                    });\n                }\n\n                function onMouseDown(e) {\n                    onDown(e);\n                    addMouseListeners();\n                }\n\n                function onTouchDown(e) {\n                    onDown(e);\n                    addTouchListeners();\n                    e.stopPropagation();\n                    e.preventDefault();\n                }\n\n                function addMouseListeners() {\n                    window.addEventListener('mousemove', onMove);\n                    window.addEventListener('mouseup', onUp);\n                }\n\n                function addTouchListeners() {\n                    window.addEventListener('touchmove', onMove);\n                    window.addEventListener('touchend', onUp);\n                }\n\n                function removeDragListeners() {\n                    window.removeEventListener('touchmove mousemove', onMove);\n                    window.removeEventListener('touchend mouseup', onUp);\n                }\n\n                function onKeyUp(e) {\n                    // console.log(e);\n                    var selection;\n                    switch (e.keyCode) {\n                        case 38:\n                            // up arrow\n                            break;\n                        case 40:\n                            // down arrow\n                            break;\n                        case 37:\n                            // left arrow\n                            selection = combiner.prev();\n                            if (selection) {\n                                if (effects) effects.select(selection.item.model);\n                            } else {\n                                if (effects) effects.unselect();\n                            }\n                            orbiter.fit(combiner);\n                            break;\n                        case 39:\n                            // right arrow\n                            selection = combiner.next();\n                            if (selection) {\n                                if (effects) effects.select(selection.item.model);\n                            } else {\n                                if (effects) effects.unselect();\n                            }\n                            orbiter.fit(combiner);\n                            break;\n                    }\n                }\n\n                var btnAdd = document.querySelector('.btn-add');\n                var btnRemove = document.querySelector('.btn-remove');\n                var btnFlip = document.querySelector('.btn-flip');\n                var btnFinish = document.querySelector('.btn-finish');\n                var btnFloor = document.querySelector('.btn-floor');\n\n                function addListeners() {\n                    // container.addEventListener('dblclick', onDoubleClick);\n                    container.addEventListener('mousedown', onMouseDown);\n                    container.addEventListener('touchstart', onTouchDown);\n                    container.addEventListener('mousewheel', onWheel);\n                    document.addEventListener('keyup', onKeyUp);\n                    window.addEventListener('resize', onResize, false);\n                    btnAdd.addEventListener('click', onAdd);\n                    btnRemove.addEventListener('click', onRemove);\n                    btnFlip.addEventListener('click', onFlip);\n                    btnFinish.addEventListener('click', onFinish);\n                    btnFloor.addEventListener('click', onFloor);\n                }\n\n                function removeListeners() {\n                    // container.removeEventListener('dblclick', onDoubleClick);\n                    container.removeEventListener('mousedown', onMouseDown);\n                    container.removeEventListener('touchstart', onTouchDown);\n                    container.removeEventListener('mousewheel', onWheel);\n                    document.removeEventListener('keyup', onKeyUp);\n                    window.removeEventListener('resize', onResize);\n                    btnAdd.removeEventListener('click', onAdd);\n                    btnRemove.removeEventListener('click', onRemove);\n                    btnFlip.removeEventListener('click', onFlip);\n                    btnFinish.removeEventListener('click', onFinish);\n                    btnFloor.removeEventListener('click', onFloor);\n                }\n\n                animate();\n                addListeners();\n\n                setTimeout(onAdd, 1000);\n\n                /*\n                scope.$on('onSelectPrev', function ($scope) {\n                });    \n                scope.$on('onSelectNext', function ($scope) {\n                });\n                scope.$on('onUpdateLed', function (scope, receivers, led) {\n                });\n                scope.$on('onFinishChange', function ($scope, part, id) {\n                });\n                scope.$on('onSecondaryFinishChange', function ($scope, part, id) {\n                });\n                scope.$on('onItemChange', function ($scope, part, id) {\n                });\n                scope.$on('onAddPart', function ($scope, part, id, counter) {\n                });\n                scope.$on('onPlayPause', function ($scope, pause) {\n                });\n                scope.$on('onRemovePart', function ($scope, part) {\n                });\n                scope.$on('onFlipPart', function ($scope, part) {\n                });\n                scope.$on('onSwapBackground', function ($scope) {\n                });\n                scope.$on('onRotationToggle', function ($scope) {\n                });\n                scope.$on('onSocialPictureGenerationRequest', function ($scope) {\n                    options.snapshot = true;\n                });\n                scope.$on('$destroy', function () {\n                    removeListeners();\n                });\n                */\n            }\n        };\n    }]);\n\n}());"]}