{"version":3,"sources":["docs/js/app.js"],"names":["Element","prototype","hasClass","name","RegExp","test","this","className","addClass","removeClass","split","join","replace","isDescendant","target","node","parentNode","getBounds","bounds","x","y","width","offsetWidth","height","offsetHeight","center","window","getTouch","e","t","THREE","Vector2","relativeTo","rect","getBoundingClientRect","scrollX","pageXOffset","document","documentElement","scrollLeft","scrollY","pageYOffset","scrollTop","left","top","pinchSize","Math","sqrt","count","type","touch","second","touches","originalEvent","changedTouches","length","pageX","pageY","DEBUG","HELPER","JOINTS","MODELS","ANGLE","FINISH","SCALE","PI","I","flipQuaternion","Quaternion","setFromAxisAngle","Vector3","CombinerItem","item","size","box","Box3","group","Group","outer","inner","enter","callback","position","TweenLite","to","ease","Power2","easeOut","overwrite","onComplete","load","geometry","materials","library","finish","minx","Number","POSITIVE_INFINITY","maxx","NEGATIVE_INFINITY","v","vertices","z","min","max","dx","console","log","names","colors","map","material","index","i","indexOf","MeshStandardMaterial","color","Color","visible","clone","model","Mesh","setFromObject","getSize","joints","getJoints","quaternionL","quaternion","quaternionD","setFromUnitVectors","normal","multiplyScalar","right","quaternionR","multiplyQuaternions","multiply","inverse","positionL","positionR","origin","sub","applyQuaternion","computeVertexNormals","verticesNeedUpdate","uvsNeedUpdate","BoxGeometry","wireframe","transparent","opacity","key","joint","euler","Euler","atan2","rotation","copy","add","helper","MeshBasicMaterial","set","flip","flipped","animation","pow","onUpdate","slerp","lerpVectors","face","ids","filter","faces","String","materialIndex","push","a","b","c","reduce","divideScalar","setFlip","updateMatrixWorld","Combiner","scene","combiner","flags","rotate","flipping","entering","items","hittables","boxhelper","Box3Helper","originhelper","centerhelper","unselect","adjust","combine","fit","busy","setRotationFromQuaternion","getWorldQuaternion","getWorldPosition","getCenter","selection","flipItem","setTimeout","hitAndFlip","raycaster","hitted","intersectObjects","object","pop","parent","remove","splice","select","update","first","Effects","camera","renderer","w","h","renderPass","RenderPass","outlinePass","OutlinePass","visibleEdgeColor","hiddenEdgeColor","edgeStrength","edgeGlow","edgeThickness","pulsePeriod","usePatternTexture","fxaaPass","ShaderPass","FXAAShader","uniforms","resolution","value","renderToScreen","composer","EffectComposer","addPass","render","resize","setSize","selectedObjects","RAD","Fitter","controls","fitter","dummy","projector","Projector","distance","angle","endTarget","distanceMin","distanceMax","rotationAngle","dragAngle","zoom","offset","up","lookAt","updateProjectionMatrix","toScreen","applyMatrix4","matrixWorldInverse","aspect","dim","sin","fov","normalize","distanceTo","vfrom","vto","qfrom","qto","innerWidth","innerHeight","screen","project","toWorld","world","unprojectVector","cos","Forge","loader","JSONLoader","service","options","o","method","responseType","url","onload","p","req","XMLHttpRequest","open","status","response","onerror","onprogress","send","http","data","parse","JSON","Library","BASE","ANISOTROPY","USE_PHONG","capabilities","getMaxAnisotropy","replaceShader","manager","LoadingManager","textures","getTextures","getMaterials","floor","MeshPhongMaterial","bumpMap","bumpScale","specular","reflectivity","shininess","wrap","specularMap","leatherLight","leatherBump","MixOperation","bronze","silver","envMap","env","gold","green","red","standard","black","MultiplyOperation","weathered","roughness","metalness","metalnessMap","roughnessMap","light","off","on6","emissive","on12","glare","MeshLambertMaterial","blending","AdditiveBlending","emitterGlare","envMapIntensity","sand","getTextureCube","anisotropy","format","RGBFormat","getTexture","wrapS","RepeatWrapping","wrapT","repeat","bump","reptileBump","reptileLight","stingrayBump","stingrayLight","TextureLoader","texture","loaded","total","CubeTextureLoader","setPath","getTextureCubeHdr","urls","HDRCubeTextureLoader","UnsignedByteType","cubemap","gammaInput","gammaOutput","toneMapping","LinearToneMapping","toneMappingExposure","generator","PMREMGenerator","packer","PMREMCubeUVPacker","cubeLods","CubeUVRenderTarget","dispose","needsUpdate","fragment","ShaderChunk","meshphong_frag","MIN","Orbiter","orbiter","values","tween","friction","Detector","webgl","btnAdd","querySelector","btnRemove","btnFlip","container","forge","WebGLRenderer","alpha","antialias","appendChild","domElement","down","PerspectiveCamera","Scene","lights","AmbientLight","light1","DirectionalLight","light2","addLights","PlaneBufferGeometry","effects","Raycaster","moved","addEventListener","onDown","onMove","onUp","stopPropagation","preventDefault","event","abs","delta","wheelDelta","detail","onAdd","animate","requestAnimationFrame","addGetWebGLMessage","mx","startDragAngle","startDistance","setFromCamera","move","diff","selectedItem","removeEventListener"],"mappings":"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","file":"app.min.js","sourcesContent":["/* global window, document, console  */\n\n(function () {\n    'use strict';\n\n    Element.prototype.hasClass = function (name) {\n        return new RegExp(\"(?:^|\\\\s+)\" + name + \"(?:\\\\s+|$)\").test(this.className);\n    };\n\n    Element.prototype.addClass = function (name) {\n        if (!this.hasClass(name)) {\n            this.className = this.className ? (this.className + ' ' + name) : name;\n        }\n    };\n\n    Element.prototype.removeClass = function (name) {\n        if (this.hasClass(name)) {\n            this.className = this.className.split(name).join('').replace(/\\s\\s+/g, ' '); // .replace(new RegExp('(?:^|\\\\s+)' + name + '(?:\\\\s+|$)', 'g'), '');\n        }\n    };\n\n    Element.prototype.isDescendant = function (target) {\n        function isDescendant(node, target) {\n            if (node === target) {\n                return true;\n            } else if (node.parentNode) {\n                return isDescendant(node.parentNode, target);\n            } else {\n                return false;\n            }\n        }\n        return isDescendant(this, target);\n    };\n\n    Element.prototype.getBounds = function () {\n        var bounds = {\n            x: 0,\n            y: 0,\n            width: this.offsetWidth,\n            height: this.offsetHeight,\n            center: {\n                x: 0,\n                y: 0\n            },\n        };\n        bounds.center.x = bounds.width / 2;\n        bounds.center.y = bounds.height / 2;\n        return bounds;\n    };\n\n    window.getTouch = function (e) {\n        var t = new THREE.Vector2();\n        t.t = new THREE.Vector2();\n        t.relativeTo = function (node) {\n            var rect = node.getBoundingClientRect();\n            var scrollX = window.pageXOffset || document.documentElement.scrollLeft;\n            var scrollY = window.pageYOffset || document.documentElement.scrollTop;\n            this.x = ((this.x - rect.left - scrollX) / node.offsetWidth) * 2 - 1;\n            this.y = -((this.y - rect.top - scrollY) / node.offsetHeight) * 2 + 1;\n        };\n        t.pinchSize = function () {\n            return Math.sqrt((this.x - this.t.x) * (this.x - this.t.x) + (this.y - this.t.y) * (this.y - this.t.y));\n        };\n        t.count = 1;\n        /*\n        var t = {\n            x: 0,\n            y: 0,\n            t: {\n                x: 0,\n                y: 0,\n            },\n            count: 1,\n            dist: function () {\n                return Math.sqrt((this.x - this.t.x) * (this.x - this.t.x) + (this.y - this.t.y) * (this.y - this.t.y));\n            }\n        };\n        */\n        if (e.type == 'touchstart' || e.type == 'touchmove' || e.type == 'touchend' || e.type == 'touchcancel') {\n            var touch = null,\n                second = null;\n            var touches = e.originalEvent ? e.originalEvent.touches || e.originalEvent.changedTouches : e.touches || e.changedTouches;\n            if (touches && touches.length) {\n                touch = touches[0];\n                if (touches.length > 1) {\n                    second = touches[1];\n                }\n            }\n            if (touch) {\n                t.x = touch.pageX;\n                t.y = touch.pageY;\n            }\n            if (second) {\n                t.t.x = second.pageX;\n                t.t.y = second.pageY;\n                t.count = 2;\n            }\n        } else if (e.type == 'click' || e.type == 'mousedown' || e.type == 'mouseup' || e.type == 'mousemove' || e.type == 'mouseover' || e.type == 'mouseout' || e.type == 'mouseenter' || e.type == 'mouseleave') {\n            t.x = e.pageX;\n            t.y = e.pageY;\n        }\n        return t;\n    };\n\n}());\n/* global window, document, console, TweenLite */\n\n(function () {\n    'use strict';\n\n    var DEBUG = {\n        HELPER: false,\n        JOINTS: false,\n        MODELS: true,\n        ANGLE: false,\n        FINISH: 'standard', // 'black', // 'weathered',\n    };\n\n    var RAD = Math.PI / 180;\n    var SCALE = 0.025;\n    var I = 0;\n\n    function rad(degree) {\n        return degree * RAD;\n    }\n\n    var flipQuaternion = new THREE.Quaternion();\n    flipQuaternion.setFromAxisAngle(new THREE.Vector3(0, 1, 0), Math.PI);\n\n    var CombinerItem = function () {\n\n        function CombinerItem() {\n            var item = this;\n            item.size = new THREE.Vector3();\n            item.box = new THREE.Box3();\n            item.group = new THREE.Group();\n            item.outer = new THREE.Group();\n            item.inner = new THREE.Group();\n        }\n\n        CombinerItem.prototype = {\n            enter: enter,\n            load: load,\n            flip: flip,\n            getJoints: getJoints,\n            setFlip: setFlip,\n        };\n\n        function enter(callback) {\n            var item = this;\n            item.outer.position.x = item.size.x;\n            TweenLite.to(item.outer.position, 0.6, {\n                x: 0,\n                ease: Power2.easeOut,\n                overwrite: 'all',\n                // ease: Elastic.easeOut, \n                onComplete: function () {\n                    if (typeof callback === 'function') {\n                        callback();\n                    }\n                }\n            });\n        }\n\n        function getCentroid(vertices) {\n            var center = vertices.reduce(function (a, b) {\n                return {\n                    x: a.x + b.x,\n                    y: a.y + b.y,\n                    z: a.z + b.z\n                };\n            });\n            return new THREE.Vector3().add(center).divideScalar(vertices.length);\n        }\n\n        function getMaterials(materials, library, finish) {\n            var names = ['left', 'right', 'top', 'bottom'],\n                colors = [0xff0000, 0x00ff00, 0x0000ff, 0xffff00],\n                index, finish = finish || DEBUG.FINISH;\n            return materials.map(function (material, index) {\n                var i = names.indexOf(material.name);\n                if (i !== -1) {\n                    return new THREE.MeshStandardMaterial({\n                        name: material.name,\n                        color: new THREE.Color(colors[i]),\n                        visible: false,\n                    });\n                } else {\n                    material.name = material.name.replace('chrome', 'silver');\n                    // console.log(material.name);\n                    return library.materials[finish][material.name].clone();\n                }\n            });\n        }\n\n        function getJoints(geometry, materials, size) {\n            var joints = {},\n                ids = {},\n                /*\n                diffs = [\n                    new THREE.Vector3(-size.x / 2, 0, 0), // left\n                    new THREE.Vector3(size.x / 2, 0, 0), // right\n                    new THREE.Vector3(0, -size.y / 2, 0), // top\n                    new THREE.Vector3(0, size.y / 2, 0), // bottom\n                ],\n                */\n                names = ['left', 'right', 'top', 'bottom'],\n                colors = [0xff0000, 0x00ff00, 0x0000ff, 0xffff00],\n                index, joint, face;\n            materials.filter(function (material, index) {\n                // console.log(material);\n                var i = names.indexOf(material.name);\n                if (i !== -1) {\n                    var joint = new THREE.Group();\n                    // joint.diff = diffs[i];\n                    joint.name = names[i];\n                    joint.color = colors[i];\n                    joint.vertices = [];\n                    joints[material.name] = joint;\n                    ids[index] = joint;\n                }\n            });\n            for (var i = 0; i < geometry.faces.length; i++) {\n                face = geometry.faces[i];\n                joint = ids[String(face.materialIndex)];\n                if (joint) {\n                    joint.normal = joint.normal || face.normal; // assume all faces point toward direction;\n                    joint.vertices.push(geometry.vertices[face.a]);\n                    joint.vertices.push(geometry.vertices[face.b]);\n                    joint.vertices.push(geometry.vertices[face.c]);\n                    // console.log(joint.name, joint.normal);\n                }\n            }\n            for (var key in joints) {\n                joint = joints[key];\n                joint.position.copy(getCentroid(joint.vertices));\n                joint.origin = joint.position.clone();\n                // joint.diff.sub(joint.position);\n                joint.vertices = null;\n            }\n            if (!joints.left) {\n                joints.left = new THREE.Group();\n                joints.left.position.set(-size.x / 2, 0, 0);\n                joints.left.origin = joints.left.position.clone();\n                joints.left.normal = new THREE.Vector3(-1, 0, 0);\n                joints.left.c = colors[0];\n            }\n            if (!joints.right) {\n                joints.right = new THREE.Group();\n                joints.right.position.set(size.x / 2, 0, 0);\n                joints.right.origin = joints.right.position.clone();\n                joints.right.normal = new THREE.Vector3(1, 0, 0);\n                joints.right.c = colors[1];\n            }\n            if (DEBUG.ANGLE) {\n                joints.right.normal.y += 0.2;\n            }\n            // console.log('item.getJoints', joints, size);\n            return joints;\n        }\n\n        function load(geometry, materials, library, finish) {\n            var item = this,\n                box = item.box,\n                size = item.size,\n                group = item.group,\n                outer = item.outer,\n                inner = item.inner;\n            var minx = Number.POSITIVE_INFINITY,\n                maxx = Number.NEGATIVE_INFINITY;\n            for (var v = 0; v < geometry.vertices.length; v++) {\n                geometry.vertices[v].x *= SCALE;\n                geometry.vertices[v].y *= SCALE;\n                geometry.vertices[v].z *= SCALE;\n                minx = Math.min(minx, geometry.vertices[v].x);\n                maxx = Math.max(maxx, geometry.vertices[v].x);\n            }\n            var dx = (maxx + minx) / 2;\n            inner.position.x = dx;\n            console.log(minx, maxx, dx);\n            materials = getMaterials(materials, library, finish);\n            var model = new THREE.Mesh(geometry, materials);\n            box.setFromObject(model);\n            box.getSize(size);\n            var joints = item.getJoints(geometry, materials, size);\n            item.quaternionL = model.quaternion.clone();\n            var quaternionD = new THREE.Quaternion().setFromUnitVectors(joints.left.normal.clone().multiplyScalar(-1), joints.right.normal);\n            item.quaternionR = new THREE.Quaternion().multiplyQuaternions(item.quaternionL, flipQuaternion).multiply(quaternionD.inverse());\n            item.positionL = new THREE.Vector3();\n            item.positionR = joints.left.origin.clone().sub(joints.right.origin.clone().applyQuaternion(item.quaternionR));\n            model.geometry.computeVertexNormals();\n            model.geometry.verticesNeedUpdate = true;\n            model.geometry.uvsNeedUpdate = true;\n            // model.geometry.mergeVertices();\n            // model.geometry.computeFaceNormals();\n            // model.geometry.normalsNeedUpdate = true;\n            // model.geometry.uvsNeedUpdate = true;\n            // model.geometry.computeMorphNormals();\n            /*           \n            model.geometry.computeFaceNormals();\n            model.geometry.computeVertexNormals();\n            model.geometry.computeBoundingBox();\n            */\n            // console.log(model);\n            if (DEBUG.MODELS) {\n                // geometry = new THREE.CylinderGeometry(2, 2, 10, 10);            \n                materials[1].color = new THREE.Color(0x000000);\n                geometry = new THREE.BoxGeometry(size.x, size.y, size.z);\n                var material = new THREE.MeshStandardMaterial({\n                    color: new THREE.Color(0.2 * ++I, 0, 0),\n                    wireframe: false,\n                    transparent: false,\n                    opacity: 1.0,\n                });\n                model = new THREE.Mesh(geometry, material);\n            }\n            for (var key in joints) {\n                var joint = joints[key];\n                var x = joint.normal.x,\n                    y = joint.normal.y,\n                    z = -joint.normal.z;\n                var euler = new THREE.Euler(\n                    0,\n                    Math.atan2(z, x),\n                    Math.atan2(y, Math.sqrt(x * x + z * z))\n                );\n                joint.rotation.copy(euler);\n                model.add(joint);\n                // joint.oquaternion = new THREE.Quaternion().multiplyQuaternions(joint.quaternion, flipQuaternion);\n                if (DEBUG.JOINTS) {\n                    var helper = new THREE.Mesh(\n                        new THREE.BoxGeometry(0.1, 0.1, 0.1),\n                        new THREE.MeshBasicMaterial({\n                            color: joint.color,\n                        })\n                    );\n                    joint.add(helper);\n                    /*\n                    var s = size.x / 10;\n                    var arrow = new THREE.ArrowHelper(new THREE.Vector3(1, 0, 0), new THREE.Vector3(), s, joint.color, s / 2, s / 2);\n                    joint.add(arrow);\n                    */\n                }\n            }\n            inner.position.set(size.x / 2 - dx, 0, 0);\n            inner.add(model);\n            outer.add(inner);\n            group.add(outer);\n            item.joints = joints;\n            item.model = model;\n        }\n\n        function setFlip() {\n            var item = this,\n                model = item.model;\n            // THREE.Quaternion.slerp(item.quaternionL, item.quaternionR, item.model.quaternion, item.flipped ? 1 : 0);\n            model.quaternion.copy(item.flipped ? item.quaternionR : item.quaternionL);\n            model.position.copy(item.flipped ? item.positionR : item.positionL);\n            item.group.updateMatrixWorld();\n            /*\n            var position = new THREE.Vector3();\n            if (item.flipped) {\n                // model.quaternion.copy(item.joints.right.quaternion.conjugate());\n                // item.joints.right.localToWorld(position);\n                // item.pivot.worldToLocal(position);\n                // item.model.setRotationFromQuaternion(item.joints.right.quaternion.conjugate());\n                // item.model.position.set(0, 0, 0).sub(item.joints.right.origin);\n                // position.x -= item.size.x / 2;\n                // item.model.quaternion.setFromUnitVectors(item.joints.left.normal, item.joints.right.normal);\n            } else {\n                // model.quaternion.copy(item.joints.left.quaternion.conjugate());\n                // item.joints.left.localToWorld(position);\n                // item.pivot.worldToLocal(position);\n                // item.model.setRotationFromQuaternion(item.joints.left.quaternion.conjugate());\n                // item.model.position.set(0, 0, 0).sub(item.joints.left.origin);\n                // position.x += item.size.x / 2;\n                // item.model.setRotationFromQuaternion(new THREE.Quaternion());\n            }\n            item.model.updateMatrixWorld();\n            // console.log('setFlip', item.flipped, item.joints.left.quaternion);\n            */\n        }\n\n        function flip(callback) {\n            var item = this,\n                inner = item.inner;\n            // console.log('flip()');\n            item.flipped = !item.flipped;\n            var animation = {\n                pow: item.flipped ? 0 : 1\n            };\n            TweenLite.to(animation, 0.3, {\n                pow: item.flipped ? 1 : 0,\n                ease: Power2.easeOut,\n                overwrite: 'all',\n                // ease: Elastic.easeOut,\n                onUpdate: function () {\n                    THREE.Quaternion.slerp(item.quaternionL, item.quaternionR, item.model.quaternion, animation.pow);\n                    item.model.position.lerpVectors(item.positionL, item.positionR, animation.pow);\n                },\n                onComplete: function () {\n                    // console.log('flipped');\n                    // item.setFlip();\n                    if (typeof callback === 'function') {\n                        callback();\n                    }\n                },\n            });\n            /*\n            TweenLite.to(inner.rotation, 0.3, {\n                y: item.flipped ? Math.PI : 0,\n                ease: Power2.easeOut,\n                overwrite: 'all',\n                // ease: Elastic.easeOut,\n                // onUpdate: function() { },\n                onComplete: function () {\n                    // console.log('flipped');\n                    item.setFlip();\n                    if (typeof callback === 'function') {\n                        callback();\n                    }\n                },\n            });\n            */\n        }\n\n        return CombinerItem;\n\n    }();\n\n    var Combiner = function () {\n\n        function Combiner(scene, library) {\n            var combiner = this;\n            combiner.flags = {\n                rotate: false,\n            };\n            combiner.scene = scene;\n            combiner.library = library;\n            combiner.flipping = 0;\n            combiner.entering = 0;\n            combiner.items = [];\n            combiner.hittables = [];\n            combiner.center = new THREE.Vector3();\n            combiner.size = new THREE.Vector3();\n            combiner.group = new THREE.Group();\n            combiner.box = new THREE.Box3();\n            if (DEBUG.HELPER) {\n                combiner.boxhelper = new THREE.Box3Helper(combiner.box, 0xff00ff);\n                combiner.originhelper = new THREE.Mesh(\n                    new THREE.BoxGeometry(0.1, 0.1, 0.1),\n                    new THREE.MeshBasicMaterial({\n                        color: 0xaa00ff\n                    })\n                );\n                combiner.centerhelper = new THREE.Mesh(\n                    new THREE.BoxGeometry(0.1, 0.1, 0.1),\n                    new THREE.MeshBasicMaterial({\n                        color: 0xff00ff\n                    })\n                );\n                combiner.group.add(combiner.originhelper);\n                scene.add(combiner.boxhelper);\n                scene.add(combiner.centerhelper);\n            }\n            scene.add(combiner.group);\n        }\n\n        Combiner.prototype = {\n            add: add,\n            adjust: adjust,\n            busy: busy,\n            combine: combine,\n            fit: fit,\n            flip: flip,\n            flipItem: flipItem,\n            hitAndFlip: hitAndFlip,\n            pop: pop,\n            remove: remove,\n            rotate: rotate,\n            select: select,\n            unselect: unselect,\n            update: update,\n        };\n\n        function add(geometry, materials, library, finish) {\n            var combiner = this,\n                library = combiner.library,\n                box = combiner.box,\n                size = combiner.size,\n                items = combiner.items,\n                hittables = combiner.hittables,\n                group = combiner.group;\n\n            combiner.unselect();\n            var item = new CombinerItem();\n            item.load(geometry, materials, library, finish);\n            items.push(item);\n            combiner.hittables = items.map(function (item) {\n                return item.model;\n            });\n            group.add(item.group);\n            item.setFlip();\n            combiner.adjust();\n            return item;\n        }\n\n        function adjust() {\n            var combiner = this;\n            combiner.combine();\n            combiner.fit();\n            // combiner.fitCamera();\n        }\n\n        function busy() {\n            var combiner = this;\n            return combiner.entering || combiner.flipping;\n        }\n\n        function combine() {\n            var combiner = this,\n                items = combiner.items,\n                group = combiner.group;\n            // var quaternionL = new THREE.Quaternion();\n            var quaternionR = new THREE.Quaternion();\n            var positionL = new THREE.Vector3();\n            var positionR = new THREE.Vector3();\n            var left, right;\n            // var groupPosition = new THREE.Vector3();\n            // var lquaternion;\n\n            function combineItem(item, i) {\n                if (item.flipped) {\n                    // lquaternion = item.joints.right.quaternion;\n                    left = item.joints.right;\n                    right = item.joints.left;\n                } else {\n                    // lquaternion = item.joints.left.oquaternion;\n                    left = item.joints.left;\n                    right = item.joints.right;\n                }\n                if (i > 0) {\n                    //\n                    item.group.setRotationFromQuaternion(quaternionR);\n                    item.group.position.copy(positionR);\n                    //\n                    // positionL = left.position.clone();\n                    // item.model.localToWorld(positionL);\n                    // \n                    if (false) {\n                        left.getWorldPosition(positionL);\n                        item.group.worldToLocal(positionL);\n                        item.group.position.sub(positionL);\n                    }\n                    //\n                    // console.log('left.position', positionL);\n                    // item.group.position.set(0, 0, 0);\n                    // left.getWorldQuaternion(quaternionL);\n                    /*\n                    positionR.sub(groupPosition);\n                    item.group.position.copy(positionR);\n                    // item.group.setRotationFromQuaternion(quaternionR.multiply(lquaternion));\n                    item.group.setRotationFromQuaternion(quaternionR);\n                    */\n                }\n                //} else {\n                //    item.group.rotation.z = rad(30);\n                //}\n                // console.log(left.origin);\n                // right.updateMatrixWorld();\n                right.getWorldQuaternion(quaternionR);\n                right.getWorldPosition(positionR);\n            }\n            if (items.length) {\n                // group.getWorldPosition(groupPosition);\n                items.filter(combineItem);\n            }\n        }\n\n        function fit() {\n            var combiner = this,\n                box = combiner.box,\n                size = combiner.size,\n                center = combiner.center,\n                centerhelper = combiner.centerhelper,\n                group = combiner.group;\n            box.setFromObject(group);\n            box.getCenter(center);\n            box.getSize(size);\n            if (DEBUG.HELPER) {\n                centerhelper.position.copy(center);\n            }\n            /*\n            group.worldToLocal(center);\n            group.position.x = -center.x;\n            group.position.y = -center.y;\n            group.position.z = -center.z;\n            */\n            return size;\n        }\n\n        function flip(callback) {\n            var combiner = this,\n                items = combiner.items,\n                hittables = combiner.hittables;\n            if (combiner.selection) {\n                combiner.flipItem(combiner.selection.item, callback);\n            }\n        }\n\n        function flipItem(item, callback) {\n            var combiner = this;\n            combiner.flipping++;\n            item.flip(function () {\n                combiner.flipping--;\n                combiner.adjust();\n                // combiner.unselect(); ???\n                if (typeof (callback) === 'function') {\n                    setTimeout(function () {\n                        callback();\n                    }, 100);\n                }\n            });\n        }\n\n        function hitAndFlip(raycaster, callback) {\n            var combiner = this,\n                items = combiner.items,\n                hittables = combiner.hittables;\n            var hitted = raycaster.intersectObjects(hittables);\n            if (hitted.length) {\n                var index = hittables.indexOf(hitted[0].object);\n                var item = items[index];\n                combiner.flipItem(item, callback);\n            }\n        }\n\n        function pop() {\n            var combiner = this,\n                items = combiner.items,\n                hittables = combiner.hittables,\n                group = combiner.group;\n            if (items.length) {\n                var item = items.pop();\n                if (item.group.parent) {\n                    group.remove(item.group);\n                }\n                combiner.hittables = items.map(function (item) {\n                    return item.model;\n                });\n                combiner.adjust();\n                return item;\n            }\n        }\n\n        function remove() {\n            var combiner = this,\n                items = combiner.items,\n                hittables = combiner.hittables,\n                group = combiner.group;\n            if (combiner.selection) {\n                var selection = combiner.selection;\n                var item = selection.item;\n                items.splice(selection.index, 1);\n                if (item.group.parent) {\n                    group.remove(item.group);\n                }\n                combiner.hittables = items.map(function (item) {\n                    return item.model;\n                });\n                combiner.unselect();\n                combiner.adjust();\n                if (items.length > selection.index) {\n                    combiner.entering++;\n                    items[selection.index].enter(function () {\n                        combiner.entering--;\n                    });\n                }\n                return item;\n            } else {\n                return combiner.pop();\n            }\n        }\n\n        function rotate(y) {\n            var combiner = this;\n            combiner.selection.item.outer.rotation.x = combiner.selection.rotation.x + y;\n            combiner.selection.item.group.updateMatrixWorld();\n            combiner.adjust();\n        }\n\n        function select(raycaster) {\n            var combiner = this,\n                items = combiner.items,\n                hittables = combiner.hittables;\n\n            combiner.unselect();\n            var hitted = raycaster.intersectObjects(hittables);\n            var selection = null;\n            if (hitted.length) {\n                var index = hittables.indexOf(hitted[0].object);\n                var item = items[index];\n                var rotation = item.outer.rotation.clone();\n                /*\n                item.outline(true, combiner.library);\n                // item.model.material.emissive = new THREE.Color(0x888888);\n                */\n                // item.model.material.needsUpdate = true;\n                selection = {\n                    index: index,\n                    item: item,\n                    rotation: rotation,\n                };\n                combiner.selection = selection;\n            }\n            return selection;\n        }\n\n        function unselect() {\n            var combiner = this;\n            if (combiner.selection) {\n                /*\n                combiner.selection.item.outline(false, combiner.library);\n                // combiner.selection.item.model.material.emissive = new THREE.Color(0x000000);\n                */\n                // combiner.selection.item.model.material.needsUpdate = true;\n                combiner.selection = null;\n            }\n        }\n\n        function update() {\n            var combiner = this,\n                flags = combiner.flags;\n            if (!combiner.busy()) {\n                if (flags.rotate) {\n                    if (combiner.items.length) {\n                        var first = combiner.items[0];\n                        first.outer.rotation.x += 0.01;\n                        combiner.adjust();\n                    }\n                } else {\n                    // combiner.combine();\n                    combiner.fit();\n                }\n            }\n        }\n\n        return Combiner;\n\n    }();\n\n    window.Combiner = Combiner;\n\n}());\n/* global window, document, console, TweenLite */\n\n(function () {\n    'use strict';\n\n    var Effects = function () {\n\n        function Effects(scene, camera, renderer, w, h) {\n            var effects = this;\n            //\n            var renderPass = new THREE.RenderPass(scene, camera);\n            //\n            var outlinePass = new THREE.OutlinePass(new THREE.Vector2(w, h), scene, camera);\n            outlinePass.visibleEdgeColor.set(0x00ff00);\n            outlinePass.hiddenEdgeColor.set(0x000000);\n            outlinePass.edgeStrength = 5.0;\n            outlinePass.edgeGlow = 0.0;\n            outlinePass.edgeThickness = 1.0;\n            outlinePass.pulsePeriod = 2;\n            outlinePass.rotate = false;\n            outlinePass.usePatternTexture = false;\n            //\n            var fxaaPass = new THREE.ShaderPass(THREE.FXAAShader);\n            fxaaPass.uniforms.resolution.value.set(1 / w, 1 / h);\n            fxaaPass.renderToScreen = true;\n            //\n            var composer = new THREE.EffectComposer(renderer);\n            composer.addPass(renderPass);\n            composer.addPass(outlinePass);\n            composer.addPass(fxaaPass);\n            //\n            effects.renderPass = renderPass;\n            effects.outlinePass = outlinePass;\n            effects.fxaaPass = fxaaPass;\n            effects.composer = composer;\n        }\n\n        Effects.prototype = {\n            update: update,\n            resize: resize,\n            select: select,\n            unselect: unselect,\n        };\n\n        function update() {\n            var effects = this;\n            effects.composer.render();\n        }\n\n        function resize(w, h) {\n            var effects = this;\n            effects.composer.setSize(w, h);\n            effects.fxaaPass.uniforms.resolution.value.set(1 / w, 1 / h);\n        }\n\n        function select(object) {\n            var effects = this;\n            effects.outlinePass.selectedObjects = [object];\n        }\n\n        function unselect() {\n            var effects = this;\n            effects.outlinePass.selectedObjects = [];\n        }\n\n        return Effects;\n\n    }();\n\n    window.Effects = Effects;\n\n}());\n/* global window, document, console, TweenLite */\n\n(function () {\n    'use strict';\n\n    var DEBUG = true;\n    var RAD = Math.PI / 180;\n    var I = 0;\n\n    function rad(degree) {\n        return degree * RAD;\n    }\n\n    var Fitter = function () {\n\n        function Fitter(scene, camera, controls) {\n            var fitter = this;\n            fitter.scene = scene;\n            fitter.camera = camera;\n            fitter.dummy = camera.clone();\n            fitter.controls = controls;\n            fitter.projector = new THREE.Projector();\n            fitter.position = new THREE.Vector3();\n            fitter.target = new THREE.Vector3();\n            fitter.center = new THREE.Vector3();\n            fitter.size = new THREE.Vector3();\n            fitter.box = new THREE.Box3();\n            fitter.boxhelper = new THREE.Box3Helper(fitter.box, 0xff0000);\n\n            fitter.rotate = false;\n\n            fitter.target = new THREE.Vector3(0, 0, 0);\n            fitter.distance = 22;\n            fitter.angle = 0;\n\n            fitter.endTarget = new THREE.Vector3(0, 0, 0);\n            fitter.position = new THREE.Vector3(0, 0, 0);\n            fitter.distanceMin = 10;\n            fitter.distanceMax = 34;\n            fitter.rotationAngle = 1;\n            fitter.dragAngle = 0;\n            fitter.zoom = 1; // eliminabili ??\n            fitter.pow = 0; // eliminabili ??\n            /*\n            if (combiner.selected.item.type === APP.Parts.typeEnum.BladePlug) {\n                fitter.pow = 1;\n            } else {\n                fitter.pow = 0;\n            }\n            */\n            if (DEBUG) {\n                fitter.scene.add(fitter.boxhelper);\n            }\n        }\n\n        Fitter.prototype = {\n            fit: fit,\n            toScreen: toScreen,\n            toWorld: toWorld,\n            update: update,\n        };\n\n        function fit(combiner, offset, up) {\n            if (!offset) {\n                offset = 1.3;\n            }\n            if (!up) {\n                up = new THREE.Vector3(0, 1, 0);\n            }\n            var fitter = this,\n                projector = fitter.projector,\n                box = fitter.box,\n                size = fitter.size,\n                center = fitter.center,\n                camera = fitter.camera,\n                controls = fitter.controls,\n                dummy = fitter.dummy;\n            var object = combiner.selection ? combiner.selection.item.group : combiner.group;\n            box.setFromObject(object);\n            box.getCenter(center);\n            dummy.position.copy(camera.position);\n            dummy.quaternion.copy(camera.quaternion);\n            dummy.up = up;\n            dummy.lookAt(center);\n            dummy.updateProjectionMatrix();\n            var min = fitter.toScreen(box.min);\n            var max = fitter.toScreen(box.max);\n            var sc = fitter.toScreen(center);\n            box.applyMatrix4(dummy.matrixWorldInverse);\n            box.getSize(size);\n            var aspect = size.x / size.y;\n            var dim = (camera.aspect > aspect) ? size.y : size.x;\n            if (camera.aspect < aspect) {\n                dim /= camera.aspect;\n            }\n            dim *= offset;\n            var z = dim / 2 / Math.sin(camera.fov / 2 * RAD);\n            dummy.position.normalize().multiplyScalar(z);\n            fitter.distance = dummy.position.distanceTo(center);\n            // camera.far = distance + dim;\n            dummy.updateProjectionMatrix();\n            var vfrom = camera.position.clone();\n            var vto = dummy.position;\n            var qfrom = camera.quaternion.clone();\n            var qto = dummy.quaternion;\n            var animation = {\n                pow: 0,\n            };\n            TweenLite.to(animation, 0.6, {\n                pow: 1,\n                ease: Power2.easeOut,\n                overwrite: 'all',\n                // ease: Elastic.easeOut,\n                onUpdate: function () {\n                    camera.position.lerpVectors(vfrom, vto, animation.pow);\n                    THREE.Quaternion.slerp(qfrom, qto, camera.quaternion, animation.pow);\n                    camera.updateProjectionMatrix();\n                },\n                onComplete: function () {\n                    if (controls) {\n                        // controls.maxDistance = distance + dim;\n                        controls.target.copy(center);\n                        controls.update();\n                    }\n                }\n            });\n        }\n\n        function toWorld(v) {\n            var fitter = this,\n                projector = fitter.projector,\n                camera = fitter.camera,\n                w = window.innerWidth / 2,\n                h = window.innerHeight / 2;\n            var world = v.clone();\n            world.x = world.x / w - 1;\n            world.y = -world.y / h + 1;\n            projector.unprojectVector(world, camera);\n            return world;\n        }\n\n        function toScreen(v) {\n            var fitter = this,\n                camera = fitter.camera,\n                w = window.innerWidth / 2,\n                h = window.innerHeight / 2;\n            var screen = v.clone();\n            screen.project(camera);\n            screen.x = (screen.x + 1) * w;\n            screen.y = (-screen.y + 1) * h;\n            return screen;\n        }\n\n        function update() {\n            var fitter = this,\n                target = fitter.target,\n                endTarget = fitter.endTarget,\n                position = fitter.position,\n                distance = fitter.distance,\n                zoom = fitter.zoom,\n                dragAngle = fitter.dragAngle,\n                rotationAngle = fitter.rotationAngle,\n                pow = fitter.pow,\n                camera = fitter.camera;\n            if (fitter.rotate) {\n                rotationAngle = fitter.rotationAngle += 0.0002;\n            }\n\n            target.x += (endTarget.x - target.x) / 40;\n            target.y += (endTarget.y - target.y) / 40;\n            target.z += (endTarget.z - target.z) / 40;\n\n            position.x = target.x + distance * zoom * Math.cos(dragAngle + rotationAngle);\n            position.y = target.y + distance * zoom; // * (0.5 + 1.5 * (1 - pow));\n            position.z = target.z + distance * zoom * Math.sin(dragAngle + rotationAngle);\n\n            camera.position.x += (position.x - camera.position.x) / 13;\n            camera.position.y += (position.y - camera.position.y) / 13;\n            camera.position.z += (position.z - camera.position.z) / 13;\n            // camera.up = new THREE.Vector3(0, 0, -1);\n\n            camera.lookAt(target);\n        }\n\n        return Fitter;\n\n    }();\n\n    window.Fitter = Fitter;\n\n}());\n/* global window, document, console  */\n\n(function () {\n    'use strict';\n\n    var Forge = function () {\n\n        function Forge() {\n            var service = this;\n            service.loader = new THREE.JSONLoader();\n        }\n\n        Forge.prototype = {\n            load: load,\n        };\n\n        var i = 0;\n\n        function load(callback) {\n            var service = this;\n            http({\n                url: i % 2 === 0 ? 'img/Curved Body 1.js' : 'img/Angled Emitter 1.js',\n                onload: function (data) {\n                    data = data.replace(new RegExp('transparency', 'g'), 'opacity');\n                    data = data.replace(new RegExp('.#QNAN0', 'g'), '.0');\n                    var model = service.loader.parse(JSON.parse(data));\n                    callback(model.geometry, model.materials);\n                }\n            });\n            i++;\n        }\n\n        function http(options) {\n            var o = {\n                method: 'GET',\n                responseType: 'text',\n            };\n            if (!options || !options.url || !options.onload) {\n                return;\n            }\n            for (var p in options) {\n                o[p] = options[p];\n            }\n            var req = new XMLHttpRequest();\n            req.open(o.method, o.url, true);\n            req.responseType = o.responseType; // 'blob';\n            req.onload = function () {\n                if (this.status === 200) {\n                    // var blob = this.response;\n                    // var image = URL.createObjectURL(blob); // IE10+\n                    o.onload(this.response);\n                }\n            };\n            if (o.onerror) {\n                req.onerror = o.onerror;\n            }\n            if (o.onprogress) {\n                req.onerror = o.onprogress;\n            }\n            req.send();\n        }\n\n        return Forge;\n\n    }();\n\n    window.Forge = Forge;\n\n}());\n/* global window, document, console, TweenLite */\n\n(function () {\n    'use strict';\n\n    var Library = function () {\n\n        var BASE = 'img/textures/';\n        var ANISOTROPY = 1;\n        var USE_PHONG = false;\n\n        function Library(renderer) {\n            ANISOTROPY = renderer.capabilities.getMaxAnisotropy();\n            this.replaceShader();\n            var manager = new THREE.LoadingManager();\n            /*\n            manager.onProgress = function (item, loaded, total) {\n                console.log('Library.manager.onProgress', item, loaded, total);\n            };\n            */\n            this.renderer = renderer;\n            this.manager = manager;\n            this.textures = this.getTextures();\n            this.materials = this.getMaterials();\n        }\n\n        // publics\n        Library.prototype = {\n            getMaterials: getMaterials,\n            getTextures: getTextures,\n            getTexture: getTexture,\n            getTextureCube: getTextureCube,\n            getTextureCubeHdr: getTextureCubeHdr,\n            replaceShader: replaceShader,\n        };\n\n        function getMaterials() {\n            var service = this,\n                manager = this.manager,\n                loader = this.loader,\n                textures = this.textures;\n            if (USE_PHONG) {\n                return {\n                    floor: new THREE.MeshPhongMaterial({\n                        bumpMap: textures.floor,\n                        bumpScale: 0.05,\n                        color: 0x101010,\n                        specular: 0x101010,\n                        reflectivity: 0.15,\n                        shininess: 12,\n                        // metal: true,\n                    }),\n                    wrap: new THREE.MeshPhongMaterial({\n                        name: 'wrap',\n                        color: 0x101010,\n                        specular: 0x444444,\n                        shininess: 7,\n                        reflectivity: 0.75,\n                        specularMap: textures.leatherLight,\n                        bumpMap: textures.leatherBump,\n                        bumpScale: 0.15,\n                        combine: THREE.MixOperation,\n                        // metal: true,\n                    }),\n                    bronze: new THREE.MeshPhongMaterial({\n                        name: 'bronze',\n                        color: 0xc07f5d,\n                        specular: 0x555555,\n                        specularMap: textures.silver,\n                        shininess: 10,\n                        reflectivity: 0.20,\n                        envMap: textures.env,\n                        combine: THREE.MixOperation,\n                        bumpMap: textures.silver,\n                        bumpScale: 0.001,\n                        // metal: true,\n                    }),\n                    gold: new THREE.MeshPhongMaterial({\n                        name: 'gold',\n                        color: 0xc8ad60,\n                        specular: 0x555555,\n                        specularMap: textures.silver,\n                        shininess: 10,\n                        reflectivity: 0.20,\n                        envMap: textures.env,\n                        combine: THREE.MixOperation,\n                        bumpMap: textures.silver,\n                        bumpScale: 0.001,\n                        // metal: true,\n                    }),\n                    green: new THREE.MeshPhongMaterial({\n                        name: 'green',\n                        color: 0x00aa00,\n                        specular: 0x333333,\n                        specularMap: textures.silver,\n                        shininess: 30,\n                        reflectivity: 0.10,\n                        envMap: textures.env,\n                        combine: THREE.MixOperation,\n                        bumpMap: textures.silver,\n                        bumpScale: 0.003,\n                        // metal: true,\n                    }),\n                    red: new THREE.MeshPhongMaterial({\n                        name: 'red',\n                        color: 0xdd0000,\n                        specular: 0x333333,\n                        specularMap: textures.silver,\n                        shininess: 30,\n                        reflectivity: 0.10,\n                        envMap: textures.env,\n                        combine: THREE.MixOperation,\n                        bumpMap: textures.silver,\n                        bumpScale: 0.003,\n                        // metal: true,\n                    }),\n                    standard: {\n                        silver: new THREE.MeshPhongMaterial({\n                            name: 'chrome',\n                            color: 0x888888,\n                            specular: 0x555555,\n                            specularMap: textures.silver,\n                            shininess: 30,\n                            reflectivity: 0.15,\n                            envMap: textures.env,\n                            combine: THREE.MixOperation,\n                            bumpMap: textures.silver,\n                            bumpScale: 0.003,\n                            // metal: true,\n                        }),\n                        black: new THREE.MeshPhongMaterial({ // MeshLambertMaterial\n                            name: 'black',\n                            color: 0x0d0d0d, // 0x0d0d0d\n                            reflectivity: 0.3,\n                            envMap: textures.env,\n                            combine: THREE.MultiplyOperation\n                        }),\n                    },\n                    weathered: {\n                        silver: new THREE.MeshPhongMaterial({\n                            name: 'chrome',\n                            color: 0x444444,\n                            specular: 0x555555,\n                            specularMap: textures.weathered,\n                            shininess: 90,\n                            reflectivity: 0.15,\n                            envMap: textures.env,\n                            combine: THREE.MixOperation,\n                            bumpMap: textures.silver,\n                            bumpScale: 0.003,\n                            // metal: true,\n                            map: textures.weathered,\n                            roughness: 0.2,\n                            // roughnessMap: textures.silver,\n                            metalness: 0.5,\n                            metalnessMap: textures.weathered,\n                        }),\n                        black: new THREE.MeshPhongMaterial({\n                            name: 'chrome',\n                            color: 0x333333,\n                            specular: 0x444444,\n                            specularMap: textures.weathered,\n                            shininess: 90,\n                            reflectivity: 0.05,\n                            envMap: textures.env,\n                            combine: THREE.MixOperation,\n                            bumpMap: textures.silver,\n                            bumpScale: 0.003,\n                            // metal: true,\n                            map: textures.weathered,\n                            roughness: 1.4,\n                            roughnessMap: textures.weathered,\n                            metalness: 0.5,\n                            metalnessMap: textures.silver,\n                        }),\n                        /*\n                        black: new THREE.MeshLambertMaterial({\n                            name: 'black',\n                            color: 0x070707, // 0x070707\n                            specular: 0x0a0a0a,\n                            reflectivity: 0.05,\n                            envMap: textures.env,\n                            combine: THREE.MultiplyOperation\n                        }),\n                        */\n                    },\n                    black: {\n                        silver: new THREE.MeshPhongMaterial({\n                            name: 'chrome',\n                            color: 0x070707, // 0x070707\n                            specular: 0x0a0a0a,\n                            reflectivity: 0.05,\n                            envMap: textures.env,\n                            combine: THREE.MultiplyOperation\n                        }),\n                        black: new THREE.MeshPhongMaterial({ // MeshLambertMaterial\n                            name: 'black',\n                            color: 0x060606, // 0x060606\n                            specular: 0x0a0a0a,\n                            reflectivity: 0.05,\n                            envMap: textures.env,\n                            combine: THREE.MultiplyOperation\n                        }),\n                    },\n                    light: {\n                        off: new THREE.MeshPhongMaterial({\n                            name: 'light',\n                            opacity: 0.98,\n                            transparent: true,\n                            color: 0x444444,\n                            specular: 0x888888,\n                            shininess: 20,\n                            reflectivity: 0.3\n                        }),\n                        on6: new THREE.MeshPhongMaterial({\n                            name: 'light',\n                            opacity: 0.98,\n                            transparent: true,\n                            color: 0x444444,\n                            emissive: 0x444444,\n                            specular: 0x888888,\n                            shininess: 20,\n                            reflectivity: 0.3\n                        }),\n                        on12: new THREE.MeshPhongMaterial({\n                            name: 'light',\n                            color: 0xffffff,\n                            emissive: 0x888888,\n                            specular: 0xffffff,\n                            shininess: 100,\n                            reflectivity: 0.3\n                        }),\n                    },\n                    glare: {\n                        off: new THREE.MeshLambertMaterial({\n                            name: 'glare',\n                            opacity: 0,\n                            transparent: true,\n                            color: 0x000000,\n                        }),\n                        on6: new THREE.MeshLambertMaterial({\n                            name: 'glare',\n                            opacity: 0.6,\n                            transparent: true,\n                            color: 0xecf4fb,\n                            map: textures.glare,\n                            blending: THREE.AdditiveBlending,\n                            specular: 0x000000,\n                            shininess: 0,\n                            combine: THREE.MixOperation,\n                            reflectivity: 0\n                        }),\n                        on12: new THREE.MeshLambertMaterial({\n                            name: 'glare',\n                            opacity: 0.85,\n                            transparent: true,\n                            color: 0xecf4fb,\n                            map: textures.glare,\n                            blending: THREE.AdditiveBlending,\n                            specular: 0x000000,\n                            shininess: 0,\n                            combine: THREE.MixOperation,\n                            reflectivity: 0\n                        }),\n                    },\n                    emitterGlare: {\n                        off: new THREE.MeshLambertMaterial({\n                            name: 'glare',\n                            opacity: 0,\n                            transparent: true,\n                            color: 0x000000,\n                        }),\n                        on6: new THREE.MeshLambertMaterial({\n                            name: 'glare',\n                            opacity: 0.6,\n                            transparent: true,\n                            color: 0xecf4fb,\n                            map: textures.emitterGlare,\n                            blending: THREE.AdditiveBlending,\n                            specular: 0x000000,\n                            shininess: 0,\n                            combine: THREE.MixOperation,\n                            reflectivity: 0\n                        }),\n                        on12: new THREE.MeshLambertMaterial({\n                            name: 'glare',\n                            opacity: 0.85,\n                            transparent: true,\n                            color: 0xecf4fb,\n                            map: textures.emitterGlare,\n                            blending: THREE.AdditiveBlending,\n                            specular: 0x000000,\n                            shininess: 100,\n                            combine: THREE.MixOperation,\n                            reflectivity: 0\n                        }),\n                    },\n                    /*\n                    silver: {\n                        silver: new THREE.MeshPhongMaterial({\n                            name: 'chrome',\n                            color: 0x888888,\n                            specular: 0x555555,\n                            specularMap: textures.silver,\n                            shininess: 30,\n                            reflectivity: 0.15,\n                            envMap: textures.env,\n                            // combine: THREE.MixOperation,\n                            bumpMap: textures.silver,\n                            bumpScale: 0.003,\n                            // metal: true,\n                        }),\n                        black: new THREE.MeshPhongMaterial({\n                            name: 'black',\n                            color: 0x777777,\n                            specular: 0x444444,\n                            specularMap: textures.silver,\n                            shininess: 30,\n                            reflectivity: 0.15,\n                            envMap: textures.env,\n                            // combine: THREE.MixOperation,\n                            bumpMap: textures.silver,\n                            bumpScale: 0.003,\n                            // metal: true,\n                        }),\n                    },\n                    */\n                };\n            } else {\n                return {\n                    floor: new THREE.MeshStandardMaterial({\n                        name: 'floor',\n                        color: 0x101010, // 0xaeb7c1, // 0x101010,\n                        roughness: 0.5, // 0.4,\n                        metalness: 0.1, // 0.99,\n                        bumpMap: textures.floor,\n                        bumpScale: 0.05,\n                        envMap: textures.env,\n                        // combine: THREE.MixOperation,\n                    }),\n                    wrap: new THREE.MeshPhongMaterial({\n                        name: 'wrap',\n                        color: 0x101010,\n                        specular: 0x444444,\n                        shininess: 7,\n                        reflectivity: 0.75,\n                        specularMap: textures.leatherLight,\n                        bumpMap: textures.leatherBump,\n                        bumpScale: 0.15,\n                        // combine: THREE.MixOperation,\n                        // metal: true,\n                    }),\n                    bronze: new THREE.MeshStandardMaterial({\n                        name: 'bronze',\n                        color: 0xc07f5d,\n                        roughness: 0.5,\n                        roughnessMap: textures.silver,\n                        metalness: 0.9,\n                        metalnessMap: textures.weathered,\n                        envMap: textures.env,\n                        envMapIntensity: 0.15,\n                        // combine: THREE.MixOperation,\n                        // bumpMap: textures.silver,\n                        // bumpScale: 0.003,\n                    }),\n                    gold: new THREE.MeshStandardMaterial({\n                        name: 'gold',\n                        color: 0xc8ad60,\n                        roughness: 0.5,\n                        roughnessMap: textures.silver,\n                        metalness: 0.9,\n                        metalnessMap: textures.weathered,\n                        envMap: textures.env,\n                        envMapIntensity: 0.15,\n                        // combine: THREE.MixOperation,\n                        // bumpMap: textures.silver,\n                        // bumpScale: 0.003,\n                    }),\n                    green: new THREE.MeshPhongMaterial({\n                        name: 'green',\n                        color: 0x00aa00,\n                        specular: 0x333333,\n                        specularMap: textures.silver,\n                        shininess: 30,\n                        reflectivity: 0.10,\n                        envMap: textures.env,\n                        // combine: THREE.MixOperation,\n                        bumpMap: textures.silver,\n                        bumpScale: 0.003,\n                        // metal: true,\n                    }),\n                    red: new THREE.MeshPhongMaterial({\n                        name: 'red',\n                        color: 0xdd0000,\n                        specular: 0x333333,\n                        specularMap: textures.silver,\n                        shininess: 30,\n                        reflectivity: 0.10,\n                        envMap: textures.env,\n                        // combine: THREE.MixOperation,\n                        bumpMap: textures.silver,\n                        bumpScale: 0.003,\n                        // metal: true,\n                    }),\n                    standard: {\n                        silver: new THREE.MeshStandardMaterial({\n                            name: 'chrome',\n                            color: 0x888888,\n                            roughness: 0.5,\n                            // roughnessMap: textures.silver,\n                            metalness: 0.9,\n                            metalnessMap: textures.silver,\n                            envMap: textures.env,\n                            envMapIntensity: 1.0,\n                            // combine: THREE.MixOperation,\n                            // bumpMap: textures.silver,\n                            // bumpScale: 0.003,\n                        }),\n                        black: new THREE.MeshStandardMaterial({\n                            name: 'black',\n                            color: 0x101010, // 0x0d0d0d,\n                            roughness: 0.5,\n                            metalness: 0.4,\n                            bumpMap: textures.sand,\n                            bumpScale: 0.01,\n                            envMap: textures.env,\n                            envMapIntensity: 1.0,\n                            // combine: THREE.MixOperation,\n                        }),\n                    },\n                    weathered: {\n                        silver: new THREE.MeshStandardMaterial({\n                            name: 'chrome',\n                            color: 0x444444,\n                            map: textures.weathered,\n                            roughness: 0.7,\n                            roughnessMap: textures.silver,\n                            metalness: 0.9,\n                            // metalnessMap: textures.weathered,\n                            envMap: textures.env,\n                            // combine: THREE.MixOperation,\n                            // bumpMap: textures.silver,\n                            // bumpScale: 0.003,\n                        }),\n                        black: new THREE.MeshStandardMaterial({\n                            name: 'chrome',\n                            color: 0x3c3c3c,\n                            map: textures.weathered,\n                            roughness: 0.7,\n                            roughnessMap: textures.silver,\n                            metalness: 0.9,\n                            // metalnessMap: textures.weathered,\n                            envMap: textures.env,\n                            // combine: THREE.MixOperation,\n                            // bumpMap: textures.silver,\n                            // bumpScale: 0.003,\n                        }),\n                        /*\n                        black: new THREE.MeshLambertMaterial({\n                            name: 'black',\n                            color: 0x070707, // 0x070707\n                            specular: 0x0a0a0a,\n                            reflectivity: 0.05,\n                            envMap: textures.env,\n                            combine: THREE.MultiplyOperation\n                        }),\n                        */\n                    },\n                    black: {\n                        silver: new THREE.MeshStandardMaterial({\n                            name: 'chrome',\n                            color: 0x080808,\n                            roughness: 0.5,\n                            metalness: 0.9,\n                            envMap: textures.env,\n                            // combine: THREE.MixOperation,\n                        }),\n                        black: new THREE.MeshStandardMaterial({\n                            name: 'black',\n                            color: 0x0d0d0d,\n                            roughness: 0.4,\n                            metalness: 0.4,\n                            // bumpMap: textures.leatherBump,\n                            // bumpScale: 0.03,\n                            envMap: textures.env,\n                            envMapIntensity: 1.0,\n                            // combine: THREE.MixOperation,\n                        }),\n                    },\n                    light: {\n                        off: new THREE.MeshPhongMaterial({\n                            name: 'light',\n                            opacity: 0.98,\n                            transparent: true,\n                            color: 0x444444,\n                            specular: 0x888888,\n                            shininess: 20,\n                            reflectivity: 0.3\n                        }),\n                        on6: new THREE.MeshPhongMaterial({\n                            name: 'light',\n                            opacity: 0.98,\n                            transparent: true,\n                            color: 0x444444,\n                            emissive: 0x444444,\n                            specular: 0x888888,\n                            shininess: 20,\n                            reflectivity: 0.3\n                        }),\n                        on12: new THREE.MeshPhongMaterial({\n                            name: 'light',\n                            color: 0xffffff,\n                            emissive: 0x888888,\n                            specular: 0xffffff,\n                            shininess: 100,\n                            reflectivity: 0.3\n                        }),\n                    },\n                    glare: {\n                        off: new THREE.MeshLambertMaterial({\n                            name: 'glare',\n                            opacity: 0,\n                            transparent: true,\n                            color: 0x000000,\n                        }),\n                        on6: new THREE.MeshLambertMaterial({\n                            name: 'glare',\n                            opacity: 0.6,\n                            transparent: true,\n                            color: 0xecf4fb,\n                            map: textures.glare,\n                            blending: THREE.AdditiveBlending,\n                            specular: 0x000000,\n                            shininess: 0,\n                            combine: THREE.MixOperation,\n                            reflectivity: 0\n                        }),\n                        on12: new THREE.MeshLambertMaterial({\n                            name: 'glare',\n                            opacity: 0.85,\n                            transparent: true,\n                            color: 0xecf4fb,\n                            map: textures.glare,\n                            blending: THREE.AdditiveBlending,\n                            specular: 0x000000,\n                            shininess: 0,\n                            combine: THREE.MixOperation,\n                            reflectivity: 0\n                        }),\n                    },\n                    emitterGlare: {\n                        off: new THREE.MeshLambertMaterial({\n                            name: 'glare',\n                            opacity: 0,\n                            transparent: true,\n                            color: 0x000000,\n                        }),\n                        on6: new THREE.MeshLambertMaterial({\n                            name: 'glare',\n                            opacity: 0.6,\n                            transparent: true,\n                            color: 0xecf4fb,\n                            map: textures.emitterGlare,\n                            blending: THREE.AdditiveBlending,\n                            specular: 0x000000,\n                            shininess: 0,\n                            combine: THREE.MixOperation,\n                            reflectivity: 0\n                        }),\n                        on12: new THREE.MeshLambertMaterial({\n                            name: 'glare',\n                            opacity: 0.85,\n                            transparent: true,\n                            color: 0xecf4fb,\n                            map: textures.emitterGlare,\n                            blending: THREE.AdditiveBlending,\n                            specular: 0x000000,\n                            shininess: 100,\n                            combine: THREE.MixOperation,\n                            reflectivity: 0\n                        }),\n                    },\n                };\n            }\n        }\n\n        function getTexture(url) {\n            var service = this,\n                manager = this.manager,\n                textures = this.textures;\n            // scope.loader.add('texture-silver');\n            return new THREE.TextureLoader(manager).load(BASE + url,\n                function onLoad(texture) {\n                    // scope.loader.remove('texture-silver');            \n                },\n                function onProgress(loaded, total) {\n\n                },\n                function onError(e) {\n                    // scope.loader.remove('texture-silver');\n                });\n        }\n\n        function getTextureCube(url) {\n            var service = this,\n                manager = this.manager,\n                textures = this.textures;\n            // scope.loader.add('texture-silver');\n            return new THREE.CubeTextureLoader(manager).setPath(BASE + url).load([\n                    'px.jpg', 'nx.jpg', 'py.jpg', 'ny.jpg', 'pz.jpg', 'nz.jpg'\n                ],\n                function onLoad(texture) {\n                    // scope.loader.remove('texture-silver');\n                },\n                function onProgress(loaded, total) {\n\n                },\n                function onError(e) {\n                    // scope.loader.remove('texture-silver');\n                });\n        }\n\n        function getTextureCubeHdr(url, key) {\n            var service = this,\n                renderer = this.renderer,\n                manager = this.manager,\n                textures = this.textures;\n            var urls = [\n                BASE + url + 'px.hdr', BASE + url + 'nx.hdr',\n                BASE + url + 'py.hdr', BASE + url + 'ny.hdr',\n                BASE + url + 'pz.hdr', BASE + url + 'nz.hdr'\n            ];\n            return new THREE.HDRCubeTextureLoader().load(THREE.UnsignedByteType, urls, function (cubemap) {\n                renderer.gammaInput = true; // ???\n                renderer.gammaOutput = true;\n                renderer.toneMapping = THREE.LinearToneMapping;\n                renderer.toneMappingExposure = 1.3;\n                var generator = new THREE.PMREMGenerator(cubemap);\n                generator.update(renderer);\n                var packer = new THREE.PMREMCubeUVPacker(generator.cubeLods);\n                packer.update(renderer);\n                textures[key] = packer.CubeUVRenderTarget;\n                cubemap.dispose();\n                service.materials.weathered.silver.envMap = packer.CubeUVRenderTarget;\n                service.materials.weathered.silver.needsUpdate = true;\n                service.materials.weathered.black.envMap = packer.CubeUVRenderTarget;\n                service.materials.weathered.black.needsUpdate = true;\n                // generator.dispose();\n                // packer.dispose();\n                // scope.loader.remove('texture-silver');\n            });\n        }\n\n        function getTextures() {\n            var service = this,\n                manager = this.manager,\n                textures = {};\n            //\n            textures.env = service.getTextureCube('env/');\n            // textures.env = service.getTextureCubeHdr('env/pisa/', 'env');\n            textures.env.anisotropy = ANISOTROPY;\n            textures.env.format = THREE.RGBFormat;\n            // \n            textures.floor = service.getTexture('floor.jpg');\n            textures.floor.anisotropy = ANISOTROPY;\n            textures.floor.wrapS = THREE.RepeatWrapping;\n            textures.floor.wrapT = THREE.RepeatWrapping;\n            textures.floor.repeat.set(40, 40);\n            //\n            textures.silver = service.getTexture('brushed-light.jpg');\n            textures.silver.anisotropy = ANISOTROPY;\n            // textures.silver.wrapS = THREE.RepeatWrapping;\n            textures.silver.wrapT = THREE.RepeatWrapping;\n            // textures.silver.repeat.set(1, 1);\n            //\n            textures.weathered = service.getTexture('brushed-dark.jpg');\n            textures.weathered.anisotropy = ANISOTROPY;\n            // textures.weathered.wrapS = THREE.RepeatWrapping;\n            textures.weathered.wrapT = THREE.RepeatWrapping;\n            // textures.weathered.repeat.set(1, 1);\n            // \n            textures.sand = service.getTexture('sand.bump.jpg');\n            textures.sand.anisotropy = ANISOTROPY;\n            textures.sand.wrapS = THREE.RepeatWrapping;\n            textures.sand.wrapT = THREE.RepeatWrapping;\n            textures.sand.repeat.set(5, 5);\n            //\n            textures.bump = service.getTexture('brushed-dark.jpg');\n            textures.bump.anisotropy = ANISOTROPY;\n            textures.bump.wrapS = THREE.RepeatWrapping;\n            textures.bump.wrapT = THREE.RepeatWrapping;\n            textures.bump.repeat.set(5, 5);\n            //\n            textures.glare = service.getTexture('glare.jpg');\n            textures.glare.anisotropy = ANISOTROPY;\n            //\n            textures.emitterGlare = service.getTexture('emitter-glare.jpg');\n            textures.emitterGlare.anisotropy = ANISOTROPY;\n            //\n            textures.leatherBump = service.getTexture('leather-bump.jpg');\n            textures.leatherBump.anisotropy = ANISOTROPY;\n            textures.leatherBump.wrapS = THREE.RepeatWrapping;\n            textures.leatherBump.wrapT = THREE.RepeatWrapping;\n            // textures.leatherBump.repeat.set(1, 1);\n            //\n            textures.leatherLight = service.getTexture('leather-light.jpg');\n            textures.leatherLight.anisotropy = ANISOTROPY;\n            textures.leatherLight.wrapS = THREE.RepeatWrapping;\n            textures.leatherLight.wrapT = THREE.RepeatWrapping;\n            // textures.leatherLight.repeat.set(1, 1);\n            //\n            textures.reptileBump = service.getTexture('reptile-bump.jpg');\n            textures.reptileBump.anisotropy = ANISOTROPY;\n            textures.reptileBump.wrapS = THREE.RepeatWrapping;\n            textures.reptileBump.wrapT = THREE.RepeatWrapping;\n            // textures.reptileBump.repeat.set(1, 1);\n            //\n            textures.reptileLight = service.getTexture('reptile-light.jpg');\n            textures.reptileLight.anisotropy = ANISOTROPY;\n            textures.reptileLight.wrapS = THREE.RepeatWrapping;\n            textures.reptileLight.wrapT = THREE.RepeatWrapping;\n            // textures.reptileLight.repeat.set(1, 1);\n            //\n            textures.stingrayBump = service.getTexture('stingray-bump.jpg');\n            textures.stingrayBump.anisotropy = ANISOTROPY;\n            textures.stingrayBump.wrapS = THREE.RepeatWrapping;\n            textures.stingrayBump.wrapT = THREE.RepeatWrapping;\n            // textures.stingrayBump.repeat.set(1, 1);\n            //\n            textures.stingrayLight = service.getTexture('stingray-light.jpg');\n            textures.stingrayLight.anisotropy = ANISOTROPY;\n            textures.stingrayLight.wrapS = THREE.RepeatWrapping;\n            textures.stingrayLight.wrapT = THREE.RepeatWrapping;\n            // textures.stingrayLight.repeat.set(1, 1);\n            return textures;\n        }\n\n        function replaceShader() {\n            var fragment = THREE.ShaderChunk.meshphong_frag;\n            // console.log('Library.replaceShader THREE.ShaderChunk.meshphong_frag', fragment);\n            var outgoingLightA = \"vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\";\n            var outgoingLightB = \"vec3 outgoingLight = (reflectedLight.directDiffuse + reflectedLight.indirectDiffuse) * specular + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveLight;\";\n            // console.log('MAterials.replacing meshphong_frag', fragment.indexOf(outgoingLightA));\n            THREE.ShaderChunk.meshphong_frag = fragment.replace(outgoingLightA, outgoingLightB);\n        }\n\n        return Library;\n\n    }();\n\n    window.Library = Library;\n\n}());\n/* global window, document, console, TweenLite */\n\n(function () {\n    'use strict';\n\n    var DEBUG = false;\n    var RAD = Math.PI / 180;\n    var I = 0;\n    var MIN = 11;\n\n    function rad(degree) {\n        return degree * RAD;\n    }\n\n    var Orbiter = function () {\n\n        function Orbiter(scene, camera, controls) {\n            var orbiter = this;\n            orbiter.scene = scene;\n            orbiter.camera = camera;\n            orbiter.dummy = camera.clone();\n            orbiter.controls = controls;\n            orbiter.projector = new THREE.Projector();\n            orbiter.center = new THREE.Vector3();\n            orbiter.size = new THREE.Vector3();\n            orbiter.box = new THREE.Box3();\n            orbiter.boxhelper = new THREE.Box3Helper(orbiter.box, 0xff0000);\n\n            orbiter.rotate = true;\n\n            orbiter.target = new THREE.Vector3(0, 0, 0);\n            orbiter.distance = MIN * 2;\n            orbiter.rotationAngle = 1;\n            orbiter.dragAngle = 0;\n            orbiter.zoom = 1; // eliminabili ??\n            orbiter.pow = 0; // eliminabili ??\n\n            orbiter.values = {\n                target: new THREE.Vector3(0, 0, 0),\n                distance: MIN * 2,\n                rotationAngle: 0,\n                dragAngle: 0,\n                zoom: 0,\n                pow: 0,\n            };\n\n            orbiter.distanceMin = MIN;\n            orbiter.distanceMax = MIN * 3;\n            /*\n            if (combiner.selected.item.type === APP.Parts.typeEnum.BladePlug) {\n                orbiter.pow = 1;\n            } else {\n                orbiter.pow = 0;\n            }\n            */\n            orbiter.set(orbiter.camera, orbiter.target);\n            //\n            if (DEBUG) {\n                orbiter.scene.add(orbiter.boxhelper);\n            }\n        }\n\n        Orbiter.prototype = {\n            fit: fit,\n            set: set,\n            toScreen: toScreen,\n            toWorld: toWorld,\n            tween: tween,\n            update: update,\n        };\n\n        function set(camera, target) {\n            var orbiter = this,\n                values = orbiter.values;\n\n            camera.position.x = target.x + values.distance * values.zoom * Math.cos(values.dragAngle + values.rotationAngle);\n            camera.position.y = target.y + values.distance * values.zoom; // * (0.5 + 1.5 * (1 - values.pow));\n            camera.position.z = target.z + values.distance * values.zoom * Math.sin(values.dragAngle + values.rotationAngle);\n            // camera.up = new THREE.Vector3(0, 0, -1);\n            camera.lookAt(target);\n        }\n\n        function fit(combiner, offset, up) {\n            if (!offset) {\n                offset = 1.3;\n            }\n            if (!up) {\n                up = new THREE.Vector3(0, 1, 0);\n            }\n            var orbiter = this,\n                projector = orbiter.projector,\n                box = orbiter.box,\n                size = orbiter.size,\n                center = orbiter.center,\n                camera = orbiter.camera,\n                controls = orbiter.controls,\n                dummy = orbiter.dummy;\n\n            var object = combiner.selection ? combiner.selection.item.group : combiner.group;\n            box.setFromObject(object);\n            box.getCenter(center);\n            box.getSize(size);\n            if (combiner.items.length > 0) {\n                orbiter.set(dummy, center);\n                /*\n                dummy.position.copy(camera.position);\n                dummy.quaternion.copy(camera.quaternion);\n                dummy.up = up;\n                dummy.lookAt(center);\n                */\n                dummy.fov = camera.fov;\n                dummy.aspect = camera.aspect;\n                /*\n                dummy.updateProjectionMatrix();\n                var min = orbiter.toScreen(box.min);\n                var max = orbiter.toScreen(box.max);\n                var sc = orbiter.toScreen(center);\n                */\n                // dummy.matrixWorldNeedsUpdate = true;\n                // dummy.matrixWorldInverse.getInverse(dummy.matrixWorld);\n                size.applyMatrix4(dummy.matrixWorldInverse);\n                var aspect = size.x / size.y;\n                var dim = (camera.aspect > aspect) ? size.y : size.x;\n                if (camera.aspect < aspect) {\n                    dim /= camera.aspect;\n                }\n                dim *= offset;\n                var z = dim / 2 / Math.sin(camera.fov / 2 * RAD);\n                orbiter.distance = z;\n            } else {\n                orbiter.distance = MIN;\n            }\n            orbiter.distanceMin = orbiter.distance * 0.5;\n            orbiter.distanceMax = orbiter.distance * 1.5;\n            //\n            orbiter.target.copy(center);\n        }\n\n        function tween() {\n            var orbiter = this,\n                target = orbiter.target,\n                values = orbiter.values;\n\n            if (orbiter.rotate) {\n                orbiter.rotationAngle += 0.0002;\n            }\n            var friction = 1 / 15;\n            values.target.x += (target.x - values.target.x) * friction;\n            values.target.y += (target.y - values.target.y) * friction;\n            values.target.z += (target.z - values.target.z) * friction;\n            values.distance += (orbiter.distance - values.distance) * friction;\n            values.rotationAngle += (orbiter.rotationAngle - values.rotationAngle) * friction;\n            values.dragAngle += (orbiter.dragAngle - values.dragAngle) * friction;\n            values.zoom += (orbiter.zoom - values.zoom) * friction;\n            values.pow += (orbiter.pow - values.pow) * friction;\n        }\n\n        function update() {\n            var orbiter = this;\n            orbiter.tween();\n            orbiter.set(orbiter.camera, orbiter.values.target);\n        }\n\n        function toWorld(v) {\n            var orbiter = this,\n                projector = orbiter.projector,\n                camera = orbiter.camera,\n                w = window.innerWidth / 2,\n                h = window.innerHeight / 2;\n            var world = v.clone();\n            world.x = world.x / w - 1;\n            world.y = -world.y / h + 1;\n            projector.unprojectVector(world, camera);\n            return world;\n        }\n\n        function toScreen(v) {\n            var orbiter = this,\n                camera = orbiter.camera,\n                w = window.innerWidth / 2,\n                h = window.innerHeight / 2;\n            var screen = v.clone();\n            screen.project(camera);\n            screen.x = (screen.x + 1) * w;\n            screen.y = (-screen.y + 1) * h;\n            return screen;\n        }\n\n        return Orbiter;\n\n    }();\n\n    window.Orbiter = Orbiter;\n\n}());\n/* global window, document, console, TweenLite, Forge, Combiner, Orbiter, Library */\n\n(function () {\n    'use strict';\n\n    if (!Detector.webgl) {\n        Detector.addGetWebGLMessage();\n        return;\n    }\n\n    var btnAdd = document.querySelector('.btn-add');\n    var btnRemove = document.querySelector('.btn-remove');\n    var btnFlip = document.querySelector('.btn-flip');\n    var container = document.querySelector('.editor');\n    var w = container.offsetWidth,\n        h = container.offsetHeight;\n\n    var forge = new Forge();\n\n    var renderer = new THREE.WebGLRenderer({\n        alpha: true,\n        antialias: true,\n    });\n    renderer.setSize(w, h);\n    container.appendChild(renderer.domElement);\n\n    var camera = new THREE.PerspectiveCamera(45, w / h, 1, 50000);\n    // camera.position.set(0, 20, 40);\n    // camera.lookAt(0, 0, 0);\n    // controls.update() must be called after any manual changes to the camera's transform\n    // var controls;\n    // var controls = new THREE.OrbitControls(camera);\n    // controls.update();\n\n    var scene = new THREE.Scene();\n\n    var library = new Library(renderer);\n\n    var lights = addLights(scene);\n\n    var floor = addFloor(scene);\n\n    var combiner = new Combiner(scene, library);\n\n    var orbiter = new Orbiter(scene, camera);\n\n    var effects = new Effects(scene, camera, renderer, w, h);\n\n    function render() {\n        // required if controls.enableDamping or controls.autoRotate are set to true\n        // controls.update();\n        combiner.update();\n        //\n        var y = combiner.center.y - combiner.size.y / 2 - 3;\n        floor.position.y += (y - floor.position.y) / 8;\n        lights.position.x += (combiner.center.x - lights.position.x) / 8;\n        lights.position.y += (combiner.center.y - lights.position.y) / 8;\n        lights.position.z += (combiner.center.z - lights.position.z) / 8;\n        // floor.position.x = combiner.center.x;\n        // floor.position.z = combiner.center.z;\n        //\n        orbiter.update();\n        effects.update();\n        // renderer.render(scene, camera);\n    }\n\n    function animate() {\n        render();\n        requestAnimationFrame(animate);\n    }\n\n    function addLights(scene) {\n        var lights = new THREE.Group();\n        lights.name = 'pivot';\n        lights.rotation.y = Math.PI / 180 * 90;\n        //\n        var light = new THREE.AmbientLight(0x444444);\n        scene.add(light);\n        // \n        var light1 = new THREE.DirectionalLight(0xeedddd, 1.0, 2000);\n        light1.name = 'light1';\n        light1.position.set(-30, 20, 10);\n        lights.add(light1);\n        //\n        var light2 = new THREE.DirectionalLight(0xddddee, 1.0, 2000);\n        light2.name = 'light2';\n        light2.position.set(30, 20, -10);\n        lights.add(light2);\n        //\n        /*\n        var light = new THREE.PointLight(0xddddee, 1, 2000);\n        light.position.set(0, 200, 0);\n        scene.add(light);\n        */\n        scene.add(lights);\n        return lights;\n    }\n\n    function addFloor(scene) {\n        /*\n        var radius = 200;\n        var radials = 16;\n        var circles = 8;\n        var divisions = 64;\n        var floor = new THREE.PolarGridHelper(radius, radials, circles, divisions);\n        */\n        // var floor = new THREE.GridHelper(500, 500, 0x888888, 0xAAAAAA);\n        // floor.rotateOnAxis( new THREE.Vector3( 1, 0, 0 ), 90 * ( Math.PI/180 ));\t\n        var floor = new THREE.Mesh(new THREE.PlaneBufferGeometry(500, 500), library.materials.floor);\n        floor.name = 'floor';\n        floor.rotation.x = -Math.PI / 2;\n        floor.position.y = -3.5;\n        floor.visible = true;\n        scene.add(floor);\n        return floor;\n    }\n\n    function onAdd() {\n        if (!combiner.busy()) {\n            forge.load(function (geometry, materials) {\n                if (effects) effects.unselect();\n                var item = combiner.add(geometry, materials);\n                orbiter.fit(combiner);\n                combiner.entering++;\n                item.enter(function () {\n                    combiner.entering--;\n                });\n            });\n        }\n    }\n\n    function onRemove() {\n        if (!combiner.busy()) {\n            combiner.remove();\n            orbiter.fit(combiner);\n        }\n    }\n\n    function onFlip() {\n        combiner.flip(function () {\n            orbiter.fit(combiner);\n        });\n    }\n\n    function onResize() {\n        w = container.offsetWidth;\n        h = container.offsetHeight;\n        camera.aspect = w / h;\n        camera.updateProjectionMatrix();\n        orbiter.fit(combiner);\n        renderer.setSize(w, h);\n        if (effects) effects.resize(w, h);\n    }\n\n    var raycaster = new THREE.Raycaster();\n    var down;\n    var moved = 0;\n\n    function onDown(e) {\n        down = getTouch(e);\n        down.relativeTo(container);\n        down.mx = down.x;\n        down.startDragAngle = orbiter.dragAngle;\n        down.startDistance = orbiter.distance;\n        // console.log('down', down);\n        raycaster.setFromCamera(down, camera);\n        var selection = combiner.select(raycaster);\n        // console.log('selection', selection);\n        if (selection) {\n            /*\n            if (controls) {\n                controls.enabled = false;\n            }\n            */\n            down.index = selection.index;\n            down.item = selection.item;\n            down.rotation = selection.rotation;\n            if (effects) effects.select(down.item.model);\n        } else {\n            if (effects) effects.unselect();\n        }\n        orbiter.fit(combiner);\n        /*\n        down.index = i;\n        down.item = value;\n        down.angle = value.coords.angle;\n        */\n    }\n\n    function onMove(e) {\n        moved++;\n        var pow = 1; // 0.001;\n        if (e.type === 'touchmove') {\n            e.stopPropagation();\n            e.preventDefault();\n            pow *= 4;\n        }\n        if (down) {\n            var move = getTouch(e);\n            move.relativeTo(container);\n            var diff = move.sub(down);\n            // console.log(diff.x, diff.y);\n            if (move.count == 2 && down.count == 2) {\n                // PINCH                   \n                orbiter.distance = down.startDistance + (down.pinchSize() - move.pinchSize()) * pow * 10;\n            } else {\n                if (combiner.selection && combiner.selection.item === down.item) {\n                    // ROTATE ITEM\n                    // down.item.rotation = down.rotation + (move.y - down.y) * pow * 10;\n                    // var index = down.index;\n                    // down.item.outer.rotation.x = down.rotation.x + diff.y * Math.PI;\n                    combiner.rotate(diff.y * pow * 10);\n                } else {\n                    // DRAG CAMERA\n                    orbiter.dragAngle = down.startDragAngle + diff.x * pow * 10;\n                    orbiter.distance = down.startDistance + diff.y * pow * -10;\n                    /*\n                    // SOUND\n                    if (combiner.selectedItem && combiner.selectedItem.type == APP.Parts.typeEnum.Sound) {\n                        if (Math.abs(move.x - down.mx) > w / 3) {\n                            down.mx = move.x;\n                            scope.$root.$broadcast('onSoundSwing', scope.saber.sound, Math.abs(move.x - down.mx) / 100);\n                        }\n                    }\n                    */\n                }\n            }\n            // orbiter.update();\n            orbiter.distance = Math.min(orbiter.distanceMax, Math.max(orbiter.distanceMin, orbiter.distance));\n            // scope.$root.$broadcast('onControls');\n        }\n    }\n\n    function onUp(e) {\n        if (down && moved < 5) {\n            if (down.item) {\n                /*\n                scope.$apply(function () {\n                    selectedIndex = down.index;\n                    onFocus(down.item);\n                });\n                */\n            } else if (combiner.selectedItem) {\n                /*\n                scope.$apply(function () {\n                    onBlur();\n                });\n                */\n            }\n        }\n        down = null;\n        moved = 0;\n        /*\n        if (controls) {\n            controls.enabled = true;\n        }\n        */\n        removeListeners();\n    }\n\n    function onWheel(e) {\n        e = window.event || e; // old IE support\n        var bounds = container.getBounds();\n        if (Math.abs(e.pageX - bounds.center.x) < bounds.width / 3) {\n            var delta = Math.max(-1, Math.min(1, (e.wheelDelta || -e.detail)));\n            orbiter.distance += delta;\n            orbiter.distance = Math.min(orbiter.distanceMax, Math.max(orbiter.distanceMin, orbiter.distance));\n            orbiter.update();\n            e.preventDefault();\n            // scope.$root.$broadcast('onControls');\n        }\n    }\n\n    function onDoubleClick(e) {\n        // console.log('onDoubleClick');\n        var touch = getTouch(e);\n        raycaster.setFromCamera(touch, camera);\n        combiner.hitAndFlip(raycaster, function () {\n            orbiter.fit(combiner);\n        });\n    }\n\n    function onMouseDown(e) {\n        onDown(e);\n        addMouseListeners();\n    }\n\n    function onTouchDown(e) {\n        onDown(e);\n        addTouchListeners();\n        e.stopPropagation();\n        e.preventDefault();\n    }\n\n    function addMouseListeners() {\n        window.addEventListener('mousemove', onMove);\n        window.addEventListener('mouseup', onUp);\n    }\n\n    function addTouchListeners() {\n        window.addEventListener('touchmove', onMove);\n        window.addEventListener('touchend', onUp);\n    }\n\n    function removeListeners() {\n        window.removeEventListener('touchmove mousemove', onMove);\n        window.removeEventListener('touchend mouseup', onUp);\n    }\n\n    // container.addEventListener('dblclick', onDoubleClick);\n    container.addEventListener('mousedown', onMouseDown);\n    container.addEventListener('touchstart', onTouchDown);\n    container.addEventListener('mousewheel', onWheel);\n\n    window.addEventListener('resize', onResize, false);\n    btnAdd.addEventListener('click', onAdd);\n    btnRemove.addEventListener('click', onRemove);\n    btnFlip.addEventListener('click', onFlip);\n\n    animate();\n\n    setTimeout(onAdd, 1000);\n\n}());"]}